{"version":3,"file":"lib_index_js.706e3844fb1e47ea9e82.js","mappings":";;;;;;;;;;;;;AAAO;AACP,kBAAkB,gCAAgC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,YAAY;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AClD+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AClC0C;AACqB;AACxB;AACiB;AACC;AACzD;AACO,iDAAiD,oDAAK;AAC7D;AACA,aAAa,eAAe;AAC5B,mBAAmB,kEAA4B,GAAG,eAAe;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kEAAgB;AACxB,QAAQ,yEAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oDAAU;AAC/C,+BAA+B,UAAU,IAAI,eAAe;AAC5D;AACA;AACA,qGAAqG,eAAe;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;;;;;;ACnDmB;AACE;AACJ;AACmB;AACK;AACxD;AACP,kBAAkB,eAAe;AACjC,kCAAkC,qDAAM;AACxC,qCAAqC,qDAAM;AAC3C,qCAAqC,qDAAM;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,wDAAwD,wEAAmC;AAC3F,uGAAuG,mDAAM,GAAG,sDAAsD;AACtK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oDAAU;AAC/C;AACA;AACA,6BAA6B;AAC7B;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iCAAiC,oDAAU;AAC3C;AACA;AACA,yBAAyB;AACzB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,eAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,kBAAkB,gEAAU;AAC5B;AACA,0BAA0B,mDAAM,GAAG,YAAY;AAC/C,0BAA0B,iEAAe;AACzC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@educational-technology-collective/etc_jupyterlab_feedback/./lib/button.js","webpack://@educational-technology-collective/etc_jupyterlab_feedback/./lib/handler.js","webpack://@educational-technology-collective/etc_jupyterlab_feedback/./lib/index.js","webpack://@educational-technology-collective/etc_jupyterlab_feedback/./lib/service.js"],"sourcesContent":["export class ETCJupyterLabConfigurableTextButton {\n    constructor({ stylePressed, style, innerHTML }) {\n        this._stylePressed = stylePressed;\n        this._style = style;\n        this.eventTarget = new EventTarget();\n        let node = this.node = document.createElement('div');\n        let button = this.button = document.createElement('button');\n        button.classList.add('jp-Button');\n        let span = this._span = document.createElement('span');\n        span.classList.add('bp3-button-text');\n        if (innerHTML) {\n            span.innerHTML = innerHTML;\n        }\n        button.appendChild(span);\n        node.appendChild(button);\n        if (style) {\n            Object.assign(button.style, style);\n        }\n        this.enable();\n    }\n    disable() {\n        this.button.removeEventListener('mousedown', this);\n        this.button.removeEventListener('mouseup', this);\n        this.button.removeEventListener('click', this);\n    }\n    enable() {\n        this.button.addEventListener('mousedown', this);\n        this.button.addEventListener('mouseup', this);\n        this.button.addEventListener('click', this);\n    }\n    handleEvent(event) {\n        try {\n            if (event.type == 'click') {\n                this.eventTarget.dispatchEvent(new CustomEvent('click'));\n            }\n            else if (event.type == 'mousedown') {\n                Object.assign(this.button.style, this._stylePressed);\n                document.addEventListener('mouseup', this, { once: true });\n            }\n            else if (event.type == 'mouseup') {\n                Object.assign(this.button.style, this._style);\n            }\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n    set innerHtml(html) {\n        this._span.innerHTML = html;\n    }\n}\n","import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'etc-jupyterlab-feedback', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { Token } from '@lumino/coreutils';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { requestAPI } from './handler';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { ETCJupyterLabFeedbackService } from './service';\nconst PLUGIN_ID = '@educational-technology-collective/etc_jupyterlab_feedback:plugin';\nexport const IETCJupyterLabFeedbackServiceFactory = new Token(PLUGIN_ID);\nclass ETCJupyterLabFeedbackServiceFactory {\n    create({ notebookPanel }) {\n        return new ETCJupyterLabFeedbackService({ notebookPanel });\n    }\n}\n/**\n * Initialization data for the @educational-technology-collective/etc_jupyterlab_configurable_button extension.\n */\nconst plugin = {\n    id: PLUGIN_ID,\n    provides: IETCJupyterLabFeedbackServiceFactory,\n    autoStart: true,\n    optional: [\n        INotebookTracker,\n        ISettingRegistry\n    ],\n    activate: (app, notebookTracker, settingRegistry) => {\n        let etcJupyterLabFeedbackServiceFactory = new ETCJupyterLabFeedbackServiceFactory();\n        (async () => {\n            try {\n                await app.started;\n                const config = await requestAPI('config');\n                console.log(`${PLUGIN_ID}, ${config.version}`);\n                // //// TEST\n                // function addButtonToToolbar(notebookPanel: NotebookPanel) {\n                //   let etcJupyterLabFeedbackService = etcJupyterLabFeedbackServiceFactory.create({ notebookPanel });\n                //   etcJupyterLabFeedbackService.buttonClicked.connect((sender, args) => console.log(args));\n                //   etcJupyterLabFeedbackService.resultsDisplayed.connect((sender, args) => console.log(args));\n                //   etcJupyterLabFeedbackService.resultsDismissed.connect((sender, args) => console.log(args));\n                // }\n                // notebookTracker.forEach(addButtonToToolbar);\n                // notebookTracker.widgetAdded.connect(async (sender: INotebookTracker, notebookPanel: NotebookPanel) => {\n                //   await notebookPanel.revealed;\n                //   addButtonToToolbar(notebookPanel);\n                // });\n                // ////\n            }\n            catch (e) {\n                console.error(e);\n            }\n        })();\n        return etcJupyterLabFeedbackServiceFactory;\n    }\n};\nexport default plugin;\n","import { Widget } from '@lumino/widgets';\nimport { Signal } from \"@lumino/signaling\";\nimport { requestAPI } from './handler';\nimport { showDialog, Dialog } from '@jupyterlab/apputils';\nimport { ETCJupyterLabConfigurableTextButton } from './button';\nexport class ETCJupyterLabFeedbackService {\n    constructor({ notebookPanel }) {\n        this._buttonClicked = new Signal(this);\n        this._resultsDisplayed = new Signal(this);\n        this._resultsDismissed = new Signal(this);\n        this.handleEvent = this.handleEvent.bind(this);\n        this._notebookPanel = notebookPanel;\n        let buttonConfig = {\n            style: {\n                color: 'white',\n                backgroundColor: '#00a2ed',\n                border: '0px',\n                minWidth: '80px'\n            },\n            stylePressed: {\n                backgroundColor: '#0082be'\n            },\n            innerHTML: 'Feedback'\n        };\n        this._etcJupyterLabConfigurableTextButton = new ETCJupyterLabConfigurableTextButton(buttonConfig);\n        notebookPanel.toolbar.insertAfter('restart-and-run', 'etc-jupyterlab-configurable-button', new Widget({ node: this._etcJupyterLabConfigurableTextButton.node }));\n        this._etcJupyterLabConfigurableTextButton.eventTarget.addEventListener('click', this);\n    }\n    async handleEvent(event) {\n        var _a;\n        try {\n            this._etcJupyterLabConfigurableTextButton.disable();\n            let cell = this._notebookPanel.content.activeCell;\n            let cells = [\n                {\n                    id: cell === null || cell === void 0 ? void 0 : cell.model.id,\n                    index: this._notebookPanel.content.widgets.findIndex((value) => value == cell)\n                }\n            ];\n            this._buttonClicked.emit({\n                eventName: 'validate_button_clicked',\n                notebookPanel: this._notebookPanel,\n                cells: cells,\n                message: ''\n            });\n            this._etcJupyterLabConfigurableTextButton.innerHtml = 'Feedback...';\n            (_a = this._notebookPanel.content.model) === null || _a === void 0 ? void 0 : _a.metadata.set('etc_active_cell', this._notebookPanel.content.activeCellIndex);\n            await this._notebookPanel.context.save();\n            let feedback = (async () => {\n                var _a;\n                try {\n                    if (((_a = this._notebookPanel.content.model) === null || _a === void 0 ? void 0 : _a.metadata.get('etc_feedback')) == true) {\n                        return await requestAPI('feedback', {\n                            body: JSON.stringify({\n                                'notebook_path': this._notebookPanel.context.path\n                            }),\n                            method: 'POST'\n                        });\n                    }\n                    else {\n                        return null;\n                    }\n                }\n                catch (e) {\n                    console.error(e);\n                    return null;\n                }\n            })();\n            let nbgrader = (async () => {\n                try {\n                    return await requestAPI('nbgrader_validate', {\n                        body: JSON.stringify({\n                            'notebook_path': this._notebookPanel.context.path,\n                        }),\n                        method: 'POST'\n                    });\n                }\n                catch (e) {\n                    console.error(e);\n                    return null;\n                }\n            })();\n            let responses = await Promise.all([feedback, nbgrader]);\n            let feedbackResponse = responses[0];\n            let validationHTML = responses[1];\n            let feedbackHTML = feedbackResponse === null || feedbackResponse === void 0 ? void 0 : feedbackResponse.feedback;\n            let body = document.createElement('div');\n            body.innerHTML = '';\n            if (feedbackHTML) {\n                body.innerHTML = `\n                <h2 class=\"etc-feedback-part\">Intelligent Feedback</h2>\n                <p>${feedbackHTML}</p>\n                `;\n                if (validationHTML) {\n                    body.innerHTML = body.innerHTML + `<br>`;\n                }\n            }\n            if (validationHTML) {\n                body.innerHTML = body.innerHTML + `\n                <h2 class=\"etc-feedback-part\">Validation Results</h2>\n                <p><pre>${validationHTML}<pre></p>\n                `;\n            }\n            else {\n                body.innerHTML = body.innerHTML + `\n                <h2 class=\"etc-feedback-part\">Validation Results</h2>\n                <p>Validation error.</p>\n                `;\n            }\n            this._resultsDisplayed.emit({\n                eventName: 'validation_results_displayed',\n                notebookPanel: this._notebookPanel,\n                cells: cells,\n                message: {\n                    'feedback': feedbackResponse,\n                    'validation': validationHTML\n                }\n            });\n            await showDialog({\n                //title: 'Feedback',\n                body: new Widget({ node: body }),\n                buttons: [Dialog.okButton()]\n            });\n            this._resultsDismissed.emit({\n                eventName: 'validation_results_dismissed',\n                notebookPanel: this._notebookPanel,\n                cells: cells,\n                message: {\n                    'feedback': feedbackResponse,\n                    'validation': validationHTML\n                }\n            });\n        }\n        catch (e) {\n            console.error(e);\n        }\n        finally {\n            this._etcJupyterLabConfigurableTextButton.innerHtml = \"Feedback\";\n            this._etcJupyterLabConfigurableTextButton.enable();\n        }\n    }\n    get buttonClicked() {\n        return this._buttonClicked;\n    }\n    get resultsDisplayed() {\n        return this._resultsDisplayed;\n    }\n    get resultsDismissed() {\n        return this._resultsDismissed;\n    }\n}\n"],"names":[],"sourceRoot":""}