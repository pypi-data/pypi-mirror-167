from typing import Any, Callable, Iterable, Iterator, Tuple, List, TypeVar, Union, overload, ModuleType
import drjit
import drjit as dr

class Array0b(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array0b, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Array0f(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array0f, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Array0f64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array0f64, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Array0i(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array0i, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Array0i64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array0i64, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Array0u(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array0u, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Array0u64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array0u64, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Array1b(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array1b, *args) -> None: ...
    label = ...
    x = ...

    def assign(self, other): ...
    ...

class Array1f(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array1f, *args) -> None: ...
    label = ...
    x = ...

    def assign(self, other): ...
    ...

class Array1f64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array1f64, *args) -> None: ...
    label = ...
    x = ...

    def assign(self, other): ...
    ...

class Array1i(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array1i, *args) -> None: ...
    label = ...
    x = ...

    def assign(self, other): ...
    ...

class Array1i64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array1i64, *args) -> None: ...
    label = ...
    x = ...

    def assign(self, other): ...
    ...

class Array1u(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array1u, *args) -> None: ...
    label = ...
    x = ...

    def assign(self, other): ...
    ...

class Array1u64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array1u64, *args) -> None: ...
    label = ...
    x = ...

    def assign(self, other): ...
    ...

class Array21b(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array21b, *args) -> None: ...
    label = ...
    x = ...
    y = ...

    def assign(self, other): ...
    ...

class Array22b(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array22b, *args) -> None: ...
    label = ...
    x = ...
    y = ...

    def assign(self, other): ...
    ...

class Array23b(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array23b, *args) -> None: ...
    label = ...
    x = ...
    y = ...

    def assign(self, other): ...
    ...

class Array24b(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array24b, *args) -> None: ...
    label = ...
    x = ...
    y = ...

    def assign(self, other): ...
    ...

class Array2b(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array2b, *args) -> None: ...
    label = ...
    x = ...
    y = ...

    def assign(self, other): ...
    ...

class Array2f(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array2f, *args) -> None: ...
    label = ...
    x = ...
    y = ...

    def assign(self, other): ...
    ...

class Array2f64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array2f64, *args) -> None: ...
    label = ...
    x = ...
    y = ...

    def assign(self, other): ...
    ...

class Array2i(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array2i, *args) -> None: ...
    label = ...
    x = ...
    y = ...

    def assign(self, other): ...
    ...

class Array2i64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array2i64, *args) -> None: ...
    label = ...
    x = ...
    y = ...

    def assign(self, other): ...
    ...

class Array2u(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array2u, *args) -> None: ...
    label = ...
    x = ...
    y = ...

    def assign(self, other): ...
    ...

class Array2u64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array2u64, *args) -> None: ...
    label = ...
    x = ...
    y = ...

    def assign(self, other): ...
    ...

class Array33b(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array33b, *args) -> None: ...
    label = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array3b(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array3b, *args) -> None: ...
    label = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array3f(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array3f, *args) -> None: ...
    label = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array3f64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array3f64, *args) -> None: ...
    label = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array3i(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array3i, *args) -> None: ...
    label = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array3i64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array3i64, *args) -> None: ...
    label = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array3u(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array3u, *args) -> None: ...
    label = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array3u64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array3u64, *args) -> None: ...
    label = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array41b(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array41b, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array41f(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array41f, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array41f64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array41f64, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array41i(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array41i, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array41u(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array41u, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array43b(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array43b, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array43f(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array43f, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array43f64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array43f64, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array43i(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array43i, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array43u(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array43u, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array441b(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array441b, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array443b(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array443b, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array444b(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array444b, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array44b(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array44b, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array44f(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array44f, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array44f64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array44f64, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array44i(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array44i, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array44u(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array44u, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array4b(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array4b, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array4f(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array4f, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array4f64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array4f64, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array4i(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array4i, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array4i64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array4i64, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array4u(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array4u, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array4u64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Array4u64, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class ArrayXb(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.ArrayXb, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class ArrayXf(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.ArrayXf, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class ArrayXf64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.ArrayXf64, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class ArrayXi(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.ArrayXi, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class ArrayXi64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.ArrayXi64, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class ArrayXu(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.ArrayXu, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class ArrayXu64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.ArrayXu64, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Bool(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.llvm.ad.Bool, arg0: bool) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Bool, arg0: drjit.llvm.ad.Bool) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Bool, arg0: drjit.llvm.Bool) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Bool, *args) -> None: ...
    index = ...
    index_ad = ...
    label = ...

    def assign(self: drjit.llvm.ad.Bool, arg0: drjit.llvm.ad.Bool) -> None: ...
    ...

class Complex21f(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Complex21f, *args) -> None: ...
    imag = ...
    label = ...
    real = ...

    def assign(self, other): ...
    ...

class Complex21f64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Complex21f64, *args) -> None: ...
    imag = ...
    label = ...
    real = ...

    def assign(self, other): ...
    ...

class Complex23f(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Complex23f, *args) -> None: ...
    imag = ...
    label = ...
    real = ...

    def assign(self, other): ...
    ...

class Complex23f64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Complex23f64, *args) -> None: ...
    imag = ...
    label = ...
    real = ...

    def assign(self, other): ...
    ...

class Complex24f(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Complex24f, *args) -> None: ...
    imag = ...
    label = ...
    real = ...

    def assign(self, other): ...
    ...

class Complex24f64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Complex24f64, *args) -> None: ...
    imag = ...
    label = ...
    real = ...

    def assign(self, other): ...
    ...

class Complex2f(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Complex2f, *args) -> None: ...
    imag = ...
    label = ...
    real = ...

    def assign(self, other): ...
    ...

class Complex2f64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Complex2f64, *args) -> None: ...
    imag = ...
    label = ...
    real = ...

    def assign(self, other): ...
    ...

class Float(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.llvm.ad.Float, arg0: float) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Float, arg0: int) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Float, arg0: drjit.llvm.ad.Int) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Float, arg0: drjit.llvm.ad.UInt) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Float, arg0: drjit.llvm.ad.Int64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Float, arg0: drjit.llvm.ad.UInt64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Float, arg0: drjit.llvm.ad.Float) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Float, arg0: drjit.llvm.ad.Float64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Float, arg0: drjit.llvm.Float) -> None: ...
    def 10. __init__(self: drjit.llvm.ad.Float, *args) -> None: ...
    index = ...
    index_ad = ...
    label = ...

    def assign(self: drjit.llvm.ad.Float, arg0: drjit.llvm.ad.Float) -> None: ...
    ...

class Float(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.llvm.ad.Float, arg0: float) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Float, arg0: int) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Float, arg0: drjit.llvm.ad.Int) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Float, arg0: drjit.llvm.ad.UInt) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Float, arg0: drjit.llvm.ad.Int64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Float, arg0: drjit.llvm.ad.UInt64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Float, arg0: drjit.llvm.ad.Float) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Float, arg0: drjit.llvm.ad.Float64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Float, arg0: drjit.llvm.Float) -> None: ...
    def 10. __init__(self: drjit.llvm.ad.Float, *args) -> None: ...
    index = ...
    index_ad = ...
    label = ...

    def assign(self: drjit.llvm.ad.Float, arg0: drjit.llvm.ad.Float) -> None: ...
    ...

class Float64(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.llvm.ad.Float64, arg0: float) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Float64, arg0: int) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Float64, arg0: drjit.llvm.ad.Int) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Float64, arg0: drjit.llvm.ad.UInt) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Float64, arg0: drjit.llvm.ad.Int64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Float64, arg0: drjit.llvm.ad.UInt64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Float64, arg0: drjit.llvm.ad.Float) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Float64, arg0: drjit.llvm.ad.Float64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Float64, arg0: drjit.llvm.Float64) -> None: ...
    def 10. __init__(self: drjit.llvm.ad.Float64, *args) -> None: ...
    index = ...
    index_ad = ...
    label = ...

    def assign(self: drjit.llvm.ad.Float64, arg0: drjit.llvm.ad.Float64) -> None: ...
    ...

class Int(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.llvm.ad.Int, arg0: int) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Int, arg0: int) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Int, arg0: drjit.llvm.ad.Int) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Int, arg0: drjit.llvm.ad.UInt) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Int, arg0: drjit.llvm.ad.Int64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Int, arg0: drjit.llvm.ad.UInt64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Int, arg0: drjit.llvm.ad.Float) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Int, arg0: drjit.llvm.ad.Float64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Int, arg0: drjit.llvm.Int) -> None: ...
    def 10. __init__(self: drjit.llvm.ad.Int, *args) -> None: ...
    index = ...
    index_ad = ...
    label = ...

    def assign(self: drjit.llvm.ad.Int, arg0: drjit.llvm.ad.Int) -> None: ...
    ...

class Int(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.llvm.ad.Int, arg0: int) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Int, arg0: int) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Int, arg0: drjit.llvm.ad.Int) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Int, arg0: drjit.llvm.ad.UInt) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Int, arg0: drjit.llvm.ad.Int64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Int, arg0: drjit.llvm.ad.UInt64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Int, arg0: drjit.llvm.ad.Float) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Int, arg0: drjit.llvm.ad.Float64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Int, arg0: drjit.llvm.Int) -> None: ...
    def 10. __init__(self: drjit.llvm.ad.Int, *args) -> None: ...
    index = ...
    index_ad = ...
    label = ...

    def assign(self: drjit.llvm.ad.Int, arg0: drjit.llvm.ad.Int) -> None: ...
    ...

class Int64(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.llvm.ad.Int64, arg0: int) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Int64, arg0: int) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Int64, arg0: drjit.llvm.ad.Int) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Int64, arg0: drjit.llvm.ad.UInt) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Int64, arg0: drjit.llvm.ad.Int64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Int64, arg0: drjit.llvm.ad.UInt64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Int64, arg0: drjit.llvm.ad.Float) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Int64, arg0: drjit.llvm.ad.Float64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Int64, arg0: drjit.llvm.Int64) -> None: ...
    def 10. __init__(self: drjit.llvm.ad.Int64, *args) -> None: ...
    index = ...
    index_ad = ...
    label = ...

    def assign(self: drjit.llvm.ad.Int64, arg0: drjit.llvm.ad.Int64) -> None: ...
    ...

class Loop(drjit.llvm.ad.LoopBase):
    def __init__(self: drjit.llvm.ad.Loop, name: str, state: handle = None) -> None: ...
    def __call__(self: drjit.llvm.ad.Loop, arg0: drjit.llvm.ad.Bool) -> bool: ...
    def init(self: drjit.llvm.ad.Loop) -> None: ...
    def put(self: drjit.llvm.ad.Loop, arg0: function) -> None: ...
    def set_eval_stride(self: drjit.llvm.ad.Loop, arg0: int) -> None: ...
    def set_max_iterations(self: drjit.llvm.ad.Loop, arg0: int) -> None: ...
    ...

class LoopBase:
    ...

class Matrix2f(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Matrix2f, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Matrix2f64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Matrix2f64, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Matrix2i(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Matrix2i, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Matrix2u(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Matrix2u, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Matrix3f(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Matrix3f, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Matrix3f64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Matrix3f64, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Matrix3i(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Matrix3i, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Matrix3u(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Matrix3u, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Matrix41f(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Matrix41f, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Matrix41f64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Matrix41f64, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Matrix41i(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Matrix41i, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Matrix41u(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Matrix41u, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Matrix43f(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Matrix43f, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Matrix43f64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Matrix43f64, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Matrix43i(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Matrix43i, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Matrix43u(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Matrix43u, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Matrix44f(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Matrix44f, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Matrix44f64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Matrix44f64, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Matrix44i(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Matrix44i, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Matrix44u(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Matrix44u, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Matrix4f(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Matrix4f, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Matrix4f64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Matrix4f64, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Matrix4i(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Matrix4i, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Matrix4u(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Matrix4u, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class PCG32:
    @overload
    def __init__(self: drjit.llvm.ad.PCG32, size: int = 1, initstate: drjit.llvm.ad.UInt64 = 9600629759793949339, initseq: drjit.llvm.ad.UInt64 = 15726070495360670683) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.PCG32, arg0: drjit.llvm.ad.PCG32) -> None: ...
    inc = ...
    state = ...

    @overload
    def next_float32(self: drjit.llvm.ad.PCG32) -> drjit.llvm.ad.Float: ...
    @overload
    def next_float32(self: drjit.llvm.ad.PCG32, arg0: drjit.llvm.ad.Bool) -> drjit.llvm.ad.Float: ...
    @overload
    def next_float64(self: drjit.llvm.ad.PCG32) -> drjit.llvm.ad.Float64: ...
    @overload
    def next_float64(self: drjit.llvm.ad.PCG32, arg0: drjit.llvm.ad.Bool) -> drjit.llvm.ad.Float64: ...
    @overload
    def next_uint32(self: drjit.llvm.ad.PCG32) -> drjit.llvm.ad.UInt: ...
    @overload
    def next_uint32(self: drjit.llvm.ad.PCG32, arg0: drjit.llvm.ad.Bool) -> drjit.llvm.ad.UInt: ...
    def next_uint32_bounded(self: drjit.llvm.ad.PCG32, bound: int, mask: drjit.llvm.ad.Bool = True) -> drjit.llvm.ad.UInt: ...
    @overload
    def next_uint64(self: drjit.llvm.ad.PCG32) -> drjit.llvm.ad.UInt64: ...
    @overload
    def next_uint64(self: drjit.llvm.ad.PCG32, arg0: drjit.llvm.ad.Bool) -> drjit.llvm.ad.UInt64: ...
    def next_uint64_bounded(self: drjit.llvm.ad.PCG32, bound: int, mask: drjit.llvm.ad.Bool = True) -> drjit.llvm.ad.UInt64: ...
    def seed(self: drjit.llvm.ad.PCG32, size: int = 1, initstate: drjit.llvm.ad.UInt64 = 9600629759793949339, initseq: drjit.llvm.ad.UInt64 = 15726070495360670683) -> None: ...
    ...

class Quaternion4f(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Quaternion4f, *args) -> None: ...
    imag = ...
    label = ...
    real = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Quaternion4f64(drjit.ArrayBase):
    def __init__(self: drjit.llvm.ad.Quaternion4f64, *args) -> None: ...
    imag = ...
    label = ...
    real = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class TensorXb(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.llvm.ad.TensorXb) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXb, array: object) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXb, array: drjit.llvm.ad.Bool) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXb, array: drjit.llvm.ad.Bool, shape: List[int]) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXb, arg0: drjit.llvm.ad.TensorXb) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXb, arg0: drjit.llvm.TensorXb) -> None: ...
    array = ...
    index = ...
    index_ad = ...
    label = ...
    ndim = ...
    shape = ...

    def assign(self: drjit.llvm.ad.TensorXb, arg0: drjit.llvm.ad.TensorXb) -> None: ...
    ...

class TensorXf(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.llvm.ad.TensorXf) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXf, array: object) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXf, array: drjit.llvm.ad.Float) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXf, array: drjit.llvm.ad.Float, shape: List[int]) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXf, arg0: drjit.llvm.ad.TensorXi) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXf, arg0: drjit.llvm.ad.TensorXu) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXf, arg0: drjit.llvm.ad.TensorXi64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXf, arg0: drjit.llvm.ad.TensorXu64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXf, arg0: drjit.llvm.ad.TensorXf) -> None: ...
    def 10. __init__(self: drjit.llvm.ad.TensorXf, arg0: drjit.llvm.ad.TensorXf64) -> None: ...
    def 11. __init__(self: drjit.llvm.ad.TensorXf, arg0: drjit.llvm.TensorXf) -> None: ...
    array = ...
    index = ...
    index_ad = ...
    label = ...
    ndim = ...
    shape = ...

    def assign(self: drjit.llvm.ad.TensorXf, arg0: drjit.llvm.ad.TensorXf) -> None: ...
    ...

class TensorXf64(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.llvm.ad.TensorXf64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXf64, array: object) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXf64, array: drjit.llvm.ad.Float64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXf64, array: drjit.llvm.ad.Float64, shape: List[int]) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXf64, arg0: drjit.llvm.ad.TensorXi) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXf64, arg0: drjit.llvm.ad.TensorXu) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXf64, arg0: drjit.llvm.ad.TensorXi64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXf64, arg0: drjit.llvm.ad.TensorXu64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXf64, arg0: drjit.llvm.ad.TensorXf) -> None: ...
    def 10. __init__(self: drjit.llvm.ad.TensorXf64, arg0: drjit.llvm.ad.TensorXf64) -> None: ...
    def 11. __init__(self: drjit.llvm.ad.TensorXf64, arg0: drjit.llvm.TensorXf64) -> None: ...
    array = ...
    index = ...
    index_ad = ...
    label = ...
    ndim = ...
    shape = ...

    def assign(self: drjit.llvm.ad.TensorXf64, arg0: drjit.llvm.ad.TensorXf64) -> None: ...
    ...

class TensorXi(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.llvm.ad.TensorXi) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXi, array: object) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXi, array: drjit.llvm.ad.Int) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXi, array: drjit.llvm.ad.Int, shape: List[int]) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXi, arg0: drjit.llvm.ad.TensorXi) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXi, arg0: drjit.llvm.ad.TensorXu) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXi, arg0: drjit.llvm.ad.TensorXi64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXi, arg0: drjit.llvm.ad.TensorXu64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXi, arg0: drjit.llvm.ad.TensorXf) -> None: ...
    def 10. __init__(self: drjit.llvm.ad.TensorXi, arg0: drjit.llvm.ad.TensorXf64) -> None: ...
    def 11. __init__(self: drjit.llvm.ad.TensorXi, arg0: drjit.llvm.TensorXi) -> None: ...
    array = ...
    index = ...
    index_ad = ...
    label = ...
    ndim = ...
    shape = ...

    def assign(self: drjit.llvm.ad.TensorXi, arg0: drjit.llvm.ad.TensorXi) -> None: ...
    ...

class TensorXi64(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.llvm.ad.TensorXi64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXi64, array: object) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXi64, array: drjit.llvm.ad.Int64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXi64, array: drjit.llvm.ad.Int64, shape: List[int]) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXi64, arg0: drjit.llvm.ad.TensorXi) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXi64, arg0: drjit.llvm.ad.TensorXu) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXi64, arg0: drjit.llvm.ad.TensorXi64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXi64, arg0: drjit.llvm.ad.TensorXu64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXi64, arg0: drjit.llvm.ad.TensorXf) -> None: ...
    def 10. __init__(self: drjit.llvm.ad.TensorXi64, arg0: drjit.llvm.ad.TensorXf64) -> None: ...
    def 11. __init__(self: drjit.llvm.ad.TensorXi64, arg0: drjit.llvm.TensorXi64) -> None: ...
    array = ...
    index = ...
    index_ad = ...
    label = ...
    ndim = ...
    shape = ...

    def assign(self: drjit.llvm.ad.TensorXi64, arg0: drjit.llvm.ad.TensorXi64) -> None: ...
    ...

class TensorXu(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.llvm.ad.TensorXu) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXu, array: object) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXu, array: drjit.llvm.ad.UInt) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXu, array: drjit.llvm.ad.UInt, shape: List[int]) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXu, arg0: drjit.llvm.ad.TensorXi) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXu, arg0: drjit.llvm.ad.TensorXu) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXu, arg0: drjit.llvm.ad.TensorXi64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXu, arg0: drjit.llvm.ad.TensorXu64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXu, arg0: drjit.llvm.ad.TensorXf) -> None: ...
    def 10. __init__(self: drjit.llvm.ad.TensorXu, arg0: drjit.llvm.ad.TensorXf64) -> None: ...
    def 11. __init__(self: drjit.llvm.ad.TensorXu, arg0: drjit.llvm.TensorXu) -> None: ...
    array = ...
    index = ...
    index_ad = ...
    label = ...
    ndim = ...
    shape = ...

    def assign(self: drjit.llvm.ad.TensorXu, arg0: drjit.llvm.ad.TensorXu) -> None: ...
    ...

class TensorXu64(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.llvm.ad.TensorXu64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXu64, array: object) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXu64, array: drjit.llvm.ad.UInt64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXu64, array: drjit.llvm.ad.UInt64, shape: List[int]) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXu64, arg0: drjit.llvm.ad.TensorXi) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXu64, arg0: drjit.llvm.ad.TensorXu) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXu64, arg0: drjit.llvm.ad.TensorXi64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXu64, arg0: drjit.llvm.ad.TensorXu64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.TensorXu64, arg0: drjit.llvm.ad.TensorXf) -> None: ...
    def 10. __init__(self: drjit.llvm.ad.TensorXu64, arg0: drjit.llvm.ad.TensorXf64) -> None: ...
    def 11. __init__(self: drjit.llvm.ad.TensorXu64, arg0: drjit.llvm.TensorXu64) -> None: ...
    array = ...
    index = ...
    index_ad = ...
    label = ...
    ndim = ...
    shape = ...

    def assign(self: drjit.llvm.ad.TensorXu64, arg0: drjit.llvm.ad.TensorXu64) -> None: ...
    ...

class Texture1f:
    @overload
    def __init__(self: drjit.llvm.ad.Texture1f, shape: List[int[1]], channels: int, use_accel: bool = True, filter_mode: drjit.FilterMode = <FilterMode.Linear: 1>, wrap_mode: drjit.WrapMode = <WrapMode.Clamp: 1>) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Texture1f, tensor: drjit.llvm.ad.TensorXf, use_accel: bool = True, migrate: bool = True, filter_mode: drjit.FilterMode = <FilterMode.Linear: 1>, wrap_mode: drjit.WrapMode = <WrapMode.Clamp: 1>) -> None: ...
    shape = ...

    def eval(self: drjit.llvm.ad.Texture1f, pos: drjit.llvm.ad.Array1f, active: drjit.llvm.ad.Bool = True) -> List[drjit.llvm.ad.Float]: ...
    def eval_cubic(self: drjit.llvm.ad.Texture1f, pos: drjit.llvm.ad.Array1f, active: drjit.llvm.ad.Bool = True, force_drjit: bool = False) -> List[drjit.llvm.ad.Float]: ...
    def eval_cubic_grad(self: drjit.llvm.ad.Texture1f, pos: drjit.llvm.ad.Array1f, active: drjit.llvm.ad.Bool = True) -> Tuple[List[drjit.llvm.ad.Float], List[drjit.llvm.ad.Array1f]]: ...
    def eval_cubic_hessian(self: drjit.llvm.ad.Texture1f, pos: drjit.llvm.ad.Array1f, active: drjit.llvm.ad.Bool = True): ...
    def eval_cuda(self: drjit.llvm.ad.Texture1f, pos: drjit.llvm.ad.Array1f, active: drjit.llvm.ad.Bool = True) -> List[drjit.llvm.ad.Float]: ...
    def eval_fetch(self: drjit.llvm.ad.Texture1f, pos: drjit.llvm.ad.Array1f, active: drjit.llvm.ad.Bool = True) -> List[List[drjit.llvm.ad.Float][2]]: ...
    def eval_fetch_cuda(self: drjit.llvm.ad.Texture1f, pos: drjit.llvm.ad.Array1f, active: drjit.llvm.ad.Bool = True) -> List[List[drjit.llvm.ad.Float][2]]: ...
    def eval_fetch_drjit(self: drjit.llvm.ad.Texture1f, pos: drjit.llvm.ad.Array1f, active: drjit.llvm.ad.Bool = True) -> List[List[drjit.llvm.ad.Float][2]]: ...
    def eval_nonaccel(self: drjit.llvm.ad.Texture1f, pos: drjit.llvm.ad.Array1f, active: drjit.llvm.ad.Bool = True) -> List[drjit.llvm.ad.Float]: ...
    def filter_mode(self: drjit.llvm.ad.Texture1f) -> drjit.FilterMode: ...
    def migrated(self: drjit.llvm.ad.Texture1f) -> bool: ...
    def set_tensor(self: drjit.llvm.ad.Texture1f, tensor: drjit.llvm.ad.TensorXf, migrate: bool = False) -> None: ...
    def set_value(self: drjit.llvm.ad.Texture1f, value: drjit.llvm.ad.Float, migrate: bool = False) -> None: ...
    def tensor(self: drjit.llvm.ad.Texture1f) -> drjit.llvm.ad.TensorXf: ...
    def use_accel(self: drjit.llvm.ad.Texture1f) -> bool: ...
    def value(self: drjit.llvm.ad.Texture1f) -> drjit.llvm.ad.Float: ...
    def wrap_mode(self: drjit.llvm.ad.Texture1f) -> drjit.WrapMode: ...
    ...

class Texture1f64:
    @overload
    def __init__(self: drjit.llvm.ad.Texture1f64, shape: List[int[1]], channels: int, use_accel: bool = True, filter_mode: drjit.FilterMode = <FilterMode.Linear: 1>, wrap_mode: drjit.WrapMode = <WrapMode.Clamp: 1>) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Texture1f64, tensor: drjit.llvm.ad.TensorXf64, use_accel: bool = True, migrate: bool = True, filter_mode: drjit.FilterMode = <FilterMode.Linear: 1>, wrap_mode: drjit.WrapMode = <WrapMode.Clamp: 1>) -> None: ...
    shape = ...

    def eval(self: drjit.llvm.ad.Texture1f64, pos: drjit.llvm.ad.Array1f64, active: drjit.llvm.ad.Bool = True) -> List[drjit.llvm.ad.Float64]: ...
    def eval_cubic(self: drjit.llvm.ad.Texture1f64, pos: drjit.llvm.ad.Array1f64, active: drjit.llvm.ad.Bool = True, force_drjit: bool = False) -> List[drjit.llvm.ad.Float64]: ...
    def eval_cubic_grad(self: drjit.llvm.ad.Texture1f64, pos: drjit.llvm.ad.Array1f64, active: drjit.llvm.ad.Bool = True) -> Tuple[List[drjit.llvm.ad.Float64], List[drjit.llvm.ad.Array1f64]]: ...
    def eval_cubic_hessian(self: drjit.llvm.ad.Texture1f64, pos: drjit.llvm.ad.Array1f64, active: drjit.llvm.ad.Bool = True): ...
    def eval_cuda(self: drjit.llvm.ad.Texture1f64, pos: drjit.llvm.ad.Array1f64, active: drjit.llvm.ad.Bool = True) -> List[drjit.llvm.ad.Float64]: ...
    def eval_fetch(self: drjit.llvm.ad.Texture1f64, pos: drjit.llvm.ad.Array1f64, active: drjit.llvm.ad.Bool = True) -> List[List[drjit.llvm.ad.Float64][2]]: ...
    def eval_fetch_cuda(self: drjit.llvm.ad.Texture1f64, pos: drjit.llvm.ad.Array1f64, active: drjit.llvm.ad.Bool = True) -> List[List[drjit.llvm.ad.Float64][2]]: ...
    def eval_fetch_drjit(self: drjit.llvm.ad.Texture1f64, pos: drjit.llvm.ad.Array1f64, active: drjit.llvm.ad.Bool = True) -> List[List[drjit.llvm.ad.Float64][2]]: ...
    def eval_nonaccel(self: drjit.llvm.ad.Texture1f64, pos: drjit.llvm.ad.Array1f64, active: drjit.llvm.ad.Bool = True) -> List[drjit.llvm.ad.Float64]: ...
    def filter_mode(self: drjit.llvm.ad.Texture1f64) -> drjit.FilterMode: ...
    def migrated(self: drjit.llvm.ad.Texture1f64) -> bool: ...
    def set_tensor(self: drjit.llvm.ad.Texture1f64, tensor: drjit.llvm.ad.TensorXf64, migrate: bool = False) -> None: ...
    def set_value(self: drjit.llvm.ad.Texture1f64, value: drjit.llvm.ad.Float64, migrate: bool = False) -> None: ...
    def tensor(self: drjit.llvm.ad.Texture1f64) -> drjit.llvm.ad.TensorXf64: ...
    def use_accel(self: drjit.llvm.ad.Texture1f64) -> bool: ...
    def value(self: drjit.llvm.ad.Texture1f64) -> drjit.llvm.ad.Float64: ...
    def wrap_mode(self: drjit.llvm.ad.Texture1f64) -> drjit.WrapMode: ...
    ...

class Texture2f:
    @overload
    def __init__(self: drjit.llvm.ad.Texture2f, shape: List[int[2]], channels: int, use_accel: bool = True, filter_mode: drjit.FilterMode = <FilterMode.Linear: 1>, wrap_mode: drjit.WrapMode = <WrapMode.Clamp: 1>) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Texture2f, tensor: drjit.llvm.ad.TensorXf, use_accel: bool = True, migrate: bool = True, filter_mode: drjit.FilterMode = <FilterMode.Linear: 1>, wrap_mode: drjit.WrapMode = <WrapMode.Clamp: 1>) -> None: ...
    shape = ...

    def eval(self: drjit.llvm.ad.Texture2f, pos: drjit.llvm.ad.Array2f, active: drjit.llvm.ad.Bool = True) -> List[drjit.llvm.ad.Float]: ...
    def eval_cubic(self: drjit.llvm.ad.Texture2f, pos: drjit.llvm.ad.Array2f, active: drjit.llvm.ad.Bool = True, force_drjit: bool = False) -> List[drjit.llvm.ad.Float]: ...
    def eval_cubic_grad(self: drjit.llvm.ad.Texture2f, pos: drjit.llvm.ad.Array2f, active: drjit.llvm.ad.Bool = True) -> Tuple[List[drjit.llvm.ad.Float], List[drjit.llvm.ad.Array2f]]: ...
    def eval_cubic_hessian(self: drjit.llvm.ad.Texture2f, pos: drjit.llvm.ad.Array2f, active: drjit.llvm.ad.Bool = True) -> Tuple[List[drjit.llvm.ad.Float], List[drjit.llvm.ad.Array2f], List[drjit.llvm.ad.Matrix2f]]: ...
    def eval_cuda(self: drjit.llvm.ad.Texture2f, pos: drjit.llvm.ad.Array2f, active: drjit.llvm.ad.Bool = True) -> List[drjit.llvm.ad.Float]: ...
    def eval_fetch(self: drjit.llvm.ad.Texture2f, pos: drjit.llvm.ad.Array2f, active: drjit.llvm.ad.Bool = True) -> List[List[drjit.llvm.ad.Float][4]]: ...
    def eval_fetch_cuda(self: drjit.llvm.ad.Texture2f, pos: drjit.llvm.ad.Array2f, active: drjit.llvm.ad.Bool = True) -> List[List[drjit.llvm.ad.Float][4]]: ...
    def eval_fetch_drjit(self: drjit.llvm.ad.Texture2f, pos: drjit.llvm.ad.Array2f, active: drjit.llvm.ad.Bool = True) -> List[List[drjit.llvm.ad.Float][4]]: ...
    def eval_nonaccel(self: drjit.llvm.ad.Texture2f, pos: drjit.llvm.ad.Array2f, active: drjit.llvm.ad.Bool = True) -> List[drjit.llvm.ad.Float]: ...
    def filter_mode(self: drjit.llvm.ad.Texture2f) -> drjit.FilterMode: ...
    def migrated(self: drjit.llvm.ad.Texture2f) -> bool: ...
    def set_tensor(self: drjit.llvm.ad.Texture2f, tensor: drjit.llvm.ad.TensorXf, migrate: bool = False) -> None: ...
    def set_value(self: drjit.llvm.ad.Texture2f, value: drjit.llvm.ad.Float, migrate: bool = False) -> None: ...
    def tensor(self: drjit.llvm.ad.Texture2f) -> drjit.llvm.ad.TensorXf: ...
    def use_accel(self: drjit.llvm.ad.Texture2f) -> bool: ...
    def value(self: drjit.llvm.ad.Texture2f) -> drjit.llvm.ad.Float: ...
    def wrap_mode(self: drjit.llvm.ad.Texture2f) -> drjit.WrapMode: ...
    ...

class Texture2f64:
    @overload
    def __init__(self: drjit.llvm.ad.Texture2f64, shape: List[int[2]], channels: int, use_accel: bool = True, filter_mode: drjit.FilterMode = <FilterMode.Linear: 1>, wrap_mode: drjit.WrapMode = <WrapMode.Clamp: 1>) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Texture2f64, tensor: drjit.llvm.ad.TensorXf64, use_accel: bool = True, migrate: bool = True, filter_mode: drjit.FilterMode = <FilterMode.Linear: 1>, wrap_mode: drjit.WrapMode = <WrapMode.Clamp: 1>) -> None: ...
    shape = ...

    def eval(self: drjit.llvm.ad.Texture2f64, pos: drjit.llvm.ad.Array2f64, active: drjit.llvm.ad.Bool = True) -> List[drjit.llvm.ad.Float64]: ...
    def eval_cubic(self: drjit.llvm.ad.Texture2f64, pos: drjit.llvm.ad.Array2f64, active: drjit.llvm.ad.Bool = True, force_drjit: bool = False) -> List[drjit.llvm.ad.Float64]: ...
    def eval_cubic_grad(self: drjit.llvm.ad.Texture2f64, pos: drjit.llvm.ad.Array2f64, active: drjit.llvm.ad.Bool = True) -> Tuple[List[drjit.llvm.ad.Float64], List[drjit.llvm.ad.Array2f64]]: ...
    def eval_cubic_hessian(self: drjit.llvm.ad.Texture2f64, pos: drjit.llvm.ad.Array2f64, active: drjit.llvm.ad.Bool = True) -> Tuple[List[drjit.llvm.ad.Float64], List[drjit.llvm.ad.Array2f64], List[drjit.llvm.ad.Matrix2f64]]: ...
    def eval_cuda(self: drjit.llvm.ad.Texture2f64, pos: drjit.llvm.ad.Array2f64, active: drjit.llvm.ad.Bool = True) -> List[drjit.llvm.ad.Float64]: ...
    def eval_fetch(self: drjit.llvm.ad.Texture2f64, pos: drjit.llvm.ad.Array2f64, active: drjit.llvm.ad.Bool = True) -> List[List[drjit.llvm.ad.Float64][4]]: ...
    def eval_fetch_cuda(self: drjit.llvm.ad.Texture2f64, pos: drjit.llvm.ad.Array2f64, active: drjit.llvm.ad.Bool = True) -> List[List[drjit.llvm.ad.Float64][4]]: ...
    def eval_fetch_drjit(self: drjit.llvm.ad.Texture2f64, pos: drjit.llvm.ad.Array2f64, active: drjit.llvm.ad.Bool = True) -> List[List[drjit.llvm.ad.Float64][4]]: ...
    def eval_nonaccel(self: drjit.llvm.ad.Texture2f64, pos: drjit.llvm.ad.Array2f64, active: drjit.llvm.ad.Bool = True) -> List[drjit.llvm.ad.Float64]: ...
    def filter_mode(self: drjit.llvm.ad.Texture2f64) -> drjit.FilterMode: ...
    def migrated(self: drjit.llvm.ad.Texture2f64) -> bool: ...
    def set_tensor(self: drjit.llvm.ad.Texture2f64, tensor: drjit.llvm.ad.TensorXf64, migrate: bool = False) -> None: ...
    def set_value(self: drjit.llvm.ad.Texture2f64, value: drjit.llvm.ad.Float64, migrate: bool = False) -> None: ...
    def tensor(self: drjit.llvm.ad.Texture2f64) -> drjit.llvm.ad.TensorXf64: ...
    def use_accel(self: drjit.llvm.ad.Texture2f64) -> bool: ...
    def value(self: drjit.llvm.ad.Texture2f64) -> drjit.llvm.ad.Float64: ...
    def wrap_mode(self: drjit.llvm.ad.Texture2f64) -> drjit.WrapMode: ...
    ...

class Texture3f:
    @overload
    def __init__(self: drjit.llvm.ad.Texture3f, shape: List[int[3]], channels: int, use_accel: bool = True, filter_mode: drjit.FilterMode = <FilterMode.Linear: 1>, wrap_mode: drjit.WrapMode = <WrapMode.Clamp: 1>) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Texture3f, tensor: drjit.llvm.ad.TensorXf, use_accel: bool = True, migrate: bool = True, filter_mode: drjit.FilterMode = <FilterMode.Linear: 1>, wrap_mode: drjit.WrapMode = <WrapMode.Clamp: 1>) -> None: ...
    shape = ...

    def eval(self: drjit.llvm.ad.Texture3f, pos: drjit.llvm.ad.Array3f, active: drjit.llvm.ad.Bool = True) -> List[drjit.llvm.ad.Float]: ...
    def eval_cubic(self: drjit.llvm.ad.Texture3f, pos: drjit.llvm.ad.Array3f, active: drjit.llvm.ad.Bool = True, force_drjit: bool = False) -> List[drjit.llvm.ad.Float]: ...
    def eval_cubic_grad(self: drjit.llvm.ad.Texture3f, pos: drjit.llvm.ad.Array3f, active: drjit.llvm.ad.Bool = True) -> Tuple[List[drjit.llvm.ad.Float], List[drjit.llvm.ad.Array3f]]: ...
    def eval_cubic_hessian(self: drjit.llvm.ad.Texture3f, pos: drjit.llvm.ad.Array3f, active: drjit.llvm.ad.Bool = True) -> Tuple[List[drjit.llvm.ad.Float], List[drjit.llvm.ad.Array3f], List[drjit.llvm.ad.Matrix3f]]: ...
    def eval_cuda(self: drjit.llvm.ad.Texture3f, pos: drjit.llvm.ad.Array3f, active: drjit.llvm.ad.Bool = True) -> List[drjit.llvm.ad.Float]: ...
    def eval_fetch(self: drjit.llvm.ad.Texture3f, pos: drjit.llvm.ad.Array3f, active: drjit.llvm.ad.Bool = True) -> List[List[drjit.llvm.ad.Float][8]]: ...
    def eval_fetch_cuda(self: drjit.llvm.ad.Texture3f, pos: drjit.llvm.ad.Array3f, active: drjit.llvm.ad.Bool = True) -> List[List[drjit.llvm.ad.Float][8]]: ...
    def eval_fetch_drjit(self: drjit.llvm.ad.Texture3f, pos: drjit.llvm.ad.Array3f, active: drjit.llvm.ad.Bool = True) -> List[List[drjit.llvm.ad.Float][8]]: ...
    def eval_nonaccel(self: drjit.llvm.ad.Texture3f, pos: drjit.llvm.ad.Array3f, active: drjit.llvm.ad.Bool = True) -> List[drjit.llvm.ad.Float]: ...
    def filter_mode(self: drjit.llvm.ad.Texture3f) -> drjit.FilterMode: ...
    def migrated(self: drjit.llvm.ad.Texture3f) -> bool: ...
    def set_tensor(self: drjit.llvm.ad.Texture3f, tensor: drjit.llvm.ad.TensorXf, migrate: bool = False) -> None: ...
    def set_value(self: drjit.llvm.ad.Texture3f, value: drjit.llvm.ad.Float, migrate: bool = False) -> None: ...
    def tensor(self: drjit.llvm.ad.Texture3f) -> drjit.llvm.ad.TensorXf: ...
    def use_accel(self: drjit.llvm.ad.Texture3f) -> bool: ...
    def value(self: drjit.llvm.ad.Texture3f) -> drjit.llvm.ad.Float: ...
    def wrap_mode(self: drjit.llvm.ad.Texture3f) -> drjit.WrapMode: ...
    ...

class Texture3f64:
    @overload
    def __init__(self: drjit.llvm.ad.Texture3f64, shape: List[int[3]], channels: int, use_accel: bool = True, filter_mode: drjit.FilterMode = <FilterMode.Linear: 1>, wrap_mode: drjit.WrapMode = <WrapMode.Clamp: 1>) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.Texture3f64, tensor: drjit.llvm.ad.TensorXf64, use_accel: bool = True, migrate: bool = True, filter_mode: drjit.FilterMode = <FilterMode.Linear: 1>, wrap_mode: drjit.WrapMode = <WrapMode.Clamp: 1>) -> None: ...
    shape = ...

    def eval(self: drjit.llvm.ad.Texture3f64, pos: drjit.llvm.ad.Array3f64, active: drjit.llvm.ad.Bool = True) -> List[drjit.llvm.ad.Float64]: ...
    def eval_cubic(self: drjit.llvm.ad.Texture3f64, pos: drjit.llvm.ad.Array3f64, active: drjit.llvm.ad.Bool = True, force_drjit: bool = False) -> List[drjit.llvm.ad.Float64]: ...
    def eval_cubic_grad(self: drjit.llvm.ad.Texture3f64, pos: drjit.llvm.ad.Array3f64, active: drjit.llvm.ad.Bool = True) -> Tuple[List[drjit.llvm.ad.Float64], List[drjit.llvm.ad.Array3f64]]: ...
    def eval_cubic_hessian(self: drjit.llvm.ad.Texture3f64, pos: drjit.llvm.ad.Array3f64, active: drjit.llvm.ad.Bool = True) -> Tuple[List[drjit.llvm.ad.Float64], List[drjit.llvm.ad.Array3f64], List[drjit.llvm.ad.Matrix3f64]]: ...
    def eval_cuda(self: drjit.llvm.ad.Texture3f64, pos: drjit.llvm.ad.Array3f64, active: drjit.llvm.ad.Bool = True) -> List[drjit.llvm.ad.Float64]: ...
    def eval_fetch(self: drjit.llvm.ad.Texture3f64, pos: drjit.llvm.ad.Array3f64, active: drjit.llvm.ad.Bool = True) -> List[List[drjit.llvm.ad.Float64][8]]: ...
    def eval_fetch_cuda(self: drjit.llvm.ad.Texture3f64, pos: drjit.llvm.ad.Array3f64, active: drjit.llvm.ad.Bool = True) -> List[List[drjit.llvm.ad.Float64][8]]: ...
    def eval_fetch_drjit(self: drjit.llvm.ad.Texture3f64, pos: drjit.llvm.ad.Array3f64, active: drjit.llvm.ad.Bool = True) -> List[List[drjit.llvm.ad.Float64][8]]: ...
    def eval_nonaccel(self: drjit.llvm.ad.Texture3f64, pos: drjit.llvm.ad.Array3f64, active: drjit.llvm.ad.Bool = True) -> List[drjit.llvm.ad.Float64]: ...
    def filter_mode(self: drjit.llvm.ad.Texture3f64) -> drjit.FilterMode: ...
    def migrated(self: drjit.llvm.ad.Texture3f64) -> bool: ...
    def set_tensor(self: drjit.llvm.ad.Texture3f64, tensor: drjit.llvm.ad.TensorXf64, migrate: bool = False) -> None: ...
    def set_value(self: drjit.llvm.ad.Texture3f64, value: drjit.llvm.ad.Float64, migrate: bool = False) -> None: ...
    def tensor(self: drjit.llvm.ad.Texture3f64) -> drjit.llvm.ad.TensorXf64: ...
    def use_accel(self: drjit.llvm.ad.Texture3f64) -> bool: ...
    def value(self: drjit.llvm.ad.Texture3f64) -> drjit.llvm.ad.Float64: ...
    def wrap_mode(self: drjit.llvm.ad.Texture3f64) -> drjit.WrapMode: ...
    ...

class UInt(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.llvm.ad.UInt, arg0: int) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.UInt, arg0: int) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.UInt, arg0: drjit.llvm.ad.Int) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.UInt, arg0: drjit.llvm.ad.UInt) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.UInt, arg0: drjit.llvm.ad.Int64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.UInt, arg0: drjit.llvm.ad.UInt64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.UInt, arg0: drjit.llvm.ad.Float) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.UInt, arg0: drjit.llvm.ad.Float64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.UInt, arg0: drjit.llvm.UInt) -> None: ...
    def 10. __init__(self: drjit.llvm.ad.UInt, *args) -> None: ...
    index = ...
    index_ad = ...
    label = ...

    def assign(self: drjit.llvm.ad.UInt, arg0: drjit.llvm.ad.UInt) -> None: ...
    ...

class UInt(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.llvm.ad.UInt, arg0: int) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.UInt, arg0: int) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.UInt, arg0: drjit.llvm.ad.Int) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.UInt, arg0: drjit.llvm.ad.UInt) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.UInt, arg0: drjit.llvm.ad.Int64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.UInt, arg0: drjit.llvm.ad.UInt64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.UInt, arg0: drjit.llvm.ad.Float) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.UInt, arg0: drjit.llvm.ad.Float64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.UInt, arg0: drjit.llvm.UInt) -> None: ...
    def 10. __init__(self: drjit.llvm.ad.UInt, *args) -> None: ...
    index = ...
    index_ad = ...
    label = ...

    def assign(self: drjit.llvm.ad.UInt, arg0: drjit.llvm.ad.UInt) -> None: ...
    ...

class UInt64(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.llvm.ad.UInt64, arg0: int) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.UInt64, arg0: int) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.UInt64, arg0: drjit.llvm.ad.Int) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.UInt64, arg0: drjit.llvm.ad.UInt) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.UInt64, arg0: drjit.llvm.ad.Int64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.UInt64, arg0: drjit.llvm.ad.UInt64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.UInt64, arg0: drjit.llvm.ad.Float) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.UInt64, arg0: drjit.llvm.ad.Float64) -> None: ...
    @overload
    def __init__(self: drjit.llvm.ad.UInt64, arg0: drjit.llvm.UInt64) -> None: ...
    def 10. __init__(self: drjit.llvm.ad.UInt64, *args) -> None: ...
    index = ...
    index_ad = ...
    label = ...

    def assign(self: drjit.llvm.ad.UInt64, arg0: drjit.llvm.ad.UInt64) -> None: ...
    ...


from . import llvm_ad_detail as detail

