{%- if variable.is_inline_expression and not utils.contains_convolve_call(variable) %}
inline {{declarations.print_variable_type(variable)}} {{names.getter(variable)}}() const
{
  return {{printer.print_expression(variable.get_declaring_expression())}};
}
{% else -%}
inline {{declarations.print_variable_type(variable)}} {{names.getter(variable)}}() const
{
  return {{printer.print_origin(variable)}}{{names.name(variable)}};
}

inline void {{names.setter(variable)}}(const {{declarations.print_variable_type(variable)}} __v)
{
  {{printer.print_origin(variable)}}{{names.name(variable)}} = __v;
}

{% endif -%}
