Metadata-Version: 2.1
Name: namedlocks
Version: 0.0.1a3
Summary: Named Locks to acquire lock by name
Project-URL: Homepage, https://github.com/andrew000/NamedLocks
Project-URL: Bug Tracker, https://github.com/andrew000/named_lock/issues
Author: Andrew King
License: MIT License
        
        Copyright (c) 2022 Andrew King, @andrew000, @AndrewKingEG
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
License-File: LICENSE
Classifier: Development Status :: 3 - Alpha
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9
Description-Content-Type: text/markdown

# NamedLocks

***
NamedLocks is a simple library for locking on a name.

## Installation

```pip install namedlocks```

## Usage

```python
import asyncio
from random import randint, uniform

from named_locks import AsyncNamedLock

NAMED_LOCKS = AsyncNamedLock()  # Create a global instance of the lock


async def task(uid: int):
    async with NAMED_LOCKS.lock(uid):  # Lock on some name
        print(f"Task {uid} started")
        # do something
        await asyncio.sleep(uniform(1, 5))
        print(f"Task {uid} finished")


async def main():
    tasks = [asyncio.create_task(task(uid)) for uid in [randint(1, 10) for _ in range(50)]]
    await asyncio.gather(*tasks)


asyncio.run(main())
```
