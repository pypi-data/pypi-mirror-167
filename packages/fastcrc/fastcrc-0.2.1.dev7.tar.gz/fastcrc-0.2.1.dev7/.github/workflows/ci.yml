name: Build

on: [ push, pull_request ]

env:
  PACKAGE_NAME: fastcrc
  PYTHON_VERSION: "3.6" # to build abi3 wheels

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ "3.6", "3.7", "3.8", "3.9", "3.10" ]

    steps:
      - uses: actions/checkout@v2

      - name: Setup Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check

      - name: Install setuptools and setuptools-rust
        run: |
          python -m pip install --upgrade wheel setuptools setuptools-rust

      - name: Install fastcrc
        run: |
          python setup.py install

      - name: Run tests
        run: |
          cd tests
          python test_fastcrc.py

  build_package:
    # Adapted from https://github.com/pydantic/pydantic-core/blob/main/.github/workflows/ci.yml
    name: build on ${{ matrix.platform || matrix.os }} (${{ matrix.target }} - ${{ matrix.manylinux || 'auto' }})
    needs: [ test ]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        target: [x86_64, aarch64]
        manylinux: [auto]
        include:
          - os: ubuntu
            platform: linux
          - os: windows
            ls: dir
          - os: windows
            ls: dir
            target: i686
            python-architecture: x86
          - os: macos
            target: aarch64
          - os: ubuntu
            platform: linux
            target: i686
          - os: ubuntu
            platform: linux
            target: aarch64
            container: messense/manylinux_2_24-cross:aarch64
          - os: ubuntu
            platform: linux
            target: armv7
            container: messense/manylinux_2_24-cross:armv7
          # musllinux
          - os: ubuntu
            platform: linux
            target: x86_64
            manylinux: musllinux_1_1
          - os: ubuntu
            platform: linux
            target: aarch64
            manylinux: musllinux_1_1
        exclude:
          # Windows on arm64 only supports Python 3.11+
          - os: windows
            target: aarch64

    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: ${{ matrix.python-architecture || 'x64' }}

      - name: build sdist
        if: ${{ matrix.os == 'ubuntu' && matrix.target == 'x86_64' && matrix.manylinux == 'auto' }}
        uses: messense/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          rust-toolchain: stable

      - name: build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux || 'auto' }}
          container: ${{ matrix.container }}
          args: --release --out dist
          rust-toolchain: stable

      - run: ${{ matrix.ls || 'ls -lh' }} dist/

      - run: pip install -U twine

      - run: twine check dist/*

      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  list-pypi-files:
    needs: [ build_package ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: get dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist

      - run: ls -lh dist/
      - run: echo "`ls dist | wc -l` files"

  upload_pypi:
    needs: [ build_package ]
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
      - name: Publish to PyPI
        uses: messense/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        with:
          command: upload
          args: --skip-existing *