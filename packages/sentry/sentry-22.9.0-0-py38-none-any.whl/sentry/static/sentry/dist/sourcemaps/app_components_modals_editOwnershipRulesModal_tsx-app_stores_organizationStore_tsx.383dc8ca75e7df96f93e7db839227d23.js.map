{"version":3,"file":"chunks/app_components_modals_editOwnershipRulesModal_tsx-app_stores_organizationStore_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"oOAEA,MAEA,GAF4BA,E,yCAAAA,eAAc,CAAC,QAAS,gBAAiB,U,wkBCSrE,MAAMC,UAAgCC,EAAAA,UACpCC,SACE,MAAM,UAACC,GAAaC,KAAKC,MACzB,OACE,QAAC,EAAAC,SAAD,YACE,QAACC,EAAD,YACGC,EAAAA,EAAAA,GAAE,8BADL,KACoC,uDAEpC,QAACD,EAAD,WACGC,EAAAA,EAAAA,GAAE,qEAEL,QAACD,EAAD,YACGC,EAAAA,EAAAA,GAAE,qBACH,QAACC,EAAD,UAAY,6DAEd,QAACF,EAAD,YACGC,EAAAA,EAAAA,GAAE,aACH,QAACC,EAAD,iEAEG,KAFH,uCAIG,KAJH,6CAMG,KANH,8CAUDN,IAAa,QAAC,IAAD,IAAgBC,KAAKC,MAAOK,YAAaP,EAAUQ,KAAO,OAG7E,EA9BGX,EAAAA,YAAAA,0BAiCN,MAAMO,GAAQ,OAAOK,EAAAA,EAAP,sBAAH,8CAILH,GAAY,OAAO,MAAP,sBAAH,oEAKf,ICxCMT,EAA0B,IAA6C,IAA5C,KAACa,EAAD,OAAOC,EAAP,OAAeC,KAAWV,GAAkB,EAC3E,OACE,QAAC,EAAAC,SAAD,YACE,QAACQ,EAAD,CAAQE,aAAW,EAAnB,UAAqBR,EAAAA,EAAAA,GAAE,2BACvB,QAACK,EAAD,WACE,QAAC,EAAD,IAAoBR,EAAOU,OAAQA,QAJzC,EADIf,EAAAA,YAAAA,0BAWC,MAAMiB,GAAWC,EAAAA,EAAAA,IAAH,sBACEC,EAAAA,GAAAA,YAAAA,MADF,wDASrB,G,mSCHA,MAAMC,EAA2C,CAC/CC,qBAAsB,GAEtBC,OACElB,KAAKmB,QACLnB,KAAKiB,qBAAqBG,KACxBpB,KAAKqB,SAASC,EAAAA,EAAAA,OAA4BtB,KAAKuB,WAEjDvB,KAAKiB,qBAAqBG,KAAKpB,KAAKqB,SAASC,EAAAA,EAAAA,MAA2BtB,KAAKmB,QAC7EnB,KAAKiB,qBAAqBG,KACxBpB,KAAKqB,SAASC,EAAAA,EAAAA,cAAmCtB,KAAKwB,iBAEzD,EAEDL,QACEnB,KAAKyB,SAAU,EACfzB,KAAK0B,MAAQ,KACb1B,KAAK2B,UAAY,KACjB3B,KAAK4B,aAAe,KACpB5B,KAAK6B,OAAQ,EACb7B,KAAK8B,QAAQ9B,KAAK+B,MACnB,EAEDR,SAASS,GAAoC,IAAxB,QAACC,GAAU,GAAa,uDAAJ,CAAC,EACxCjC,KAAKyB,SAAU,EACfzB,KAAK0B,MAAQ,KACb1B,KAAK2B,UAAY,KACjB3B,KAAK4B,aAAeK,EAAUD,EAAa,IAAIhC,KAAK4B,gBAAiBI,GACrEhC,KAAK6B,OAAQ,EACb7B,KAAK8B,QAAQ9B,KAAK+B,MACnB,EAEDP,gBAAgBU,GAId,OAHAlC,KAAK4B,aAAe,KACpB5B,KAAK2B,UAAY,KAETO,aAAR,EAAQA,EAAKC,QACX,KAAK,IACHnC,KAAK2B,UAAYS,EAAAA,GAAAA,cACjB,MACF,KAAK,IACHpC,KAAK2B,UAAYS,EAAAA,GAAAA,cAIrBpC,KAAKyB,SAAU,EACfzB,KAAK0B,MAAQQ,EACblC,KAAK6B,OAAQ,EACb7B,KAAK8B,QAAQ9B,KAAK+B,MACnB,EAEDA,MACE,MAAO,CACLH,aAAc5B,KAAK4B,aACnBF,MAAO1B,KAAK0B,MACZD,QAASzB,KAAKyB,QACdE,UAAW3B,KAAK2B,UAChBE,MAAO7B,KAAK6B,MAEf,EAEDQ,WACE,OAAOrC,KAAK+B,KACb,GAKH,GAF0BO,EAAAA,EAAAA,cAAYC,EAAAA,EAAAA,GAAoBvB,G","sources":["webpack:///./app/actions/organizationActions.tsx","webpack:///./app/views/settings/project/projectOwnership/editRulesModal.tsx","webpack:///./app/components/modals/editOwnershipRulesModal.tsx","webpack:///./app/stores/organizationStore.tsx"],"sourcesContent":["import {createActions} from 'reflux';\n\nconst OrganizationActions = createActions(['reset', 'fetchOrgError', 'update']);\n\nexport default OrganizationActions;\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {EditOwnershipRulesModalOptions} from 'sentry/actionCreators/modal';\nimport {t} from 'sentry/locale';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport OwnerInput from 'sentry/views/settings/project/projectOwnership/ownerInput';\n\ntype Props = EditOwnershipRulesModalOptions;\ntype State = {};\n\nclass EditOwnershipRulesModal extends Component<Props, State> {\n  render() {\n    const {ownership} = this.props;\n    return (\n      <Fragment>\n        <Block>\n          {t('Rules follow the pattern: ')} <code>type:glob owner owner</code>\n        </Block>\n        <Block>\n          {t('Owners can be team identifiers starting with #, or user emails')}\n        </Block>\n        <Block>\n          {t('Globbing Syntax:')}\n          <CodeBlock>{'* matches everything\\n? matches any single character'}</CodeBlock>\n        </Block>\n        <Block>\n          {t('Examples')}\n          <CodeBlock>\n            path:src/example/pipeline/* person@sentry.io #infra\n            {'\\n'}\n            module:com.module.name.example #sdks\n            {'\\n'}\n            url:http://example.com/settings/* #product\n            {'\\n'}\n            tags.sku_class:enterprise #enterprise\n          </CodeBlock>\n        </Block>\n        {ownership && <OwnerInput {...this.props} initialText={ownership.raw || ''} />}\n      </Fragment>\n    );\n  }\n}\n\nconst Block = styled(TextBlock)`\n  margin-bottom: 16px;\n`;\n\nconst CodeBlock = styled('pre')`\n  word-break: break-all;\n  white-space: pre-wrap;\n`;\n\nexport default EditOwnershipRulesModal;\n","import {Fragment} from 'react';\nimport {css} from '@emotion/react';\n\nimport {\n  EditOwnershipRulesModalOptions,\n  ModalRenderProps,\n} from 'sentry/actionCreators/modal';\nimport {t} from 'sentry/locale';\nimport theme from 'sentry/utils/theme';\nimport OwnershipModal from 'sentry/views/settings/project/projectOwnership/editRulesModal';\n\ntype Props = ModalRenderProps & EditOwnershipRulesModalOptions;\n\nconst EditOwnershipRulesModal = ({Body, Header, onSave, ...props}: Props) => {\n  return (\n    <Fragment>\n      <Header closeButton>{t('Edit Ownership Rules')}</Header>\n      <Body>\n        <OwnershipModal {...props} onSave={onSave} />\n      </Body>\n    </Fragment>\n  );\n};\n\nexport const modalCss = css`\n  @media (min-width: ${theme.breakpoints.small}) {\n    width: 80%;\n  }\n  [role='document'] {\n    overflow: initial;\n  }\n`;\n\nexport default EditOwnershipRulesModal;\n","import {createStore} from 'reflux';\n\nimport OrganizationActions from 'sentry/actions/organizationActions';\nimport {ORGANIZATION_FETCH_ERROR_TYPES} from 'sentry/constants';\nimport {Organization} from 'sentry/types';\nimport {makeSafeRefluxStore} from 'sentry/utils/makeSafeRefluxStore';\nimport RequestError from 'sentry/utils/requestError/requestError';\n\nimport {CommonStoreDefinition} from './types';\n\ntype UpdateOptions = {\n  replace?: boolean;\n};\n\ntype State = {\n  dirty: boolean;\n  loading: boolean;\n  organization: Organization | null;\n  error?: RequestError | null;\n  errorType?: string | null;\n};\n\ninterface OrganizationStoreDefinition extends CommonStoreDefinition<State> {\n  get(): State;\n  init(): void;\n  onFetchOrgError(err: RequestError): void;\n  onUpdate(org: Organization, options?: UpdateOptions): void;\n  reset(): void;\n}\n\nconst storeConfig: OrganizationStoreDefinition = {\n  unsubscribeListeners: [],\n\n  init() {\n    this.reset();\n    this.unsubscribeListeners.push(\n      this.listenTo(OrganizationActions.update, this.onUpdate)\n    );\n    this.unsubscribeListeners.push(this.listenTo(OrganizationActions.reset, this.reset));\n    this.unsubscribeListeners.push(\n      this.listenTo(OrganizationActions.fetchOrgError, this.onFetchOrgError)\n    );\n  },\n\n  reset() {\n    this.loading = true;\n    this.error = null;\n    this.errorType = null;\n    this.organization = null;\n    this.dirty = false;\n    this.trigger(this.get());\n  },\n\n  onUpdate(updatedOrg, {replace = false} = {}) {\n    this.loading = false;\n    this.error = null;\n    this.errorType = null;\n    this.organization = replace ? updatedOrg : {...this.organization, ...updatedOrg};\n    this.dirty = false;\n    this.trigger(this.get());\n  },\n\n  onFetchOrgError(err) {\n    this.organization = null;\n    this.errorType = null;\n\n    switch (err?.status) {\n      case 401:\n        this.errorType = ORGANIZATION_FETCH_ERROR_TYPES.ORG_NO_ACCESS;\n        break;\n      case 404:\n        this.errorType = ORGANIZATION_FETCH_ERROR_TYPES.ORG_NOT_FOUND;\n        break;\n      default:\n    }\n    this.loading = false;\n    this.error = err;\n    this.dirty = false;\n    this.trigger(this.get());\n  },\n\n  get() {\n    return {\n      organization: this.organization,\n      error: this.error,\n      loading: this.loading,\n      errorType: this.errorType,\n      dirty: this.dirty,\n    };\n  },\n\n  getState() {\n    return this.get();\n  },\n};\n\nconst OrganizationStore = createStore(makeSafeRefluxStore(storeConfig));\n\nexport default OrganizationStore;\n"],"names":["createActions","EditOwnershipRulesModal","Component","render","ownership","this","props","Fragment","Block","t","CodeBlock","initialText","raw","TextBlock","Body","Header","onSave","closeButton","modalCss","css","theme","storeConfig","unsubscribeListeners","init","reset","push","listenTo","OrganizationActions","onUpdate","onFetchOrgError","loading","error","errorType","organization","dirty","trigger","get","updatedOrg","replace","err","status","ORGANIZATION_FETCH_ERROR_TYPES","getState","createStore","makeSafeRefluxStore"],"sourceRoot":""}