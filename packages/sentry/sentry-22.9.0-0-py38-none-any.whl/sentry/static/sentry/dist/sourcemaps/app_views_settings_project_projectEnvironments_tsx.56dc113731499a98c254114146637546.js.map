{"version":3,"file":"chunks/app_views_settings_project_projectEnvironments_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"2uBA+BA,MAAMA,UAAiBC,EAAAA,UAAiB,+DAsBvB,KACb,MAAMC,EAAc,CAAC,GACf,UAACC,EAAD,gBAAYC,GAAmBC,KAAKC,MAU1C,OARIH,IACFD,EAAYC,IAAa,GAGvBE,KAAKE,YAAcH,IACrBF,EAAYE,IAAmB,GAG1BI,IAAWN,EAAlB,GAlCoC,CAStCK,WACE,MAAM,SAACA,EAAD,GAAWE,EAAX,MAAeC,EAAf,MAAsBC,EAAtB,OAA6BC,GAAUP,KAAKC,MAC5CO,EAAYH,EAAQI,EAAAA,MAASJ,QAASK,EACtCC,EACU,iBAAPP,EAAkB,CAACQ,SAAUR,EAAIC,MAAOG,GAAaJ,EAE9D,MAAwB,mBAAbF,EACFA,EAASS,EAAQL,GAGnBC,EAAOL,SAASS,EAAQL,EAChC,CAiBDO,SACE,MAAM,MAACP,EAAD,SAAQQ,EAAR,GAAkBV,EAAlB,SAAsBW,KAAad,GAASD,KAAKC,MACjDe,EAAeC,IACnBhB,EACA,kBACA,MACA,WACA,QACA,SACA,YAGF,OACE,QAACiB,EAAD,CAAUpB,UAAWE,KAAKmB,eAAgBJ,SAAUA,EAApD,UACE,QAAC,OAAD,IAAgBC,EAAcI,kBAAmBd,EAAOF,GAAIW,EAAW,GAAKX,EAA5E,SACGU,KAIR,EAxDGnB,EAAAA,YAAAA,Y,OAAAA,EAAAA,cACiB,a,OADjBA,EAAAA,eAGgC,CAClCI,gBAAiB,SACjBO,OAAO,EACPS,UAAU,IAqDd,SAAeM,EAAAA,EAAAA,YAAW1B,GAEpBuB,GAAW,OAAO,KAAP,CACfI,kBAAmBC,GAAiB,aAATA,EADZ,qBAGbC,GACAA,EAAET,UACD,uBAEOS,EAAEC,MAAMV,+EAGLS,EAAEC,MAAMV,wCAVT,I,0CCvFP,SAASW,EAAkBC,GAChC,OAAIA,EAAIC,KACCC,mBAAmBF,EAAIC,MAG5BD,EAAIG,YACCD,mBAAmBF,EAAIG,aATC,MAYlC,CAEM,SAASC,EAAeJ,GAC7B,OAAOA,EAAIC,MAAQD,EAAIG,aAdM,kBAe9B,C,4LCWc,SAASE,EACtB5B,EACA6B,GACQ,QACR,MAAM,OAACC,EAAD,OAASC,EAAT,SAAiBC,EAAjB,SAA2BC,GAAYJ,EACvCK,EAAQJ,EAAOK,KAAI,QAAC,KAACC,GAAF,SAAYA,GAAQ,EAApB,IACzB,IAAIC,EACAC,EAGc,iBAAPtC,GACTsC,EAAaR,EAAOS,QAAQvC,GAAM,EAClCqC,EAAgBG,IAAcN,EAAMO,MAAM,EAAGH,IAAaF,GAAoB,MAAZA,EAAK,MAEvEC,EAAgBG,IAAcN,GAAOE,GAAoB,MAAZA,EAAK,KAGpD,IAAIM,EAAYR,EAAMO,MAAMJ,EAAeC,QAEnB,IAAbL,IACTS,EAAYA,EAAUD,MAAM,EAAGR,IAGjC,MAAMU,EAAM,UAAGX,aAAH,EAAGA,EAAUW,cAAb,QAAuB,GAC7BC,EAAI,UAAGZ,aAAH,EAAGA,EAAUY,YAAb,QAAqB,GAEzBC,EAAa,GAAEH,EAAUI,KAAK,MACpB,iBAAP9C,EAAkB,GAAKA,IAC7B2C,IAASC,IAEZ,OAAOG,EAAAA,EAAAA,GAAoBF,EAAWd,EACvC,C,qRCrDD,MAAMiB,EAAkB,QAAC,OAACC,EAAS,CAAC,oBAAqBpD,GAAjC,SACtB,QAAC,IAAD,CAAQoD,OAAQA,EAAhB,SACG,QAAC,UAACC,GAAF,SACEA,IACC,QAAC,IAAD,CAAOC,KAAK,aAActD,EAA1B,UACGuD,EAAAA,EAAAA,GACC,oGAJP,GAFmB,EAAlBJ,EAAAA,YAAAA,kBAcN,S,0oCCaA,MAAMK,UAA4B7D,EAAAA,UAAwB,uDACzC,CACb8D,QAAS,KACTC,aAAc,KACdC,WAAW,KAJ2C,yBAgD5C,CAACjC,EAAkBkC,KAC7B,MAAM,MAACC,EAAD,UAAQC,GAAa/D,KAAKC,MAAMkC,OAEtCnC,KAAKC,MAAM+D,IAAIC,QACZ,aAAYH,KAASC,mBAA0BrC,EAAAA,EAAAA,GAAkBC,MAClE,CACEuC,OAAQ,MACRC,KAAM,CACJvC,KAAMD,EAAIC,KACVwC,SAAUP,GAEZQ,QAAS,MACPC,EAAAA,EAAAA,KACEC,EAAAA,EAAAA,IAAI,wBAAyB,CAC3BC,aAAazC,EAAAA,EAAAA,GAAeJ,KAFhC,EAMF8C,MAAO,MACLC,EAAAA,EAAAA,KACEH,EAAAA,EAAAA,IAAI,iCAAkC,CACpCC,aAAazC,EAAAA,EAAAA,GAAeJ,KAFhC,EAMFgD,SAAU3E,KAAK4E,UAAUC,KAAK7E,OAtBlC,GAnDsD,CAOxD8E,oBACE9E,KAAK4E,WACN,CAEDG,mBAAmBC,GAEfhF,KAAKC,MAAMmC,SAASxB,SAASqE,SAAS,aACtCD,EAAU5C,SAASxB,SAASqE,SAAS,YAErCjF,KAAK4E,WAER,CAEDA,YACE,MAAMR,EAAWpE,KAAKC,MAAMmC,SAASxB,SAASqE,SAAS,WAElDjF,KAAKkF,MAAMtB,WACd5D,KAAKmF,SAAS,CAACvB,WAAW,IAG5B,MAAM,MAACE,EAAD,UAAQC,GAAa/D,KAAKC,MAAMkC,OACtCnC,KAAKC,MAAM+D,IAAIC,QAAS,aAAYH,KAASC,kBAA2B,CACtE1D,MAAO,CACL+E,WAAYhB,EAAW,SAAW,WAEpCC,QAASV,IACP3D,KAAKmF,SAAS,CAACxB,eAAcC,WAAW,GAAxC,GAGL,CAEDyB,sBACE,MAAM,MAACvB,EAAD,UAAQC,GAAa/D,KAAKC,MAAMkC,OACtCnC,KAAKC,MAAM+D,IAAIC,QAAS,aAAYH,KAASC,KAAc,CACzDM,QAASX,IACP1D,KAAKmF,SAAS,CAACzB,WAAf,GAGL,CAiCD4B,cACE,MACMC,EADWvF,KAAKC,MAAMmC,SAASxB,SAASqE,SAAS,YAEnDzB,EAAAA,EAAAA,GAAE,4CACFA,EAAAA,EAAAA,GAAE,wCACN,OAAO,QAAC,IAAD,UAAe+B,GACvB,CAQDC,iCAGE,OADiBxF,KAAKC,MAAMmC,SAASxB,SAASqE,SAAS,WAE9C,MAGP,QAACQ,EAAD,CACE7D,KAAM8D,EAAAA,GACNlB,YAAa,CACXmB,GAAID,EAAAA,GACJ9D,KAAM8D,EAAAA,GACN5D,YAAa4D,EAAAA,IAEfE,aAAW,GAGhB,CAEDC,sBAAsBC,GACpB,MAAM1B,EAAWpE,KAAKC,MAAMmC,SAASxB,SAASqE,SAAS,WACjDc,EAAa3B,GAAWZ,EAAAA,EAAAA,GAAE,SAAUA,EAAAA,EAAAA,GAAE,QAE5C,OACE,QAAC,EAAAwC,SAAD,WACGhG,KAAKwF,iCACLM,EAAKvD,KAAIZ,IACR,QAAC8D,EAAD,CAEE7D,KAAMD,EAAIC,KACV4C,YAAa7C,EACbyC,SAAUA,EACV6B,OAAQjG,KAAKkG,UACbC,WAAYJ,EACZK,kBAAgB,GANXzE,EAAIgE,QAWlB,CAEDU,aACE,MAAM,aAAC1C,EAAD,UAAeC,GAAa5D,KAAKkF,MAEvC,OAAItB,GACK,QAAC,IAAD,KAIP,QAAC,IAAD,UACGD,SAAAA,EAAc2C,OACXtG,KAAK6F,sBAAsBlC,GAC3B3D,KAAKsF,eAGd,CAEDzE,SACE,MAAM,OAACqB,EAAD,OAASC,EAAT,SAAiBC,GAAYpC,KAAKC,MAClCmE,EAAWhC,EAASxB,SAASqE,SAAS,WAEtCsB,GAAUvE,EAAAA,EAAAA,GAAc,GAAI,CAACE,SAAQC,SAAQE,UAAW,IAC9D,OACE,0BACE,QAAC,IAAD,CAAqBmE,OAAOhD,EAAAA,EAAAA,GAAE,gBAAiBiD,YAAatE,EAAO4B,aACnE,QAAC,IAAD,CACEyC,OAAOhD,EAAAA,EAAAA,GAAE,uBACTkD,MACE,QAAC,IAAD,CAASC,YAAU,EAAnB,WACE,QAAC,IAAD,CAAUvG,GAAImG,EAASjG,OAAK,EAACJ,SAAU,KAAOkE,EAA9C,UACGZ,EAAAA,EAAAA,GAAE,mBAEL,QAAC,IAAD,CAAUpD,GAAK,GAAEmG,WAAkBjG,OAAK,EAACJ,SAAU,IAAMkE,EAAzD,UACGZ,EAAAA,EAAAA,GAAE,kBAKX,QAAC,IAAD,KAEA,QAAC,KAAD,YACE,QAAC,KAAD,UAAcY,GAAWZ,EAAAA,EAAAA,GAAE,WAAYA,EAAAA,EAAAA,GAAE,yBACxCxD,KAAKqG,kBAIb,EAaH,SAASZ,EAAT,GAQa,IARW,YACtBjB,EADsB,KAEtB5C,EAFsB,OAGtBqE,EAHsB,iBAItBG,GAAmB,EAJG,YAKtBR,GAAc,EALQ,SAMtBxB,GAAW,EANW,WAOtB+B,EAAa,IACF,EACX,OACE,QAACS,EAAD,YACE,QAACC,EAAD,UAAOjB,GAAcpC,EAAAA,EAAAA,GAAE,oBAAsB5B,KAC7C,QAAC,IAAD,CAAQyB,OAAQ,CAAC,iBAAjB,SACG,QAAC,UAACC,GAAF,SACC,QAAC,EAAA0C,SAAD,UACGI,GAAoBH,IACnB,QAACa,EAAD,CACEC,KAAK,KACLhG,UAAWuC,EACX0D,QAAS,IAAMf,EAAOzB,GAAcJ,GAHtC,SAKG+B,KARR,MAgBR,CA5NK1C,EAAAA,YAAAA,sBA+LGgC,EAAAA,YAAAA,iBA+BT,MAAMmB,GAAkB,OAAOK,EAAAA,GAAP,sBAAH,4EAKfJ,GAAO,OAAO,MAAP,sBAAH,0DAKJC,GAAoB,OAAOI,EAAAA,GAAP,sBAAH,gBACNC,EAAAA,EAAAA,GAAM,IADA,KAKvB,GAAeC,EAAAA,EAAAA,GAAQ3D,E","sources":["webpack:///./app/components/links/listLink.tsx","webpack:///./app/utils/environment.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/project/projectEnvironments.tsx"],"sourcesContent":["import {Component} from 'react';\n// eslint-disable-next-line no-restricted-imports\nimport {Link as RouterLink, withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\nimport {LocationDescriptor} from 'history';\nimport omit from 'lodash/omit';\nimport * as qs from 'query-string';\n\ntype DefaultProps = {\n  activeClassName: string;\n  disabled: boolean;\n  index: boolean;\n};\n\ntype LinkProps = Omit<React.ComponentProps<typeof RouterLink>, 'to'>;\n\ntype Props = WithRouterProps &\n  Partial<DefaultProps> &\n  LinkProps & {\n    /**\n     * Link target. We don't want to expose the ToLocationFunction on this component.\n     */\n    to: LocationDescriptor;\n    // If supplied by parent component, decides whether link element\n    // is \"active\" or not ... overriding default behavior of strict\n    // route matching\n    isActive?: (location: LocationDescriptor, indexOnly?: boolean) => boolean;\n    query?: string;\n  };\n\nclass ListLink extends Component<Props> {\n  static displayName = 'ListLink';\n\n  static defaultProps: DefaultProps = {\n    activeClassName: 'active',\n    index: false,\n    disabled: false,\n  };\n\n  isActive() {\n    const {isActive, to, query, index, router} = this.props;\n    const queryData = query ? qs.parse(query) : undefined;\n    const target: LocationDescriptor =\n      typeof to === 'string' ? {pathname: to, query: queryData} : to;\n\n    if (typeof isActive === 'function') {\n      return isActive(target, index);\n    }\n\n    return router.isActive(target, index);\n  }\n\n  getClassName = () => {\n    const _classNames = {};\n    const {className, activeClassName} = this.props;\n\n    if (className) {\n      _classNames[className] = true;\n    }\n\n    if (this.isActive() && activeClassName) {\n      _classNames[activeClassName] = true;\n    }\n\n    return classNames(_classNames);\n  };\n\n  render() {\n    const {index, children, to, disabled, ...props} = this.props;\n    const carriedProps = omit(\n      props,\n      'activeClassName',\n      'css',\n      'isActive',\n      'index',\n      'router',\n      'location'\n    );\n\n    return (\n      <StyledLi className={this.getClassName()} disabled={disabled}>\n        <RouterLink {...carriedProps} onlyActiveOnIndex={index} to={disabled ? '' : to}>\n          {children}\n        </RouterLink>\n      </StyledLi>\n    );\n  }\n}\n\nexport default withRouter(ListLink);\n\nconst StyledLi = styled('li', {\n  shouldForwardProp: prop => prop !== 'disabled',\n})<{disabled?: boolean}>`\n  ${p =>\n    p.disabled &&\n    `\n   a {\n    color:${p.theme.disabled} !important;\n    pointer-events: none;\n    :hover {\n      color: ${p.theme.disabled}  !important;\n    }\n   }\n`}\n`;\n","import {Environment} from 'sentry/types';\n\nconst DEFAULT_EMPTY_ROUTING_NAME = 'none';\nconst DEFAULT_EMPTY_ENV_NAME = '(No Environment)';\n\nexport function getUrlRoutingName(env: Partial<Environment>) {\n  if (env.name) {\n    return encodeURIComponent(env.name);\n  }\n\n  if (env.displayName) {\n    return encodeURIComponent(env.displayName);\n  }\n  return DEFAULT_EMPTY_ROUTING_NAME;\n}\n\nexport function getDisplayName(env: Partial<Environment>) {\n  return env.name || env.displayName || DEFAULT_EMPTY_ENV_NAME;\n}\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'sentry/utils/replaceRouterParams';\nimport {RouteWithName} from 'sentry/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  routes: RouteWithName[];\n\n  location?: Location;\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import Access from 'sentry/components/acl/access';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport Access from 'sentry/components/acl/access';\nimport Button from 'sentry/components/button';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport ListLink from 'sentry/components/links/listLink';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport NavTabs from 'sentry/components/navTabs';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {ALL_ENVIRONMENTS_KEY} from 'sentry/constants';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Environment, Project} from 'sentry/types';\nimport {getDisplayName, getUrlRoutingName} from 'sentry/utils/environment';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport withApi from 'sentry/utils/withApi';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\ntype Props = {\n  api: Client;\n} & RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\ntype State = {\n  environments: null | Environment[];\n  isLoading: boolean;\n  project: null | Project;\n};\n\nclass ProjectEnvironments extends Component<Props, State> {\n  state: State = {\n    project: null,\n    environments: null,\n    isLoading: true,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      this.props.location.pathname.endsWith('hidden/') !==\n      prevProps.location.pathname.endsWith('hidden/')\n    ) {\n      this.fetchData();\n    }\n  }\n\n  fetchData() {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n\n    if (!this.state.isLoading) {\n      this.setState({isLoading: true});\n    }\n\n    const {orgId, projectId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${projectId}/environments/`, {\n      query: {\n        visibility: isHidden ? 'hidden' : 'visible',\n      },\n      success: environments => {\n        this.setState({environments, isLoading: false});\n      },\n    });\n  }\n\n  fetchProjectDetails() {\n    const {orgId, projectId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${projectId}/`, {\n      success: project => {\n        this.setState({project});\n      },\n    });\n  }\n\n  // Toggle visibility of environment\n  toggleEnv = (env: Environment, shouldHide: boolean) => {\n    const {orgId, projectId} = this.props.params;\n\n    this.props.api.request(\n      `/projects/${orgId}/${projectId}/environments/${getUrlRoutingName(env)}/`,\n      {\n        method: 'PUT',\n        data: {\n          name: env.name,\n          isHidden: shouldHide,\n        },\n        success: () => {\n          addSuccessMessage(\n            tct('Updated [environment]', {\n              environment: getDisplayName(env),\n            })\n          );\n        },\n        error: () => {\n          addErrorMessage(\n            tct('Unable to update [environment]', {\n              environment: getDisplayName(env),\n            })\n          );\n        },\n        complete: this.fetchData.bind(this),\n      }\n    );\n  };\n\n  renderEmpty() {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    const message = isHidden\n      ? t(\"You don't have any hidden environments.\")\n      : t(\"You don't have any environments yet.\");\n    return <EmptyMessage>{message}</EmptyMessage>;\n  }\n\n  /**\n   * Renders rows for \"system\" environments:\n   * - \"All Environments\"\n   * - \"No Environment\"\n   *\n   */\n  renderAllEnvironmentsSystemRow() {\n    // Not available in \"Hidden\" tab\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    if (isHidden) {\n      return null;\n    }\n    return (\n      <EnvironmentRow\n        name={ALL_ENVIRONMENTS_KEY}\n        environment={{\n          id: ALL_ENVIRONMENTS_KEY,\n          name: ALL_ENVIRONMENTS_KEY,\n          displayName: ALL_ENVIRONMENTS_KEY,\n        }}\n        isSystemRow\n      />\n    );\n  }\n\n  renderEnvironmentList(envs: Environment[]) {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    const buttonText = isHidden ? t('Show') : t('Hide');\n\n    return (\n      <Fragment>\n        {this.renderAllEnvironmentsSystemRow()}\n        {envs.map(env => (\n          <EnvironmentRow\n            key={env.id}\n            name={env.name}\n            environment={env}\n            isHidden={isHidden}\n            onHide={this.toggleEnv}\n            actionText={buttonText}\n            shouldShowAction\n          />\n        ))}\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {environments, isLoading} = this.state;\n\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    return (\n      <PanelBody>\n        {environments?.length\n          ? this.renderEnvironmentList(environments)\n          : this.renderEmpty()}\n      </PanelBody>\n    );\n  }\n\n  render() {\n    const {routes, params, location} = this.props;\n    const isHidden = location.pathname.endsWith('hidden/');\n\n    const baseUrl = recreateRoute('', {routes, params, stepBack: -1});\n    return (\n      <div>\n        <SentryDocumentTitle title={t('Environments')} projectSlug={params.projectId} />\n        <SettingsPageHeader\n          title={t('Manage Environments')}\n          tabs={\n            <NavTabs underlined>\n              <ListLink to={baseUrl} index isActive={() => !isHidden}>\n                {t('Environments')}\n              </ListLink>\n              <ListLink to={`${baseUrl}hidden/`} index isActive={() => isHidden}>\n                {t('Hidden')}\n              </ListLink>\n            </NavTabs>\n          }\n        />\n        <PermissionAlert />\n\n        <Panel>\n          <PanelHeader>{isHidden ? t('Hidden') : t('Active Environments')}</PanelHeader>\n          {this.renderBody()}\n        </Panel>\n      </div>\n    );\n  }\n}\n\ntype RowProps = {\n  environment: Environment;\n  name: string;\n  actionText?: string;\n  isHidden?: boolean;\n  isSystemRow?: boolean;\n  onHide?: (env: Environment, isHidden: boolean) => void;\n  shouldShowAction?: boolean;\n};\n\nfunction EnvironmentRow({\n  environment,\n  name,\n  onHide,\n  shouldShowAction = false,\n  isSystemRow = false,\n  isHidden = false,\n  actionText = '',\n}: RowProps) {\n  return (\n    <EnvironmentItem>\n      <Name>{isSystemRow ? t('All Environments') : name}</Name>\n      <Access access={['project:write']}>\n        {({hasAccess}) => (\n          <Fragment>\n            {shouldShowAction && onHide && (\n              <EnvironmentButton\n                size=\"xs\"\n                disabled={!hasAccess}\n                onClick={() => onHide(environment, !isHidden)}\n              >\n                {actionText}\n              </EnvironmentButton>\n            )}\n          </Fragment>\n        )}\n      </Access>\n    </EnvironmentItem>\n  );\n}\n\nconst EnvironmentItem = styled(PanelItem)`\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst Name = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst EnvironmentButton = styled(Button)`\n  margin-left: ${space(0.5)};\n`;\n\nexport {ProjectEnvironments};\nexport default withApi(ProjectEnvironments);\n"],"names":["ListLink","Component","_classNames","className","activeClassName","this","props","isActive","classNames","to","query","index","router","queryData","qs","undefined","target","pathname","render","children","disabled","carriedProps","omit","StyledLi","getClassName","onlyActiveOnIndex","withRouter","shouldForwardProp","prop","p","theme","getUrlRoutingName","env","name","encodeURIComponent","displayName","getDisplayName","recreateRoute","options","routes","params","location","stepBack","paths","map","path","lastRootIndex","routeIndex","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","PermissionAlert","access","hasAccess","type","t","ProjectEnvironments","project","environments","isLoading","shouldHide","orgId","projectId","api","request","method","data","isHidden","success","addSuccessMessage","tct","environment","error","addErrorMessage","complete","fetchData","bind","componentDidMount","componentDidUpdate","prevProps","endsWith","state","setState","visibility","fetchProjectDetails","renderEmpty","message","renderAllEnvironmentsSystemRow","EnvironmentRow","ALL_ENVIRONMENTS_KEY","id","isSystemRow","renderEnvironmentList","envs","buttonText","Fragment","onHide","toggleEnv","actionText","shouldShowAction","renderBody","length","baseUrl","title","projectSlug","tabs","underlined","EnvironmentItem","Name","EnvironmentButton","size","onClick","PanelItem","Button","space","withApi"],"sourceRoot":""}