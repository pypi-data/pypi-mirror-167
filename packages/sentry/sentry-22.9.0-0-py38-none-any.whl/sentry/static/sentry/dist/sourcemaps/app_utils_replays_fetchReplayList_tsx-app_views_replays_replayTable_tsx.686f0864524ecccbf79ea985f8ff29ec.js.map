{"version":3,"file":"chunks/app_utils_replays_fetchReplayList_tsx-app_views_replays_replayTable_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/replays/fetchReplayList.tsx","webpack:///./app/components/replays/replayHighlight.tsx","webpack:///./app/views/replays/replayTable.tsx"],"sourcesContent":["import * as Sentry from '@sentry/react';\n\nimport {mapResponseToReplayRecord} from 'sentry/utils/replays/replayDataUtils';\nimport type RequestError from 'sentry/utils/requestError/requestError';\nimport type {ReplayListRecord} from 'sentry/views/replays/types';\n\nexport const DEFAULT_SORT = '-startedAt';\n\nexport const REPLAY_LIST_FIELDS = [\n  'countErrors',\n  'duration',\n  'finishedAt',\n  'id',\n  'projectId',\n  'startedAt',\n  'urls',\n  'user',\n];\n\ntype State = {\n  fetchError: undefined | RequestError;\n  isFetching: boolean;\n  pageLinks: null | string;\n  replays: undefined | ReplayListRecord[];\n};\n\ntype Result = State;\n\nasync function fetchReplayList({\n  api,\n  organization,\n  location,\n  eventView,\n}): Promise<Result> {\n  try {\n    const path = `/organizations/${organization.slug}/replays/`;\n\n    const [{data: records}, _textStatus, resp] = await api.requestPromise(path, {\n      includeAllArgs: true,\n      query: {\n        ...eventView.getEventsAPIPayload(location),\n        cursor: location.query.cursor,\n      },\n    });\n\n    const pageLinks = resp?.getResponseHeader('Link') ?? '';\n\n    return {\n      fetchError: undefined,\n      isFetching: false,\n      pageLinks,\n      replays: records.map(mapResponseToReplayRecord),\n    };\n  } catch (error) {\n    Sentry.captureException(error);\n    return {\n      fetchError: error,\n      isFetching: false,\n      pageLinks: null,\n      replays: [],\n    };\n  }\n}\n\nexport default fetchReplayList;\n","import React from 'react';\n\nimport ScoreBar from 'sentry/components/scoreBar';\nimport CHART_PALETTE from 'sentry/constants/chartPalette';\nimport type {ReplayListRecord} from 'sentry/views/replays/types';\n\ninterface Props {\n  replay: undefined | Pick<ReplayListRecord, 'countErrors' | 'duration' | 'urls'>;\n}\n\nconst palette = new Array(10).fill([CHART_PALETTE[0][0]]);\n\nfunction ReplayHighlight({replay}: Props) {\n  let score = 1;\n\n  if (replay) {\n    const {countErrors, duration, urls} = replay;\n    const pagesVisited = urls.length;\n\n    const pagesVisitedOverTime = pagesVisited / (duration || 1);\n\n    score = (countErrors * 25 + pagesVisited * 5 + pagesVisitedOverTime) / 10;\n    // negatively score sub 5 second replays\n    if (duration <= 5) {\n      score = score - 10 / (duration || 1);\n    }\n\n    score = Math.floor(Math.min(10, Math.max(1, score)));\n  }\n\n  return <ScoreBar size={20} score={score} palette={palette} radius={0} />;\n}\n\nexport default ReplayHighlight;\n","import {Fragment} from 'react';\nimport {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport Alert from 'sentry/components/alert';\nimport Duration from 'sentry/components/duration';\nimport ProjectBadge from 'sentry/components/idBadge/projectBadge';\nimport UserBadge from 'sentry/components/idBadge/userBadge';\nimport Link from 'sentry/components/links/link';\nimport {PanelTable} from 'sentry/components/panels';\nimport ReplayHighlight from 'sentry/components/replays/replayHighlight';\nimport {StringWalker} from 'sentry/components/replays/walker/urlWalker';\nimport TimeSince from 'sentry/components/timeSince';\nimport {IconArrow, IconCalendar} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport type {Organization} from 'sentry/types';\nimport type {Sort} from 'sentry/utils/discover/fields';\nimport getRouteStringFromRoutes from 'sentry/utils/getRouteStringFromRoutes';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useMedia from 'sentry/utils/useMedia';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useProjects from 'sentry/utils/useProjects';\nimport {useRoutes} from 'sentry/utils/useRoutes';\nimport type {ReplayListLocationQuery, ReplayListRecord} from 'sentry/views/replays/types';\n\ntype Props = {\n  isFetching: boolean;\n  replays: undefined | ReplayListRecord[];\n  showProjectColumn: boolean;\n  sort: Sort;\n  fetchError?: Error;\n};\n\ntype RowProps = {\n  minWidthIsSmall: boolean;\n  organization: Organization;\n  referrer: string;\n  replay: ReplayListRecord;\n  showProjectColumn: boolean;\n};\n\nfunction SortableHeader({\n  fieldName,\n  label,\n  sort,\n}: {\n  fieldName: string;\n  label: string;\n  sort: Sort;\n}) {\n  const location = useLocation<ReplayListLocationQuery>();\n\n  const arrowDirection = sort.kind === 'asc' ? 'up' : 'down';\n  const sortArrow = <IconArrow color=\"gray300\" size=\"xs\" direction={arrowDirection} />;\n\n  return (\n    <SortLink\n      role=\"columnheader\"\n      aria-sort={\n        sort.field.endsWith(fieldName)\n          ? sort.kind === 'asc'\n            ? 'ascending'\n            : 'descending'\n          : 'none'\n      }\n      to={{\n        pathname: location.pathname,\n        query: {\n          ...location.query,\n          sort: sort.kind === 'desc' ? fieldName : '-' + fieldName,\n        },\n      }}\n    >\n      {label} {sort.field === fieldName && sortArrow}\n    </SortLink>\n  );\n}\n\nfunction ReplayTable({isFetching, replays, showProjectColumn, sort, fetchError}: Props) {\n  const routes = useRoutes();\n  const referrer = encodeURIComponent(getRouteStringFromRoutes(routes));\n\n  const organization = useOrganization();\n  const theme = useTheme();\n  const minWidthIsSmall = useMedia(`(min-width: ${theme.breakpoints.small})`);\n\n  const tableHeaders = [\n    t('Session'),\n    showProjectColumn && minWidthIsSmall ? (\n      <SortableHeader\n        key=\"projectId\"\n        sort={sort}\n        fieldName=\"projectId\"\n        label={t('Project')}\n      />\n    ) : null,\n    <SortableHeader\n      key=\"startedAt\"\n      sort={sort}\n      fieldName=\"startedAt\"\n      label={t('Start Time')}\n    />,\n    <SortableHeader\n      key=\"duration\"\n      sort={sort}\n      fieldName=\"duration\"\n      label={t('Duration')}\n    />,\n    <SortableHeader\n      key=\"countErrors\"\n      sort={sort}\n      fieldName=\"countErrors\"\n      label={t('Errors')}\n    />,\n    t('Activity'),\n  ].filter(Boolean);\n\n  if (fetchError && !isFetching) {\n    return (\n      <StyledPanelTable\n        headers={tableHeaders}\n        showProjectColumn={showProjectColumn}\n        isLoading={false}\n      >\n        <StyledAlert type=\"error\" showIcon>\n          {t(\n            'Sorry, the list of replays could not be loaded. This could be due to invalid search parameters or an internal systems error.'\n          )}\n        </StyledAlert>\n      </StyledPanelTable>\n    );\n  }\n\n  return (\n    <StyledPanelTable\n      isLoading={isFetching}\n      isEmpty={replays?.length === 0}\n      showProjectColumn={showProjectColumn}\n      headers={tableHeaders}\n    >\n      {replays?.map(replay => (\n        <ReplayTableRow\n          key={replay.id}\n          minWidthIsSmall={minWidthIsSmall}\n          organization={organization}\n          referrer={referrer}\n          replay={replay}\n          showProjectColumn={showProjectColumn}\n        />\n      ))}\n    </StyledPanelTable>\n  );\n}\n\nfunction ReplayTableRow({\n  minWidthIsSmall,\n  organization,\n  referrer,\n  replay,\n  showProjectColumn,\n}: RowProps) {\n  const {projects} = useProjects();\n  const project = projects.find(p => p.id === replay.projectId);\n  return (\n    <Fragment>\n      <UserBadge\n        avatarSize={32}\n        displayName={\n          <Link\n            to={`/organizations/${organization.slug}/replays/${project?.slug}:${replay.id}/?referrer=${referrer}`}\n          >\n            {replay.user.displayName || ''}\n          </Link>\n        }\n        user={{\n          username: replay.user.displayName || '',\n          email: replay.user.email || '',\n          id: replay.user.id || '',\n          ip_address: replay.user.ip_address || '',\n          name: replay.user.name || '',\n        }}\n        // this is the subheading for the avatar, so displayEmail in this case is a misnomer\n        displayEmail={<StringWalker urls={replay.urls} />}\n      />\n      {showProjectColumn && minWidthIsSmall && (\n        <Item>{project ? <ProjectBadge project={project} avatarSize={16} /> : null}</Item>\n      )}\n      <Item>\n        <TimeSinceWrapper>\n          {minWidthIsSmall && <StyledIconCalendarWrapper color=\"gray500\" size=\"sm\" />}\n          <TimeSince date={replay.startedAt} />\n        </TimeSinceWrapper>\n      </Item>\n      <Item>\n        <Duration seconds={Math.floor(replay.duration)} exact abbreviation />\n      </Item>\n      <Item>{replay.countErrors || 0}</Item>\n      <Item>\n        <ReplayHighlight replay={replay} />\n      </Item>\n    </Fragment>\n  );\n}\n\nconst StyledPanelTable = styled(PanelTable)<{showProjectColumn: boolean}>`\n  ${p =>\n    p.showProjectColumn\n      ? `grid-template-columns: minmax(0, 1fr) repeat(5, max-content);`\n      : `grid-template-columns: minmax(0, 1fr) repeat(4, max-content);`}\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: minmax(0, 1fr) repeat(4, max-content);\n  }\n`;\n\nconst SortLink = styled(Link)`\n  color: inherit;\n\n  :hover {\n    color: inherit;\n  }\n\n  svg {\n    vertical-align: top;\n  }\n`;\n\nconst Item = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst TimeSinceWrapper = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(2, minmax(auto, max-content));\n  align-items: center;\n  gap: ${space(1)};\n`;\n\nconst StyledIconCalendarWrapper = styled(IconCalendar)`\n  position: relative;\n  top: -1px;\n`;\n\nconst StyledAlert = styled(Alert)`\n  position: relative;\n  bottom: 0.5px;\n  grid-column-start: span 99;\n  margin-bottom: 0;\n`;\n\nexport default ReplayTable;\n"],"names":["DEFAULT_SORT","REPLAY_LIST_FIELDS","async","api","organization","location","eventView","path","slug","data","records","_textStatus","resp","requestPromise","includeAllArgs","query","getEventsAPIPayload","cursor","fetchError","undefined","isFetching","pageLinks","getResponseHeader","replays","map","mapResponseToReplayRecord","error","Sentry","palette","Array","fill","CHART_PALETTE","ReplayHighlight","replay","score","countErrors","duration","urls","pagesVisited","length","Math","floor","min","max","size","radius","SortableHeader","fieldName","label","sort","useLocation","arrowDirection","kind","sortArrow","color","direction","SortLink","role","field","endsWith","to","pathname","ReplayTable","showProjectColumn","routes","useRoutes","referrer","encodeURIComponent","getRouteStringFromRoutes","useOrganization","theme","useTheme","minWidthIsSmall","useMedia","breakpoints","small","tableHeaders","t","filter","Boolean","StyledPanelTable","headers","isLoading","StyledAlert","type","showIcon","isEmpty","ReplayTableRow","id","projects","useProjects","project","find","p","projectId","Fragment","avatarSize","displayName","user","username","email","ip_address","name","displayEmail","Item","TimeSinceWrapper","StyledIconCalendarWrapper","date","startedAt","seconds","exact","abbreviation","PanelTable","Link","space","IconCalendar","Alert"],"sourceRoot":""}