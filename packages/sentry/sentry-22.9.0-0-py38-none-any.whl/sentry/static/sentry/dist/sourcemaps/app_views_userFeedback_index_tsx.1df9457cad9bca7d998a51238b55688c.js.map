{"version":3,"file":"chunks/app_views_userFeedback_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/userFeedback/utils.tsx","webpack:///./app/views/userFeedback/index.tsx"],"sourcesContent":["import pick from 'lodash/pick';\nimport * as qs from 'query-string';\n\nimport {URL_PARAM} from 'sentry/constants/pageFilters';\n\nconst DEFAULT_STATUS = 'unresolved';\n\n/**\n * Get query for API given the current location.search string\n */\nexport function getQuery(search: string) {\n  const query = qs.parse(search);\n\n  const status = typeof query.status !== 'undefined' ? query.status : DEFAULT_STATUS;\n\n  const queryParams = {\n    status,\n    ...pick(query, ['cursor', ...Object.values(URL_PARAM)]),\n  };\n\n  return queryParams;\n}\n","import {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport {withProfiler} from '@sentry/react';\nimport omit from 'lodash/omit';\n\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport EventUserFeedback from 'sentry/components/events/userFeedback';\nimport CompactIssue from 'sentry/components/issues/compactIssue';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport NoProjectMessage from 'sentry/components/noProjectMessage';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport PageHeading from 'sentry/components/pageHeading';\nimport Pagination from 'sentry/components/pagination';\nimport {Panel} from 'sentry/components/panels';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport space from 'sentry/styles/space';\nimport {Organization, UserReport} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\n\nimport {UserFeedbackEmpty} from './userFeedbackEmpty';\nimport {getQuery} from './utils';\n\ntype State = AsyncView['state'] & {\n  reportList: UserReport[];\n};\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  organization: Organization;\n};\n\nclass OrganizationUserFeedback extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {\n      organization,\n      location: {search},\n    } = this.props;\n\n    return [\n      [\n        'reportList',\n        `/organizations/${organization.slug}/user-feedback/`,\n        {\n          query: getQuery(search),\n        },\n      ],\n    ];\n  }\n\n  getTitle() {\n    return `${t('User Feedback')} - ${this.props.organization.slug}`;\n  }\n\n  get projectIds() {\n    const {project} = this.props.location.query;\n\n    return Array.isArray(project)\n      ? project\n      : typeof project === 'string'\n      ? [project]\n      : [];\n  }\n\n  renderResults() {\n    const {orgId} = this.props.params;\n\n    return (\n      <Panel className=\"issue-list\" data-test-id=\"user-feedback-list\">\n        {this.state.reportList.map(item => {\n          const issue = item.issue;\n          return (\n            <CompactIssue key={item.id} id={issue.id} data={issue} eventId={item.eventID}>\n              <StyledEventUserFeedback report={item} orgId={orgId} issueId={issue.id} />\n            </CompactIssue>\n          );\n        })}\n      </Panel>\n    );\n  }\n\n  renderEmpty() {\n    return <UserFeedbackEmpty projectIds={this.projectIds} />;\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderStreamBody() {\n    const {loading, reportList} = this.state;\n\n    if (loading) {\n      return (\n        <Panel>\n          <LoadingIndicator />\n        </Panel>\n      );\n    }\n\n    if (!reportList.length) {\n      return this.renderEmpty();\n    }\n\n    return this.renderResults();\n  }\n\n  renderBody() {\n    const {organization} = this.props;\n    const {location} = this.props;\n    const {pathname, search, query} = location;\n    const {status} = getQuery(search);\n    const {reportListPageLinks} = this.state;\n\n    const unresolvedQuery = omit(query, 'status');\n    const allIssuesQuery = {...query, status: ''};\n\n    return (\n      <PageFiltersContainer>\n        <PageContent>\n          <NoProjectMessage organization={organization}>\n            <div data-test-id=\"user-feedback\">\n              <Header>\n                <PageHeading>{t('User Feedback')}</PageHeading>\n              </Header>\n              <Filters>\n                <PageFilterBar>\n                  <ProjectPageFilter />\n                  <EnvironmentPageFilter />\n                  <DatePageFilter alignDropdown=\"right\" />\n                </PageFilterBar>\n                <ButtonBar active={!Array.isArray(status) ? status || '' : ''} merged>\n                  <Button barId=\"unresolved\" to={{pathname, query: unresolvedQuery}}>\n                    {t('Unresolved')}\n                  </Button>\n                  <Button barId=\"\" to={{pathname, query: allIssuesQuery}}>\n                    {t('All Issues')}\n                  </Button>\n                </ButtonBar>\n              </Filters>\n              {this.renderStreamBody()}\n              <Pagination pageLinks={reportListPageLinks} />\n            </div>\n          </NoProjectMessage>\n        </PageContent>\n      </PageFiltersContainer>\n    );\n  }\n}\n\nexport default withOrganization(withProfiler(OrganizationUserFeedback));\n\nconst Header = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: ${space(2)};\n`;\n\nconst Filters = styled('div')`\n  display: grid;\n  grid-template-columns: minmax(0, max-content) max-content;\n  justify-content: start;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (max-width: ${p => p.theme.breakpoints.medium}) {\n    grid-template-columns: minmax(0, 1fr) max-content;\n  }\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: minmax(0, 1fr);\n  }\n`;\n\nconst StyledEventUserFeedback = styled(EventUserFeedback)`\n  margin: ${space(2)} 0 0;\n`;\n"],"names":["getQuery","search","query","qs","status","pick","Object","values","URL_PARAM","OrganizationUserFeedback","AsyncView","getEndpoints","organization","location","this","props","slug","getTitle","t","projectIds","project","Array","isArray","renderResults","orgId","params","className","state","reportList","map","item","issue","id","data","eventId","eventID","StyledEventUserFeedback","report","issueId","renderEmpty","renderLoading","renderBody","renderStreamBody","loading","length","pathname","reportListPageLinks","unresolvedQuery","omit","allIssuesQuery","Header","Filters","alignDropdown","active","merged","barId","to","pageLinks","withOrganization","withProfiler","space","p","theme","breakpoints","medium","small","EventUserFeedback"],"sourceRoot":""}