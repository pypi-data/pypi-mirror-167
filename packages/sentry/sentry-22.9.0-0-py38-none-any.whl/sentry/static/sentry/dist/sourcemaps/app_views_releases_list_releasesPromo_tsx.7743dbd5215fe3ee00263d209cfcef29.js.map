{"version":3,"file":"chunks/app_views_releases_list_releasesPromo_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/useEffectAfterFirstRender.ts","webpack:///./app/utils/useLocation.tsx","webpack:///./app/utils/useParams.tsx","webpack:///./app/utils/useApiRequests.tsx","webpack:///./app/views/releases/list/releasesPromo.tsx"],"sourcesContent":["import {useEffect, useRef} from 'react';\n\nconst useEffectAfterFirstRender = (\n  cb: React.EffectCallback,\n  deps: React.DependencyList\n): void => {\n  const firstRender = useRef<boolean>(true);\n\n  useEffect(() => {\n    if (firstRender.current) {\n      firstRender.current = false;\n      return;\n    }\n\n    cb();\n    // Dependencies are explicitly managed and the deps warning is enabled for the custom hook.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n};\n\nexport {useEffectAfterFirstRender};\n","import {Location, Query} from 'history';\n\nimport {useRouteContext} from 'sentry/utils/useRouteContext';\n\ntype DefaultQuery<T = string> = {\n  [key: string]: T | T[] | null | undefined;\n};\n\nexport function useLocation<Q extends Query = DefaultQuery>(): Location<Q> {\n  const route = useRouteContext();\n  return route.location;\n}\n","import {useRouteContext} from 'sentry/utils/useRouteContext';\n\nexport function useParams() {\n  const route = useRouteContext();\n  return route.params;\n}\n","import {useCallback, useEffect, useMemo, useRef, useState} from 'react';\nimport * as Sentry from '@sentry/react';\n\nimport {ResponseMeta} from 'sentry/api';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport {metric} from 'sentry/utils/analytics';\nimport getRouteStringFromRoutes from 'sentry/utils/getRouteStringFromRoutes';\nimport useApi from 'sentry/utils/useApi';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport {useParams} from 'sentry/utils/useParams';\nimport {useRoutes} from 'sentry/utils/useRoutes';\nimport PermissionDenied from 'sentry/views/permissionDenied';\nimport RouteError from 'sentry/views/routeError';\n\nimport RequestError from './requestError/requestError';\nimport {useEffectAfterFirstRender} from './useEffectAfterFirstRender';\n\n/**\n * Turn {foo: X} into {foo: X, fooPageLinks: string}\n */\ntype UseApiRequestData<T extends Record<string, any>> = {\n  // Keys can be null on error\n  [Property in keyof T]: T[Property] | null;\n} & {\n  // Make request cursors available\n  [Property in keyof T as `${Property & string}PageLinks`]: string | null;\n};\n\ninterface State<T> {\n  /**\n   * Mapping of results from the configured endpoints\n   */\n  data: UseApiRequestData<T>;\n  /**\n   * Errors from the configured endpoionts\n   */\n  errors: Record<string, RequestError>;\n  /**\n   * Did *any* of the endpoints fail?\n   */\n  hasError: boolean;\n  /**\n   * Are the endpoints currently loading?\n   */\n  isLoading: boolean;\n  /**\n   * Are we *reloading* data without the loading state being set to true?\n   */\n  isReloading: boolean;\n  /**\n   * How many requests are still pending?\n   */\n  remainingRequests: number;\n}\n\ninterface Result<T extends Record<string, any>> extends State<T> {\n  /**\n   * renderComponent is a helper function that is used to render loading and\n   * errors state for you, and will only render your component once all endpoints\n   * have resolved.\n   *\n   * Typically you would use this when returning react for your component.\n   *\n   *   return renderComponent(\n   *     <div>{data.someEndpoint.resultKey}</div>\n   *   )\n   *\n   * The react element will only be rendered once all endpoints have been loaded.\n   */\n  renderComponent: (children: React.ReactElement) => React.ReactElement;\n}\n\ntype EndpointRequestOptions = {\n  /**\n   * Function to check if the error is allowed\n   */\n  allowError?: (error: any) => void;\n  /**\n   * Do not pass query parameters to the API\n   */\n  disableEntireQuery?: boolean;\n  /**\n   * If set then pass entire `query` object to API call\n   */\n  paginate?: boolean;\n};\n\nexport type EndpointDefinition<T extends Record<string, any>> = [\n  key: keyof T,\n  url: string,\n  urlOptions?: {query?: Record<string, string>},\n  requestOptions?: EndpointRequestOptions\n];\n\ntype Options<T extends Record<string, any>> = {\n  endpoints: EndpointDefinition<T>[];\n  /**\n   * If a request fails and is not a bad request, and if `disableErrorReport`\n   * is set to false, the UI will display an error modal.\n   *\n   * It is recommended to enable this property ideally only when the subclass\n   * is used by a top level route.\n   */\n  disableErrorReport?: boolean;\n  onLoadAllEndpointsSuccess?: () => void;\n  onRequestError?: (error: RequestError, args: Options<T>['endpoints'][0]) => void;\n  onRequestSuccess?: (data: {data: any; stateKey: keyof T; resp?: ResponseMeta}) => void;\n  /**\n   * Override this flag to have the component reload its state when the window\n   * becomes visible again. This will set the loading and reloading state, but\n   * will not render a loading state during reloading.\n   *\n   * eslint-disable-next-line react/sort-comp\n   */\n  reloadOnVisible?: boolean;\n  /**\n   * This affects how the component behaves when `remountComponent` is called\n   *\n   * By default, the component gets put back into a \"loading\" state when\n   * re-fetching data. If this is true, then when we fetch data, the original\n   * ready component remains mounted and it will need to handle any additional\n   * \"reloading\" states\n   */\n  shouldReload?: boolean;\n  /**\n   * should `renderError` render the `detail` attribute of a 400 error\n   */\n  shouldRenderBadRequests?: boolean;\n};\n\nfunction renderLoading() {\n  return <LoadingIndicator />;\n}\n\nfunction useApiRequests<T extends Record<string, any>>({\n  endpoints,\n  reloadOnVisible = false,\n  shouldReload = false,\n  shouldRenderBadRequests = false,\n  disableErrorReport = true,\n  onLoadAllEndpointsSuccess = () => {},\n  onRequestSuccess = _data => {},\n  onRequestError = (_error, _args) => {},\n}: Options<T>): Result<T> {\n  const api = useApi();\n  const location = useLocation<any>();\n  const params = useParams();\n\n  // Memoize the initialState so we can easily reuse it later\n  const initialState = useMemo<State<T>>(\n    () => ({\n      data: {} as T,\n      isLoading: false,\n      hasError: false,\n      isReloading: false,\n      errors: {},\n      remainingRequests: endpoints.length,\n    }),\n    [endpoints.length]\n  );\n\n  const [state, setState] = useState<State<T>>(initialState);\n\n  // Begin measuring the use of the hook for the given route\n  const triggerMeasurement = useMeasureApiRequests();\n\n  const handleRequestSuccess = useCallback(\n    (\n      {stateKey, data, resp}: {data: any; stateKey: keyof T; resp?: ResponseMeta},\n      initialRequest?: boolean\n    ) => {\n      setState(prevState => {\n        const newState = {\n          ...prevState,\n          data: {\n            ...prevState.data,\n            [stateKey]: data,\n            [`${stateKey as string}PageLinks`]: resp?.getResponseHeader('Link'),\n          },\n        };\n\n        if (initialRequest) {\n          newState.remainingRequests = prevState.remainingRequests - 1;\n          newState.isLoading = prevState.remainingRequests > 1;\n          newState.isReloading = prevState.isReloading && newState.isLoading;\n          triggerMeasurement({finished: newState.remainingRequests === 0});\n        }\n\n        return newState;\n      });\n\n      // if everything is loaded and we don't have an error, call the callback\n      onRequestSuccess({stateKey, data, resp});\n    },\n    [onRequestSuccess, triggerMeasurement]\n  );\n\n  const handleError = useCallback(\n    (error: RequestError, args: EndpointDefinition<T>) => {\n      const [stateKey] = args;\n\n      if (error && error.responseText) {\n        Sentry.addBreadcrumb({\n          message: error.responseText,\n          category: 'xhr',\n          level: 'error',\n        });\n      }\n\n      setState(prevState => {\n        const isLoading = prevState.remainingRequests > 1;\n        const newState = {\n          errors: {\n            ...prevState.errors,\n            [stateKey]: error,\n          },\n          data: {\n            ...prevState.data,\n            [stateKey]: null,\n          },\n          hasError: prevState.hasError || !!error,\n          remainingRequests: prevState.remainingRequests - 1,\n          isLoading,\n          isReloading: prevState.isReloading && isLoading,\n        };\n        triggerMeasurement({finished: newState.remainingRequests === 0, error: true});\n        return newState;\n      });\n\n      onRequestError(error, args);\n    },\n    [triggerMeasurement, onRequestError]\n  );\n\n  const fetchData = useCallback(\n    async (extraState: Partial<State<T>> = {}) => {\n      // Nothing to fetch if enpoints are empty\n      if (!endpoints.length) {\n        setState(prevState => ({\n          ...prevState,\n          data: {} as T,\n          isLoading: false,\n          hasError: false,\n        }));\n\n        return;\n      }\n\n      // Cancel any in flight requests\n      api.clear();\n\n      setState(prevState => ({\n        ...prevState,\n        isLoading: true,\n        hasError: false,\n        remainingRequests: endpoints.length,\n        ...extraState,\n      }));\n\n      await Promise.all(\n        endpoints.map(async ([stateKey, endpoint, parameters, options]) => {\n          options = options ?? {};\n          // If you're using nested async components/views make sure to pass the\n          // props through so that the child component has access to props.location\n          const locationQuery = (location && location.query) || {};\n          let query = (parameters && parameters.query) || {};\n          // If paginate option then pass entire `query` object to API call\n          // It should only be expecting `query.cursor` for pagination\n          if ((options.paginate || locationQuery.cursor) && !options.disableEntireQuery) {\n            query = {...locationQuery, ...query};\n          }\n          try {\n            const results = await api.requestPromise(endpoint, {\n              method: 'GET',\n              ...parameters,\n              query,\n              includeAllArgs: true,\n            });\n            const [data, _, resp] = results;\n            handleRequestSuccess({stateKey, data, resp}, true);\n          } catch (error) {\n            handleError(error, [stateKey, endpoint, parameters, options]);\n          }\n        })\n      );\n    },\n    [api, endpoints, handleError, handleRequestSuccess, location]\n  );\n\n  const reloadData = useCallback(() => fetchData({isReloading: true}), [fetchData]);\n\n  const handleMount = useCallback(async () => {\n    try {\n      await fetchData();\n    } catch (error) {\n      setState(prevState => ({...prevState, hasError: true}));\n      throw error;\n    }\n  }, [fetchData]);\n\n  // Trigger fetch on mount\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => void handleMount(), []);\n\n  const handleFullReload = useCallback(() => {\n    if (shouldReload) {\n      return reloadData();\n    }\n    setState({...initialState});\n    return fetchData();\n  }, [initialState, reloadData, fetchData, shouldReload]);\n\n  // Trigger fetch on location or parameter change\n  // useEffectAfterFirstRender to avoid calling at the same time as handleMount\n  useEffectAfterFirstRender(\n    () => void handleFullReload(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [location?.search, location?.state, params]\n  );\n\n  const visibilityReloader = useCallback(\n    () => !state.isLoading && !document.hidden && reloadData(),\n    [state.isLoading, reloadData]\n  );\n\n  // Trigger fetch on visible change when using visibilityReloader\n  useEffect(() => {\n    if (reloadOnVisible) {\n      document.addEventListener('visibilitychange', visibilityReloader);\n    }\n\n    return () => document.removeEventListener('visibilitychange', visibilityReloader);\n  }, [reloadOnVisible, visibilityReloader]);\n\n  // Trigger onLoadAllEndpointsSuccess when everything has been loaded\n  useEffect(\n    () => {\n      if (endpoints.length && state.remainingRequests === 0 && !state.hasError) {\n        onLoadAllEndpointsSuccess();\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [state.remainingRequests, state.hasError, endpoints.length]\n  );\n\n  const renderError = useCallback(\n    (error?: Error, disableLog = false): React.ReactElement => {\n      const errors = state.errors;\n\n      // 401s are captured by SudoModal, but may be passed back to AsyncComponent\n      // if they close the modal without identifying\n      const unauthorizedErrors = Object.values(errors).some(resp => resp?.status === 401);\n\n      // Look through endpoint results to see if we had any 403s, means their\n      // role can not access resource\n      const permissionErrors = Object.values(errors).some(resp => resp?.status === 403);\n\n      // If all error responses have status code === 0, then show error message\n      // but don't log it to sentry\n      const shouldLogSentry =\n        !!Object.values(errors).some(resp => resp?.status !== 0) || disableLog;\n\n      if (unauthorizedErrors) {\n        return (\n          <LoadingError message={t('You are not authorized to access this resource.')} />\n        );\n      }\n\n      if (permissionErrors) {\n        return <PermissionDenied />;\n      }\n\n      if (shouldRenderBadRequests) {\n        const badRequests = Object.values(errors)\n          .filter(resp => resp?.status === 400 && resp?.responseJSON?.detail)\n          .map(resp => resp.responseJSON.detail);\n\n        if (badRequests.length) {\n          return <LoadingError message={[...new Set(badRequests)].join('\\n')} />;\n        }\n      }\n\n      return (\n        <RouteError\n          error={error}\n          disableLogSentry={!shouldLogSentry}\n          disableReport={disableErrorReport}\n        />\n      );\n    },\n    [state.errors, disableErrorReport, shouldRenderBadRequests]\n  );\n\n  const shouldRenderLoading = state.isLoading && (!shouldReload || !state.isReloading);\n\n  const renderComponent = useCallback(\n    (children: React.ReactElement) =>\n      shouldRenderLoading\n        ? renderLoading()\n        : state.hasError\n        ? renderError(new Error('Unable to load all required endpoints'))\n        : children,\n    [shouldRenderLoading, state.hasError, renderError]\n  );\n\n  return {...state, renderComponent};\n}\n\nexport default useApiRequests;\n\ntype MetricsState = {\n  error: boolean;\n  finished: boolean;\n  hasMeasured: boolean;\n};\n\ntype MetricUpdate = Partial<Pick<MetricsState, 'finished' | 'error'>>;\n\n/**\n * Helper hook that marks a measurement when the component mounts.\n *\n * Use the `triggerMeasurement` function to trigger a measurement when the\n * useApiRequests hook has finished loading all requests. Will only trigger once\n */\nfunction useMeasureApiRequests() {\n  const routes = useRoutes();\n\n  const measurement = useRef<MetricsState>({\n    hasMeasured: false,\n    finished: false,\n    error: false,\n  });\n\n  // Start measuring immediately upon mount. We re-mark if the route list has\n  // changed, since the component is now being used under a different route\n  useEffect(() => {\n    // Reset the measurement object\n    measurement.current = {\n      hasMeasured: false,\n      finished: false,\n      error: false,\n    };\n\n    if (routes && routes.length) {\n      metric.mark({name: `async-component-${getRouteStringFromRoutes(routes)}`});\n    }\n  }, [routes]);\n\n  const triggerMeasurement = useCallback(\n    ({finished, error}: MetricUpdate) => {\n      if (!routes) {\n        return;\n      }\n\n      if (finished) {\n        measurement.current.finished = true;\n      }\n\n      if (error) {\n        measurement.current.error = true;\n      }\n\n      if (!measurement.current.hasMeasured && measurement.current.finished) {\n        const routeString = getRouteStringFromRoutes(routes);\n        metric.measure({\n          name: 'app.component.async-component',\n          start: `async-component-${routeString}`,\n          data: {\n            route: routeString,\n            error: measurement.current.error,\n          },\n        });\n\n        measurement.current.hasMeasured = true;\n      }\n    },\n    [routes]\n  );\n\n  return triggerMeasurement;\n}\n","import {useCallback, useEffect, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport commitImage from 'sentry-images/spot/releases-tour-commits.svg';\nimport emailImage from 'sentry-images/spot/releases-tour-email.svg';\nimport resolutionImage from 'sentry-images/spot/releases-tour-resolution.svg';\nimport statsImage from 'sentry-images/spot/releases-tour-stats.svg';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {openCreateReleaseIntegration} from 'sentry/actionCreators/modal';\nimport Access from 'sentry/components/acl/access';\nimport Button from 'sentry/components/button';\nimport DropdownAutoComplete from 'sentry/components/dropdownAutoComplete';\nimport {Item} from 'sentry/components/dropdownAutoComplete/types';\nimport Link from 'sentry/components/links/link';\nimport {TourImage, TourStep, TourText} from 'sentry/components/modals/featureTourModal';\nimport {Panel} from 'sentry/components/panels';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconAdd, IconCopy} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {PageHeader} from 'sentry/styles/organization';\nimport space from 'sentry/styles/space';\nimport {Organization, Project, SentryApp} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport useApi from 'sentry/utils/useApi';\nimport useApiRequests from 'sentry/utils/useApiRequests';\n\nconst releasesSetupUrl = 'https://docs.sentry.io/product/releases/';\n\nconst docsLink = (\n  <Button external href={releasesSetupUrl}>\n    {t('Setup')}\n  </Button>\n);\n\nexport const RELEASES_TOUR_STEPS: TourStep[] = [\n  {\n    title: t('Suspect Commits'),\n    image: <TourImage src={commitImage} />,\n    body: (\n      <TourText>\n        {t(\n          'Sentry suggests which commit caused an issue and who is likely responsible so you can triage.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Release Stats'),\n    image: <TourImage src={statsImage} />,\n    body: (\n      <TourText>\n        {t(\n          'Get an overview of the commits in each release, and which issues were introduced or fixed.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Easily Resolve'),\n    image: <TourImage src={resolutionImage} />,\n    body: (\n      <TourText>\n        {t(\n          'Automatically resolve issues by including the issue number in your commit message.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Deploy Emails'),\n    image: <TourImage src={emailImage} />,\n    body: (\n      <TourText>\n        {t(\n          'Receive email notifications about when your code gets deployed. This can be customized in settings.'\n        )}\n      </TourText>\n    ),\n  },\n];\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n};\n\nconst ReleasesPromo = ({organization, project}: Props) => {\n  const {data, renderComponent, isLoading} = useApiRequests<{\n    internalIntegrations: SentryApp[];\n  }>({\n    endpoints: [\n      [\n        'internalIntegrations',\n        `/organizations/${organization.slug}/sentry-apps/`,\n        {query: {status: 'internal'}},\n      ],\n    ],\n  });\n  const api = useApi();\n  const [token, setToken] = useState(null);\n  const [integrations, setIntegrations] = useState<SentryApp[]>([]);\n  const [selectedItem, selectItem] = useState<Pick<Item, 'label' | 'value'> | null>(null);\n\n  useEffect(() => {\n    if (!isLoading && data.internalIntegrations) {\n      setIntegrations(data.internalIntegrations);\n    }\n  }, [isLoading, data.internalIntegrations]);\n  useEffect(() => {\n    trackAdvancedAnalyticsEvent('releases.quickstart_viewed', {\n      organization,\n      project_id: project.id,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const trackQuickstartCopy = useCallback(() => {\n    trackAdvancedAnalyticsEvent('releases.quickstart_copied', {\n      organization,\n      project_id: project.id,\n    });\n  }, [organization, project]);\n\n  const trackQuickstartCreatedIntegration = useCallback(\n    (integration: SentryApp) => {\n      trackAdvancedAnalyticsEvent('releases.quickstart_create_integration.success', {\n        organization,\n        project_id: project.id,\n        integration_uuid: integration.uuid,\n      });\n    },\n    [organization, project]\n  );\n\n  const trackCreateIntegrationModalClose = useCallback(() => {\n    trackAdvancedAnalyticsEvent('releases.quickstart_create_integration_modal.close', {\n      organization,\n      project_id: project.id,\n    });\n  }, [organization, project.id]);\n\n  const fetchToken = async sentryAppSlug => {\n    const tokens = await api.requestPromise(`/sentry-apps/${sentryAppSlug}/api-tokens/`);\n    if (!tokens.length) {\n      const newToken = await generateToken(sentryAppSlug);\n      return setToken(newToken);\n    }\n    return setToken(tokens[0].token);\n  };\n\n  const generateToken = async (sentryAppSlug: string) => {\n    const newToken = await api.requestPromise(\n      `/sentry-apps/${sentryAppSlug}/api-tokens/`,\n      {\n        method: 'POST',\n      }\n    );\n    return newToken.token;\n  };\n\n  const handleCopy = async () => {\n    if (!token || !selectedItem) {\n      addErrorMessage(t('Select an integration for your auth token!'));\n      return;\n    }\n    const current_text = `\n      # Install the cli\n      curl -sL https://sentry.io/get-cli/ | SENTRY_CLI_VERSION=\"2.2.0\" bash\n      # Setup configuration values\n      SENTRY_AUTH_TOKEN=${token} # From internal integration: ${selectedItem.value.name}\n      SENTRY_ORG=${organization.slug}\n      SENTRY_PROJECT=${project.slug}\n      VERSION=\\`sentry-cli releases propose-version\\`\n      # Workflow to create releases\n      sentry-cli releases new \"$VERSION\"\n      sentry-cli releases set-commits \"$VERSION\" --auto\n      sentry-cli releases finalize \"$VERSION\"\n      `;\n    await navigator.clipboard.writeText(current_text);\n    addSuccessMessage(t('Copied to clipboard!'));\n    trackQuickstartCopy();\n  };\n\n  const renderIntegrationNode = (integration: SentryApp) => {\n    return {\n      value: {slug: integration.slug, name: integration.name},\n      searchKey: `${integration.name}`,\n      label: (\n        <MenuItemWrapper data-test-id=\"integration-option\" key={integration.uuid}>\n          <Label>{integration.name}</Label>\n        </MenuItemWrapper>\n      ),\n    };\n  };\n  return renderComponent(\n    <Panel>\n      <Container>\n        <StyledPageHeader>\n          <h3>{t('Set up Releases')}</h3>\n\n          <Button priority=\"default\" size=\"sm\" href={releasesSetupUrl} external>\n            {t('Full Documentation')}\n          </Button>\n        </StyledPageHeader>\n\n        <p>\n          {t(\n            'Find which release caused an issue, apply source maps, and get notified about your deploys.'\n          )}\n        </p>\n        <p>\n          {t(\n            'Add the following commands to your CI config when you deploy your application.'\n          )}\n        </p>\n\n        <CodeBlock>\n          <CopyButton onClick={handleCopy}>\n            <IconCopy />\n          </CopyButton>\n          <Comment># Install the cli</Comment>\n          <Bash>\n            curl -sL https://sentry.io/get-cli/ | SENTRY_CLI_VERSION=\"2.2.0\" bash\n          </Bash>\n          <Bash>{'\\n'}</Bash>\n          <Comment># Setup configuration values</Comment>\n          <Bash>\n            SENTRY_AUTH_TOKEN=\n            <StyledDropdownAutoComplete\n              minWidth={300}\n              maxHeight={400}\n              onOpen={e => {\n                // This can be called multiple times and does not always have `event`\n                e?.stopPropagation();\n              }}\n              items={[\n                {\n                  label: <GroupHeader>{t('Available Integrations')}</GroupHeader>,\n                  id: 'available-integrations',\n                  items: (integrations || []).map(renderIntegrationNode),\n                },\n              ]}\n              alignMenu=\"left\"\n              onSelect={({label, value}) => {\n                selectItem({label, value});\n                fetchToken(value.slug);\n              }}\n              itemSize=\"small\"\n              searchPlaceholder={t('Select Internal Integration')}\n              menuFooter={\n                <Access access={['org:integrations']}>\n                  {({hasAccess}) => (\n                    <Tooltip\n                      title={t(\n                        'You must be an organization owner, manager or admin to create an integration.'\n                      )}\n                      disabled={hasAccess}\n                    >\n                      <CreateIntegrationLink\n                        to=\"\"\n                        data-test-id=\"create-release-integration\"\n                        disabled={!hasAccess}\n                        onClick={() =>\n                          openCreateReleaseIntegration({\n                            organization,\n                            project,\n                            onCreateSuccess: (integration: SentryApp) => {\n                              setIntegrations([integration, ...integrations]);\n                              const {label, value} = renderIntegrationNode(integration);\n                              selectItem({\n                                label,\n                                value,\n                              });\n                              fetchToken(value.slug);\n                              trackQuickstartCreatedIntegration(integration);\n                            },\n                            onCancel: () => {\n                              trackCreateIntegrationModalClose();\n                            },\n                          })\n                        }\n                      >\n                        <MenuItemFooterWrapper>\n                          <IconContainer>\n                            <IconAdd color=\"purple300\" isCircled size=\"14px\" />\n                          </IconContainer>\n                          <Label>{t('Create New Integration')}</Label>\n                        </MenuItemFooterWrapper>\n                      </CreateIntegrationLink>\n                    </Tooltip>\n                  )}\n                </Access>\n              }\n              disableLabelPadding\n              emptyHidesInput\n            >\n              {() => {\n                return token && selectedItem ? (\n                  <span style={{display: 'flex'}}>\n                    <Bash>{token}</Bash>\n                    <Comment>{` # From internal integration: ${selectedItem.value.name} `}</Comment>\n                  </span>\n                ) : (\n                  <Bash style={{color: '#7cc5c4'}}>{'<click-here-for-your-token>'}</Bash>\n                );\n              }}\n            </StyledDropdownAutoComplete>\n          </Bash>\n\n          <Bash>{`SENTRY_ORG=${organization.slug}`}</Bash>\n          <Bash>{`SENTRY_PROJECT=${project.slug}`}</Bash>\n          <Bash>VERSION=`sentry-cli releases propose-version`</Bash>\n          <Bash>{'\\n'}</Bash>\n          <Comment># Workflow to create releases</Comment>\n          <Bash>sentry-cli releases new \"$VERSION\"</Bash>\n          <Bash>sentry-cli releases set-commits \"$VERSION\" --auto</Bash>\n          <Bash>sentry-cli releases finalize \"$VERSION\"</Bash>\n        </CodeBlock>\n      </Container>\n    </Panel>\n  );\n};\n\nconst StyledPageHeader = styled(PageHeader)`\n  margin-bottom: ${space(3)};\n\n  h3 {\n    margin: 0;\n  }\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    flex-direction: column;\n    align-items: flex-start;\n\n    h3 {\n      margin-bottom: ${space(2)};\n    }\n  }\n`;\n\nconst CodeBlock = styled('pre')`\n  background: #251f3d;\n  display: flex;\n  flex-direction: column;\n  padding: ${space(2)};\n  overflow: initial;\n  position: relative;\n`;\n\nconst CopyButton = styled(Button)`\n  position: absolute;\n  right: 20px;\n`;\nconst Language = styled('code')`\n  font-size: 15px;\n  text-shadow: none;\n  direction: ltr;\n  text-align: left;\n  white-space: pre;\n  word-spacing: normal;\n  word-break: normal;\n  line-height: 1.5;\n  display: flex;\n  align-items: center;\n`;\nconst Bash = styled(Language)`\n  color: #f2edf6;\n`;\n\nconst Comment = styled(Language)`\n  color: #77658b;\n`;\nconst Container = styled('div')`\n  padding: ${space(3)};\n`;\n\nconst StyledDropdownAutoComplete = styled(DropdownAutoComplete)`\n  font-family: ${p => p.theme.text.family};\n  border: none;\n  border-radius: 4px;\n  width: 300px;\n`;\nconst GroupHeader = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-family: ${p => p.theme.text.family};\n  font-weight: 600;\n  margin: ${space(1)} 0;\n  color: ${p => p.theme.subText};\n  line-height: ${p => p.theme.fontSizeSmall};\n  text-align: left;\n`;\nconst CreateIntegrationLink = styled(Link)`\n  color: ${p => (p.disabled ? p.theme.disabled : p.theme.textColor)};\n`;\n\nconst MenuItemWrapper = styled('div')<{\n  disabled?: boolean;\n  py?: number;\n}>`\n  cursor: ${p => (p.disabled ? 'not-allowed' : 'pointer')};\n  display: flex;\n  align-items: center;\n  font-family: ${p => p.theme.text.family};\n  font-size: 13px;\n  ${p =>\n    typeof p.py !== 'undefined' &&\n    `\n      padding-top: ${p.py};\n      padding-bottom: ${p.py};\n    `};\n`;\n\nconst MenuItemFooterWrapper = styled(MenuItemWrapper)`\n  padding: ${space(0.25)} ${space(1)};\n  border-top: 1px solid ${p => p.theme.innerBorder};\n  background-color: ${p => p.theme.tag.highlight.background};\n  color: ${p => p.theme.active};\n  :hover {\n    color: ${p => p.theme.activeHover};\n    svg {\n      fill: ${p => p.theme.activeHover};\n    }\n  }\n`;\n\nconst IconContainer = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 24px;\n  height: 24px;\n  flex-shrink: 0;\n`;\n\nconst Label = styled(TextOverflow)`\n  margin-left: 6px;\n`;\n\nexport default ReleasesPromo;\n"],"names":["useEffectAfterFirstRender","cb","deps","firstRender","useRef","useEffect","current","useLocation","useRouteContext","location","useParams","params","renderLoading","releasesSetupUrl","docsLink","external","href","t","RELEASES_TOUR_STEPS","title","image","src","body","actions","StyledPageHeader","PageHeader","space","p","theme","breakpoints","small","CodeBlock","CopyButton","Button","Language","Bash","Comment","Container","StyledDropdownAutoComplete","DropdownAutoComplete","text","family","GroupHeader","fontSizeSmall","subText","CreateIntegrationLink","Link","disabled","textColor","MenuItemWrapper","py","MenuItemFooterWrapper","innerBorder","tag","highlight","background","active","activeHover","IconContainer","Label","TextOverflow","organization","project","data","renderComponent","isLoading","endpoints","reloadOnVisible","shouldReload","shouldRenderBadRequests","disableErrorReport","onLoadAllEndpointsSuccess","onRequestSuccess","_data","onRequestError","_error","_args","api","useApi","initialState","useMemo","hasError","isReloading","errors","remainingRequests","length","state","setState","useState","triggerMeasurement","routes","useRoutes","measurement","hasMeasured","finished","error","metric","name","getRouteStringFromRoutes","useCallback","routeString","start","route","useMeasureApiRequests","handleRequestSuccess","initialRequest","stateKey","resp","prevState","newState","getResponseHeader","handleError","args","responseText","Sentry","message","category","level","fetchData","async","extraState","clear","Promise","all","map","endpoint","parameters","options","locationQuery","query","paginate","cursor","disableEntireQuery","results","requestPromise","method","includeAllArgs","_","reloadData","handleMount","handleFullReload","search","visibilityReloader","document","hidden","addEventListener","removeEventListener","renderError","disableLog","unauthorizedErrors","Object","values","some","status","permissionErrors","shouldLogSentry","badRequests","filter","responseJSON","detail","Set","join","disableLogSentry","disableReport","shouldRenderLoading","children","Error","useApiRequests","slug","token","setToken","integrations","setIntegrations","selectedItem","selectItem","internalIntegrations","trackAdvancedAnalyticsEvent","project_id","id","trackQuickstartCopy","trackQuickstartCreatedIntegration","integration","integration_uuid","uuid","trackCreateIntegrationModalClose","fetchToken","tokens","sentryAppSlug","newToken","generateToken","renderIntegrationNode","value","searchKey","label","priority","size","onClick","addErrorMessage","current_text","navigator","clipboard","writeText","addSuccessMessage","minWidth","maxHeight","onOpen","e","stopPropagation","items","alignMenu","onSelect","itemSize","searchPlaceholder","menuFooter","access","hasAccess","to","openCreateReleaseIntegration","onCreateSuccess","onCancel","color","isCircled","disableLabelPadding","emptyHidesInput","style","display"],"sourceRoot":""}