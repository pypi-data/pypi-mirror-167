{"version":3,"file":"chunks/app_views_settings_organizationDeveloperSettings_sentryFunctionDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/settings/organizationDeveloperSettings/sentryFunctionsEnvironmentVariables.tsx","webpack:///./app/views/settings/organizationDeveloperSettings/sentryFunctionSubscriptions.tsx","webpack:///./app/views/settings/organizationDeveloperSettings/sentryFunctionDetails.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport {InputField} from 'sentry/components/forms';\nimport {PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {IconAdd, IconDelete} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  envVariables: {\n    name: string;\n    value: string;\n  }[];\n  setEnvVariables: (envVariables) => void;\n};\n\nfunction SentryFunctionEnvironmentVariables(props: Props) {\n  const {envVariables, setEnvVariables} = props;\n\n  const addEnvVar = () => {\n    setEnvVariables([...envVariables, {name: '', value: ''}]);\n  };\n\n  const handleNameChange = (value: string, pos: number) => {\n    const newEnvVariables = [...envVariables];\n    while (newEnvVariables.length <= pos) {\n      newEnvVariables.push({name: '', value: ''});\n    }\n    newEnvVariables[pos] = {...newEnvVariables[pos], name: value};\n    setEnvVariables(newEnvVariables);\n  };\n\n  const handleValueChange = (value: string, pos: number) => {\n    const newEnvVariables = [...envVariables];\n    while (newEnvVariables.length <= pos) {\n      newEnvVariables.push({name: '', value: ''});\n    }\n    newEnvVariables[pos] = {...newEnvVariables[pos], value};\n    setEnvVariables(newEnvVariables);\n  };\n\n  const removeEnvVar = (pos: number) => {\n    const newEnvVariables = [...envVariables];\n    newEnvVariables.splice(pos, 1);\n    setEnvVariables(newEnvVariables);\n  };\n\n  return (\n    <div>\n      <PanelHeader>\n        {t('Environment Variables')}\n        <StyledAddButton\n          size=\"sm\"\n          type=\"button\"\n          icon={<IconAdd isCircled />}\n          aria-label={t('Add Environment Variable')}\n          onClick={addEnvVar}\n        />\n      </PanelHeader>\n      <StyledPanelBody>\n        <EnvironmentVariableWrapper>\n          <EnvHeader>{t('Name')}</EnvHeader>\n          <EnvHeaderRight>{t('Value')}</EnvHeaderRight>\n        </EnvironmentVariableWrapper>\n        {envVariables.map((envVariable, i) => {\n          return (\n            <EnvironmentVariableWrapper key={i}>\n              <InputField\n                name={`env-variable-name-${i}`}\n                type=\"text\"\n                required={false}\n                inline={false}\n                defaultValue={envVariable.name}\n                value={envVariable.name}\n                stacked\n                onChange={e => handleNameChange(e, i)}\n              />\n              <InputField\n                name={`env-variable-value-${i}`}\n                type=\"text\"\n                required={false}\n                inline={false}\n                defaultValue={envVariable.value}\n                value={envVariable.value}\n                stacked\n                onChange={e => handleValueChange(e, i)}\n              />\n              <ButtonHolder>\n                <StyledAddButton\n                  size=\"sm\"\n                  icon={<IconDelete />}\n                  type=\"button\"\n                  aria-label={tct('Remove Environment Variable [i]', {i})}\n                  onClick={() => removeEnvVar(i)}\n                />\n              </ButtonHolder>\n            </EnvironmentVariableWrapper>\n          );\n        })}\n      </StyledPanelBody>\n    </div>\n  );\n}\n\nexport default SentryFunctionEnvironmentVariables;\n\nconst EnvironmentVariableWrapper = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr 1.5fr min-content;\n`;\n\nconst StyledAddButton = styled(Button)`\n  float: right;\n`;\n\nconst EnvHeader = styled('div')`\n  text-align: left;\n  margin-top: ${space(2)};\n  margin-bottom: ${space(1)};\n  color: ${p => p.theme.gray400};\n`;\n\nconst EnvHeaderRight = styled(EnvHeader)`\n  margin-left: -${space(2)};\n`;\n\nconst ButtonHolder = styled('div')`\n  align-items: center;\n  display: flex;\n  margin-bottom: ${space(2)};\n`;\n\nconst StyledPanelBody = styled(PanelBody)`\n  padding: ${space(2)};\n`;\n","import styled from '@emotion/styled';\n\nimport {EVENT_CHOICES} from './constants';\nimport SubscriptionBox from './subscriptionBox';\n\ntype Resource = typeof EVENT_CHOICES[number];\n\ntype Props = {\n  events: string[];\n  setEvents: (events: string[]) => void;\n};\n\nfunction SentryFunctionSubscriptions(props: Props) {\n  const {events, setEvents} = props;\n\n  function onChange(resource: Resource, checked: boolean) {\n    if (checked && !events.includes(resource)) {\n      setEvents(events.concat(resource));\n    } else if (!checked && events.includes(resource)) {\n      setEvents(events.filter(e => e !== resource));\n    }\n  }\n\n  return (\n    <SentryFunctionsSubscriptionGrid>\n      {EVENT_CHOICES.map(resource => (\n        <SubscriptionBox\n          key={resource}\n          disabledFromPermissions={false}\n          webhookDisabled={false}\n          checked={props.events.includes(resource)}\n          resource={resource}\n          onChange={onChange}\n          isNew={resource === 'comment'}\n        />\n      ))}\n    </SentryFunctionsSubscriptionGrid>\n  );\n}\n\nexport default SentryFunctionSubscriptions;\nconst SentryFunctionsSubscriptionGrid = styled('div')`\n  display: grid;\n  grid-template: auto / 1fr 1fr 1fr;\n  @media (max-width: ${props => props.theme.breakpoints.large}) {\n    grid-template: 1fr 1fr 1fr / auto;\n  }\n`;\n","import {useEffect, useState} from 'react';\nimport {browserHistory} from 'react-router';\nimport Editor from '@monaco-editor/react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport Feature from 'sentry/components/acl/feature';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport FormModel from 'sentry/components/forms/model';\nimport {Field} from 'sentry/components/forms/type';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport {SentryFunction} from 'sentry/types';\n\nimport SentryFunctionEnvironmentVariables from './sentryFunctionsEnvironmentVariables';\nimport SentryFunctionSubscriptions from './sentryFunctionSubscriptions';\n\nclass SentryFunctionFormModel extends FormModel {\n  getTransformedData() {\n    const data = super.getTransformedData() as Record<string, any>;\n\n    const events: string[] = [];\n    if (data.onIssue) {\n      events.push('issue');\n    }\n    if (data.onError) {\n      events.push('error');\n    }\n    if (data.onComment) {\n      events.push('comment');\n    }\n    delete data.onIssue;\n    delete data.onError;\n    delete data.onComment;\n    data.events = events;\n\n    const envVariables: EnvVariable[] = [];\n    let i = 0;\n    while (data[`env-variable-name-${i}`]) {\n      if (data[`env-variable-value-${i}`]) {\n        envVariables.push({\n          name: data[`env-variable-name-${i}`],\n          value: data[`env-variable-value-${i}`],\n        });\n      }\n      delete data[`env-variable-name-${i}`];\n      delete data[`env-variable-value-${i}`];\n      i++;\n    }\n    data.envVariables = envVariables;\n\n    const {...output} = data;\n    return output;\n  }\n}\n\ntype Props = {\n  sentryFunction?: SentryFunction;\n} & WrapperProps;\n\ntype EnvVariable = {\n  name: string;\n  value: string;\n};\nconst formFields: Field[] = [\n  {\n    name: 'name',\n    type: 'string',\n    required: true,\n    placeholder: 'e.g. My Sentry Function',\n    label: 'Name',\n    help: 'Human readable name of your Sentry Function',\n  },\n  {\n    name: 'author',\n    type: 'string',\n    placeholder: 'e.g. Acme Software',\n    label: 'Author',\n    help: 'The company or person who built and maintains this Sentry Function.',\n  },\n  {\n    name: 'overview',\n    type: 'string',\n    placeholder: 'e.g. This Sentry Function does something useful',\n    label: 'Overview',\n    help: 'A short description of your Sentry Function.',\n  },\n];\n\nfunction SentryFunctionDetails(props: Props) {\n  const [form] = useState(() => new SentryFunctionFormModel());\n\n  const {orgId, functionSlug} = props.params;\n  const {sentryFunction} = props;\n  const method = functionSlug ? 'PUT' : 'POST';\n  let endpoint = `/organizations/${orgId}/functions/`;\n  if (functionSlug) {\n    endpoint += `${functionSlug}/`;\n  }\n  const defaultCode = sentryFunction\n    ? sentryFunction.code\n    : `exports.yourFunction = (req, res) => {\n    let message = req.query.message || req.body.message || 'Hello World!';\n    console.log('Query: ' + req.query);\n    console.log('Body: ' + req.body);\n    res.status(200).send(message);\n  };`;\n\n  const [events, setEvents] = useState(sentryFunction?.events || []);\n\n  useEffect(() => {\n    form.setValue('onIssue', events.includes('issue'));\n    form.setValue('onError', events.includes('error'));\n    form.setValue('onComment', events.includes('comment'));\n  }, [form, events]);\n\n  const [envVariables, setEnvVariables] = useState(\n    sentryFunction?.env_variables?.length\n      ? sentryFunction?.env_variables\n      : [{name: '', value: ''}]\n  );\n\n  const handleSubmitError = err => {\n    let errorMessage = t('Unknown Error');\n    if (err.status >= 400 && err.status < 500) {\n      errorMessage = err?.responseJSON.detail ?? errorMessage;\n    }\n    addErrorMessage(errorMessage);\n  };\n\n  const handleSubmitSuccess = data => {\n    addSuccessMessage(t('Sentry Function successfully saved.', data.name));\n    const baseUrl = `/settings/${orgId}/developer-settings/sentry-functions/`;\n    const url = `${baseUrl}${data.slug}/`;\n    if (sentryFunction) {\n      addSuccessMessage(t('%s successfully saved.', data.name));\n    } else {\n      addSuccessMessage(t('%s successfully created.', data.name));\n    }\n    browserHistory.push(url);\n  };\n\n  function handleEditorChange(value, _event) {\n    form.setValue('code', value);\n  }\n\n  return (\n    <div>\n      <Feature features={['organizations:sentry-functions']}>\n        <h2>\n          {sentryFunction ? t('Editing Sentry Function') : t('Create Sentry Function')}\n        </h2>\n        <Form\n          apiMethod={method}\n          apiEndpoint={endpoint}\n          model={form}\n          onPreSubmit={() => {\n            addLoadingMessage(t('Saving changes..'));\n          }}\n          initialData={{\n            code: defaultCode,\n            events,\n            envVariables,\n            ...props.sentryFunction,\n          }}\n          onSubmitError={handleSubmitError}\n          onSubmitSuccess={handleSubmitSuccess}\n        >\n          <JsonForm forms={[{title: t('Sentry Function Details'), fields: formFields}]} />\n          <Panel>\n            <PanelHeader>{t('Webhooks')}</PanelHeader>\n            <PanelBody>\n              <SentryFunctionSubscriptions events={events} setEvents={setEvents} />\n            </PanelBody>\n          </Panel>\n          <Panel>\n            <SentryFunctionEnvironmentVariables\n              envVariables={envVariables}\n              setEnvVariables={setEnvVariables}\n            />\n          </Panel>\n          <Panel>\n            <PanelHeader>{t('Write your Code Below')}</PanelHeader>\n            <PanelBody>\n              <Editor\n                height=\"40vh\"\n                theme=\"light\"\n                defaultLanguage=\"javascript\"\n                defaultValue={defaultCode}\n                onChange={handleEditorChange}\n                options={{\n                  minimap: {\n                    enabled: false,\n                  },\n                  scrollBeyondLastLine: false,\n                }}\n              />\n            </PanelBody>\n          </Panel>\n        </Form>\n      </Feature>\n    </div>\n  );\n}\n\ntype WrapperState = {\n  sentryFunction?: SentryFunction;\n} & AsyncComponent['state'];\n\ntype WrapperProps = {\n  params: {orgId: string; functionSlug?: string};\n} & AsyncComponent['props'];\n\nclass SentryFunctionsWrapper extends AsyncComponent<WrapperProps, WrapperState> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {functionSlug, orgId} = this.props.params;\n    if (functionSlug) {\n      return [['sentryFunction', `/organizations/${orgId}/functions/${functionSlug}/`]];\n    }\n    return [];\n  }\n  renderBody() {\n    return (\n      <SentryFunctionDetails sentryFunction={this.state.sentryFunction} {...this.props} />\n    );\n  }\n}\n\nexport default SentryFunctionsWrapper;\n"],"names":["SentryFunctionEnvironmentVariables","props","envVariables","setEnvVariables","t","StyledAddButton","size","type","icon","isCircled","onClick","name","value","StyledPanelBody","EnvironmentVariableWrapper","EnvHeader","EnvHeaderRight","map","envVariable","i","required","inline","defaultValue","stacked","onChange","e","pos","newEnvVariables","length","push","handleNameChange","handleValueChange","ButtonHolder","tct","splice","removeEnvVar","Button","space","p","theme","gray400","PanelBody","SentryFunctionSubscriptions","events","setEvents","resource","checked","includes","concat","filter","SentryFunctionsSubscriptionGrid","EVENT_CHOICES","disabledFromPermissions","webhookDisabled","isNew","breakpoints","large","SentryFunctionFormModel","FormModel","getTransformedData","data","super","onIssue","onError","onComment","output","formFields","placeholder","label","help","SentryFunctionDetails","form","useState","orgId","functionSlug","params","sentryFunction","method","endpoint","defaultCode","code","useEffect","setValue","env_variables","features","apiMethod","apiEndpoint","model","onPreSubmit","addLoadingMessage","initialData","onSubmitError","err","errorMessage","status","responseJSON","detail","addErrorMessage","onSubmitSuccess","addSuccessMessage","url","slug","browserHistory","forms","title","fields","height","defaultLanguage","_event","options","minimap","enabled","scrollBeyondLastLine","SentryFunctionsWrapper","AsyncComponent","getEndpoints","this","renderBody","state"],"sourceRoot":""}