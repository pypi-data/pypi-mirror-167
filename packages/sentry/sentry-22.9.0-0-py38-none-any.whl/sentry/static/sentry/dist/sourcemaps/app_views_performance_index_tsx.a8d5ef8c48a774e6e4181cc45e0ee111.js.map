{"version":3,"file":"chunks/app_views_performance_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/discover/genericDiscoverQuery.tsx","webpack:///./app/utils/performance/metricsEnhanced/metricsCompatibilityQuery.tsx","webpack:///./app/utils/performance/metricsEnhanced/metricsCompatibilityQuerySums.tsx","webpack:///./app/utils/performance/contexts/metricsCardinality.tsx","webpack:///./app/utils/performance/contexts/metricsEnhancedSetting.tsx","webpack:///./app/utils/performance/contexts/performanceEventViewContext.tsx","webpack:///./app/utils/performance/contexts/utils.tsx","webpack:///./app/views/performance/index.tsx"],"sourcesContent":["import {Component, useContext} from 'react';\nimport {Location} from 'history';\n\nimport {EventQuery} from 'sentry/actionCreators/events';\nimport {Client, ResponseMeta} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport EventView, {\n  ImmutableEventView,\n  isAPIPayloadSimilar,\n  LocationQuery,\n} from 'sentry/utils/discover/eventView';\nimport {QueryBatching} from 'sentry/utils/performance/contexts/genericQueryBatcher';\nimport {PerformanceEventViewContext} from 'sentry/utils/performance/contexts/performanceEventViewContext';\nimport {OrganizationContext} from 'sentry/views/organizationContext';\n\nexport class QueryError {\n  message: string;\n  private originalError: any; // For debugging in case parseError picks a value that doesn't make sense.\n  constructor(errorMessage: string, originalError?: any) {\n    this.message = errorMessage;\n    this.originalError = originalError;\n  }\n\n  getOriginalError() {\n    return this.originalError;\n  }\n}\n\nexport type GenericChildrenProps<T> = {\n  /**\n   * Error, if not null.\n   */\n  error: null | QueryError;\n  /**\n   * Loading state of this query.\n   */\n  isLoading: boolean;\n  /**\n   * Pagelinks, if applicable. Can be provided to the Pagination component.\n   */\n  pageLinks: null | string;\n  /**\n   * Data / result.\n   */\n  tableData: T | null;\n};\n\ntype OptionalContextProps = {\n  eventView?: EventView | ImmutableEventView;\n  orgSlug?: string;\n};\n\ntype BaseDiscoverQueryProps = {\n  api: Client;\n  /**\n   * Used as the default source for cursor values.\n   */\n  location: Location;\n  /**\n   * Explicit cursor value if you aren't using `location.query.cursor` because there are\n   * multiple paginated results on the page.\n   */\n  cursor?: string;\n  /**\n   * Appends a raw string to query to be able to sidestep the tokenizer.\n   * @deprecated\n   */\n  forceAppendRawQueryString?: string;\n  /**\n   * Record limit to get.\n   */\n  limit?: number;\n  /**\n   * Include this whenever pagination won't be used. Limit can still be used when this is\n   * passed, but cursor will be ignored.\n   */\n  noPagination?: boolean;\n  /**\n   * A container for query batching data and functions.\n   */\n  queryBatching?: QueryBatching;\n  /**\n   * Extra query parameters to be added.\n   */\n  queryExtras?: Record<string, string>;\n  /**\n   * Sets referrer parameter in the API Payload. Set of allowed referrers are defined\n   * on the OrganizationEventsV2Endpoint view.\n   */\n  referrer?: string;\n  /**\n   * A callback to set an error so that the error can be rendered in parent components\n   */\n  setError?: (errObject: QueryError | undefined) => void;\n};\n\nexport type DiscoverQueryPropsWithContext = BaseDiscoverQueryProps & OptionalContextProps;\nexport type DiscoverQueryProps = BaseDiscoverQueryProps & {\n  eventView: EventView | ImmutableEventView;\n  orgSlug: string;\n};\n\ntype InnerRequestProps<P> = DiscoverQueryProps & P;\ntype OuterRequestProps<P> = DiscoverQueryPropsWithContext & P;\n\nexport type ReactProps<T> = {\n  children?: (props: GenericChildrenProps<T>) => React.ReactNode;\n};\n\ntype ComponentProps<T, P> = {\n  /**\n   * Route to the endpoint\n   */\n  route: string;\n  /**\n   * A hook to modify data into the correct output after data has been received\n   */\n  afterFetch?: (data: any, props?: Props<T, P>) => T;\n  /**\n   * A hook before fetch that can be used to do things like clearing the api\n   */\n  beforeFetch?: (api: Client) => void;\n  /**\n   * A hook for parent orchestrators to pass down data based on query results, unlike afterFetch it is not meant for specializations as it will not modify data.\n   */\n  didFetch?: (data: T) => void;\n  /**\n   * Allows components to modify the payload before it is set.\n   */\n  getRequestPayload?: (props: Props<T, P>) => any;\n  /**\n   * An external hook to parse errors in case there are differences for a specific api.\n   */\n  parseError?: (error: any) => QueryError | null;\n  /**\n   * An external hook in addition to the event view check to check if data should be refetched\n   */\n  shouldRefetchData?: (prevProps: Props<T, P>, props: Props<T, P>) => boolean;\n};\n\ntype Props<T, P> = InnerRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\ntype OuterProps<T, P> = OuterRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\n\ntype State<T> = {\n  tableFetchID: symbol | undefined;\n} & GenericChildrenProps<T>;\n\n/**\n * Generic component for discover queries\n */\nclass _GenericDiscoverQuery<T, P> extends Component<Props<T, P>, State<T>> {\n  state: State<T> = {\n    isLoading: true,\n    tableFetchID: undefined,\n    error: null,\n\n    tableData: null,\n    pageLinks: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props<T, P>) {\n    // Reload data if the payload changes\n    const refetchCondition = this._shouldRefetchData(prevProps);\n\n    // or if we've moved from an invalid view state to a valid one,\n    const eventViewValidation =\n      prevProps.eventView.isValid() === false && this.props.eventView.isValid();\n\n    const shouldRefetchExternal = this.props.shouldRefetchData\n      ? this.props.shouldRefetchData(prevProps, this.props)\n      : false;\n\n    if (refetchCondition || eventViewValidation || shouldRefetchExternal) {\n      this.fetchData();\n    }\n  }\n\n  getPayload(props: Props<T, P>) {\n    const {cursor, limit, noPagination, referrer} = props;\n    const payload = this.props.getRequestPayload\n      ? this.props.getRequestPayload(props)\n      : props.eventView.getEventsAPIPayload(\n          props.location,\n          props.forceAppendRawQueryString\n        );\n\n    if (cursor) {\n      payload.cursor = cursor;\n    }\n    if (limit) {\n      payload.per_page = limit;\n    }\n    if (noPagination) {\n      payload.noPagination = noPagination;\n    }\n    if (referrer) {\n      payload.referrer = referrer;\n    }\n\n    Object.assign(payload, props.queryExtras ?? {});\n\n    return payload;\n  }\n\n  _shouldRefetchData = (prevProps: Props<T, P>): boolean => {\n    const thisAPIPayload = this.getPayload(this.props);\n    const otherAPIPayload = this.getPayload(prevProps);\n\n    return (\n      !isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload) ||\n      prevProps.limit !== this.props.limit ||\n      prevProps.route !== this.props.route ||\n      prevProps.cursor !== this.props.cursor\n    );\n  };\n\n  /**\n   * The error type isn't consistent across APIs. We see detail as just string some times, other times as an object.\n   */\n  _parseError = (error: any): QueryError | null => {\n    if (this.props.parseError) {\n      return this.props.parseError(error);\n    }\n\n    if (!error) {\n      return null;\n    }\n\n    const detail = error.responseJSON?.detail;\n    if (typeof detail === 'string') {\n      return new QueryError(detail, error);\n    }\n\n    const message = detail?.message;\n    if (typeof message === 'string') {\n      return new QueryError(message, error);\n    }\n\n    const unknownError = new QueryError(t('An unknown error occurred.'), error);\n    return unknownError;\n  };\n\n  fetchData = async () => {\n    const {\n      api,\n      queryBatching,\n      beforeFetch,\n      afterFetch,\n      didFetch,\n      eventView,\n      orgSlug,\n      route,\n      setError,\n    } = this.props;\n\n    if (!eventView.isValid()) {\n      return;\n    }\n\n    const url = `/organizations/${orgSlug}/${route}/`;\n    const tableFetchID = Symbol(`tableFetchID`);\n    const apiPayload: Partial<EventQuery & LocationQuery> = this.getPayload(this.props);\n\n    this.setState({isLoading: true, tableFetchID});\n\n    setError?.(undefined);\n\n    beforeFetch?.(api);\n\n    // clear any inflight requests since they are now stale\n    api.clear();\n\n    try {\n      const [data, , resp] = await doDiscoverQuery<T>(\n        api,\n        url,\n        apiPayload,\n        queryBatching\n      );\n\n      if (this.state.tableFetchID !== tableFetchID) {\n        // invariant: a different request was initiated after this request\n        return;\n      }\n\n      const tableData = afterFetch ? afterFetch(data, this.props) : data;\n      didFetch?.(tableData);\n\n      this.setState(prevState => ({\n        isLoading: false,\n        tableFetchID: undefined,\n        error: null,\n        pageLinks: resp?.getResponseHeader('Link') ?? prevState.pageLinks,\n        tableData,\n      }));\n    } catch (err) {\n      const error = this._parseError(err);\n      this.setState({\n        isLoading: false,\n        tableFetchID: undefined,\n        error,\n        tableData: null,\n      });\n      if (setError) {\n        setError(error ?? undefined);\n      }\n    }\n  };\n\n  render() {\n    const {isLoading, error, tableData, pageLinks} = this.state;\n\n    const childrenProps: GenericChildrenProps<T> = {\n      isLoading,\n      error,\n      tableData,\n      pageLinks,\n    };\n    const children: ReactProps<T>['children'] = this.props.children; // Explicitly setting type due to issues with generics and React's children\n    return children?.(childrenProps);\n  }\n}\n\n// Shim to allow us to use generic discover query or any specialization with or without passing org slug or eventview, which are now contexts.\n// This will help keep tests working and we can remove extra uses of context-provided props and update tests as we go.\nexport function GenericDiscoverQuery<T, P>(props: OuterProps<T, P>) {\n  const organizationSlug = useContext(OrganizationContext)?.slug;\n  const performanceEventView = useContext(PerformanceEventViewContext)?.eventView;\n\n  const orgSlug = props.orgSlug ?? organizationSlug;\n  const eventView = props.eventView ?? performanceEventView;\n\n  if (orgSlug === undefined || eventView === undefined) {\n    throw new Error('GenericDiscoverQuery requires both an orgSlug and eventView');\n  }\n\n  const _props: Props<T, P> = {\n    ...props,\n    orgSlug,\n    eventView,\n  };\n  return <_GenericDiscoverQuery<T, P> {..._props} />;\n}\n\nexport type DiscoverQueryRequestParams = Partial<EventQuery & LocationQuery>;\n\nexport function doDiscoverQuery<T>(\n  api: Client,\n  url: string,\n  params: DiscoverQueryRequestParams,\n  queryBatching?: QueryBatching\n): Promise<[T, string | undefined, ResponseMeta<T> | undefined]> {\n  if (queryBatching?.batchRequest) {\n    return queryBatching.batchRequest(api, url, {\n      query: params,\n      includeAllArgs: true,\n    });\n  }\n\n  return api.requestPromise(url, {\n    method: 'GET',\n    includeAllArgs: true,\n    query: {\n      // marking params as any so as to not cause typescript errors\n      ...(params as any),\n    },\n  });\n}\n\nexport default GenericDiscoverQuery;\n","import omit from 'lodash/omit';\n\nimport EventView from 'sentry/utils/discover/eventView';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport useApi from 'sentry/utils/useApi';\n\nexport interface MetricsCompatibilityData {\n  compatible_projects?: number[];\n  dynamic_sampling_projects?: number[];\n}\n\ntype QueryProps = Omit<DiscoverQueryProps, 'eventView' | 'api'> & {\n  children: (props: GenericChildrenProps<MetricsCompatibilityData>) => React.ReactNode;\n  eventView: EventView;\n};\n\nfunction getRequestPayload({\n  eventView,\n  location,\n}: Pick<DiscoverQueryProps, 'eventView' | 'location'>) {\n  return omit(eventView.getEventsAPIPayload(location), [\n    'field',\n    'sort',\n    'per_page',\n    'query',\n  ]);\n}\n\nexport default function MetricsCompatibilityQuery({children, ...props}: QueryProps) {\n  const api = useApi();\n  return (\n    <GenericDiscoverQuery<MetricsCompatibilityData, {}>\n      route=\"metrics-compatibility-sums\"\n      getRequestPayload={getRequestPayload}\n      {...props}\n      api={api}\n    >\n      {({tableData, ...rest}) => {\n        return children({\n          tableData,\n          ...rest,\n        });\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n","import omit from 'lodash/omit';\n\nimport EventView from 'sentry/utils/discover/eventView';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport useApi from 'sentry/utils/useApi';\n\nexport interface MetricsCompatibilitySumData {\n  sum: {\n    metrics?: number;\n    metrics_null?: number;\n    metrics_unparam?: number;\n  };\n}\n\ntype QueryProps = Omit<DiscoverQueryProps, 'eventView' | 'api'> & {\n  children: (props: GenericChildrenProps<MetricsCompatibilitySumData>) => React.ReactNode;\n  eventView: EventView;\n};\n\nfunction getRequestPayload({\n  eventView,\n  location,\n}: Pick<DiscoverQueryProps, 'eventView' | 'location'>) {\n  return omit(eventView.getEventsAPIPayload(location), [\n    'field',\n    'sort',\n    'per_page',\n    'query',\n  ]);\n}\n\nexport default function MetricsCompatibilitySumsQuery({children, ...props}: QueryProps) {\n  const api = useApi();\n  return (\n    <GenericDiscoverQuery<MetricsCompatibilitySumData, {}>\n      route=\"metrics-compatibility\"\n      getRequestPayload={getRequestPayload}\n      {...props}\n      api={api}\n    >\n      {({tableData, ...rest}) => {\n        return children({\n          tableData,\n          ...rest,\n        });\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n","import {Fragment, ReactNode} from 'react';\nimport {Location} from 'history';\n\nimport {Organization} from 'sentry/types';\nimport {parsePeriodToHours} from 'sentry/utils/dates';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {canUseMetricsData} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport MetricsCompatibilityQuery, {\n  MetricsCompatibilityData,\n} from 'sentry/utils/performance/metricsEnhanced/metricsCompatibilityQuery';\nimport MetricsCompatibilitySumsQuery, {\n  MetricsCompatibilitySumData,\n} from 'sentry/utils/performance/metricsEnhanced/metricsCompatibilityQuerySums';\n\nimport {createDefinedContext} from './utils';\n\nexport interface MetricDataSwitcherOutcome {\n  forceTransactionsOnly: boolean;\n  compatibleProjects?: number[];\n  shouldNotifyUnnamedTransactions?: boolean;\n  shouldWarnIncompatibleSDK?: boolean;\n}\nexport interface MetricsCardinalityContext {\n  isLoading: boolean;\n  outcome?: MetricDataSwitcherOutcome;\n}\n\ntype MergedMetricsData = MetricsCompatibilityData & MetricsCompatibilitySumData;\n\nconst [_Provider, _useContext, _Context] =\n  createDefinedContext<MetricsCardinalityContext>({\n    name: 'MetricsCardinalityContext',\n    strict: false,\n  });\n\n/**\n * This provider determines whether the metrics data is storing performance information correctly before we\n * make dozens of requests on pages such as performance landing and dashboards.\n */\nexport const MetricsCardinalityProvider = (props: {\n  children: ReactNode;\n  location: Location;\n  organization: Organization;\n}) => {\n  const isUsingMetrics = canUseMetricsData(props.organization);\n\n  if (!isUsingMetrics) {\n    return (\n      <_Provider\n        value={{\n          isLoading: false,\n          outcome: {\n            forceTransactionsOnly: true,\n          },\n        }}\n      >\n        {props.children}\n      </_Provider>\n    );\n  }\n\n  const baseDiscoverProps = {\n    location: props.location,\n    orgSlug: props.organization.slug,\n    cursor: '0:0:0',\n  };\n  const eventView = EventView.fromLocation(props.location);\n  eventView.fields = [{field: 'tpm()'}];\n  const _eventView = adjustEventViewTime(eventView);\n\n  return (\n    <Fragment>\n      <MetricsCompatibilityQuery eventView={_eventView} {...baseDiscoverProps}>\n        {compatabilityResult => (\n          <MetricsCompatibilitySumsQuery eventView={_eventView} {...baseDiscoverProps}>\n            {sumsResult => (\n              <_Provider\n                value={{\n                  isLoading: compatabilityResult.isLoading || sumsResult.isLoading,\n                  outcome:\n                    compatabilityResult.isLoading || sumsResult.isLoading\n                      ? undefined\n                      : getMetricsOutcome(\n                          compatabilityResult.tableData && sumsResult.tableData\n                            ? {\n                                ...compatabilityResult.tableData,\n                                ...sumsResult.tableData,\n                              }\n                            : null,\n                          !!compatabilityResult.error && !!sumsResult.error\n                        ),\n                }}\n              >\n                {props.children}\n              </_Provider>\n            )}\n          </MetricsCompatibilitySumsQuery>\n        )}\n      </MetricsCompatibilityQuery>\n    </Fragment>\n  );\n};\n\nexport const MetricCardinalityConsumer = _Context.Consumer;\n\nexport const useMetricsCardinalityContext = _useContext;\n\n/**\n * Logic for picking sides of metrics vs. transactions along with the associated warnings.\n */\nfunction getMetricsOutcome(\n  dataCounts: MergedMetricsData | null,\n  hasOtherFallbackCondition: boolean\n) {\n  const fallbackOutcome: MetricDataSwitcherOutcome = {\n    forceTransactionsOnly: true,\n  };\n  const successOutcome: MetricDataSwitcherOutcome = {\n    forceTransactionsOnly: false,\n  };\n  if (!dataCounts) {\n    return fallbackOutcome;\n  }\n  const compatibleProjects = dataCounts.compatible_projects;\n\n  if (hasOtherFallbackCondition) {\n    return fallbackOutcome;\n  }\n\n  if (!dataCounts) {\n    return fallbackOutcome;\n  }\n\n  if (checkForSamplingRules(dataCounts)) {\n    return fallbackOutcome;\n  }\n\n  if (checkNoDataFallback(dataCounts)) {\n    return fallbackOutcome;\n  }\n\n  if (checkIncompatibleData(dataCounts)) {\n    return {\n      shouldWarnIncompatibleSDK: true,\n      forceTransactionsOnly: true,\n      compatibleProjects,\n    };\n  }\n\n  if (checkIfAllOtherData(dataCounts)) {\n    return {\n      shouldNotifyUnnamedTransactions: true,\n      forceTransactionsOnly: true,\n      compatibleProjects,\n    };\n  }\n\n  if (checkIfPartialOtherData(dataCounts)) {\n    return {\n      shouldNotifyUnnamedTransactions: true,\n      compatibleProjects,\n      forceTransactionsOnly: false,\n    };\n  }\n\n  return successOutcome;\n}\n\n/**\n * Fallback if very similar amounts of metrics and transactions are found.\n * No projects with dynamic sampling means no rules have been enabled yet.\n */\nfunction checkForSamplingRules(dataCounts: MergedMetricsData) {\n  const counts = normalizeCounts(dataCounts);\n  if (!dataCounts.dynamic_sampling_projects?.length) {\n    return true;\n  }\n  if (counts.metricsCount === 0) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Fallback if no metrics found.\n */\nfunction checkNoDataFallback(dataCounts: MergedMetricsData) {\n  const counts = normalizeCounts(dataCounts);\n  return !counts.metricsCount;\n}\n\n/**\n * Fallback and warn if incompatible data found (old specific SDKs).\n */\nfunction checkIncompatibleData(dataCounts: MergedMetricsData) {\n  const counts = normalizeCounts(dataCounts);\n  return counts.nullCount > 0;\n}\n\n/**\n * Fallback and warn about unnamed transactions (specific SDKs).\n */\nfunction checkIfAllOtherData(dataCounts: MergedMetricsData) {\n  const counts = normalizeCounts(dataCounts);\n  return counts.unparamCount >= counts.metricsCount;\n}\n\n/**\n * Show metrics but warn about unnamed transactions.\n */\nfunction checkIfPartialOtherData(dataCounts: MergedMetricsData) {\n  const counts = normalizeCounts(dataCounts);\n  return counts.unparamCount > 0;\n}\n\n/**\n * Temporary function, can be removed after API changes.\n */\nfunction normalizeCounts({sum}: MergedMetricsData) {\n  try {\n    const metricsCount = Number(sum.metrics);\n    const unparamCount = Number(sum.metrics_unparam);\n    const nullCount = Number(sum.metrics_null);\n    return {\n      metricsCount,\n      unparamCount,\n      nullCount,\n    };\n  } catch (_) {\n    return {\n      metricsCount: 0,\n      unparamCount: 0,\n      nullCount: 0,\n    };\n  }\n}\n\n/**\n * Performance optimization to limit the amount of rows scanned before showing the landing page.\n */\nfunction adjustEventViewTime(eventView: EventView) {\n  const _eventView = eventView.clone();\n\n  if (!_eventView.start && !_eventView.end) {\n    if (!_eventView.statsPeriod) {\n      _eventView.statsPeriod = '1h';\n      _eventView.start = undefined;\n      _eventView.end = undefined;\n    } else {\n      const periodHours = parsePeriodToHours(_eventView.statsPeriod);\n      if (periodHours > 1) {\n        _eventView.statsPeriod = '1h';\n        _eventView.start = undefined;\n        _eventView.end = undefined;\n      }\n    }\n  }\n  return _eventView;\n}\n","import {Dispatch, ReactNode, useCallback, useReducer} from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport {Organization} from 'sentry/types';\nimport localStorage from 'sentry/utils/localStorage';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport {createDefinedContext} from './utils';\n\nexport interface MetricsEnhancedSettingContext {\n  autoSampleState: AutoSampleState;\n  memoizationKey: string;\n  metricSettingState: MEPState | null;\n  setAutoSampleState: Dispatch<AutoSampleState>;\n  setMetricSettingState: Dispatch<MEPState>;\n  shouldQueryProvideMEPAutoParams: boolean;\n  shouldQueryProvideMEPMetricParams: boolean;\n  shouldQueryProvideMEPTransactionParams: boolean;\n}\n\nconst [_MEPSettingProvider, _useMEPSettingContext, _MEPSettingContext] =\n  createDefinedContext<MetricsEnhancedSettingContext>({\n    name: 'MetricsEnhancedSettingContext',\n  });\n\nexport const MEPConsumer = _MEPSettingContext.Consumer;\n\n/**\n * These will be called something else in the copy, but functionally the data is coming from metrics / transactions.\n * \"Unset\" should be the initial state before any queries return for the first time.\n */\nexport enum AutoSampleState {\n  unset = 'unset',\n  metrics = 'metrics',\n  transactions = 'transactions',\n}\n\n/**\n * Metrics/transactions will be called something else in the copy, but functionally the data is coming from metrics / transactions.\n */\nexport enum MEPState {\n  auto = 'auto',\n  metricsOnly = 'metricsOnly',\n  transactionsOnly = 'transactionsOnly',\n}\n\nexport const METRIC_SETTING_PARAM = 'metricSetting';\nexport const METRIC_SEARCH_SETTING_PARAM = 'metricSearchSetting'; // TODO: Clean this up since we don't need multiple params in practice.\n\nconst storageKey = 'performance.metrics-enhanced-setting';\nexport class MEPSetting {\n  static get(): MEPState | null {\n    const value = localStorage.getItem(storageKey);\n    if (value) {\n      if (!(value in MEPState)) {\n        localStorage.removeItem(storageKey);\n        return null;\n      }\n      return MEPState[value];\n    }\n    return null;\n  }\n\n  static set(value: MEPState) {\n    localStorage.setItem(storageKey, value);\n  }\n}\n\nexport function canUseMetricsDevUI(organization: Organization) {\n  return organization.features.includes('performance-use-metrics');\n}\n\nexport function canUseMetricsData(organization: Organization) {\n  const isDevFlagOn = canUseMetricsDevUI(organization); // Forces metrics data on as well.\n  const isInternalViewOn = organization.features.includes(\n    'performance-transaction-name-only-search'\n  ); // TODO: Swap this flag out.\n\n  const samplingRolloutFlag = organization.features.includes('server-side-sampling');\n  const isRollingOut =\n    samplingRolloutFlag && organization.features.includes('mep-rollout-flag');\n\n  return isDevFlagOn || isInternalViewOn || isRollingOut;\n}\n\nexport const MEPSettingProvider = ({\n  children,\n  location,\n  _hasMEPState,\n  forceTransactions,\n}: {\n  children: ReactNode;\n  _hasMEPState?: MEPState;\n  forceTransactions?: boolean;\n  location?: Location;\n}) => {\n  const organization = useOrganization();\n\n  const canUseMEP = canUseMetricsData(organization);\n\n  const allowedStates = [MEPState.metricsOnly, MEPState.transactionsOnly];\n  const _metricSettingFromParam = location\n    ? decodeScalar(location.query[METRIC_SETTING_PARAM])\n    : MEPState.metricsOnly;\n  let defaultMetricsState = MEPState.metricsOnly;\n\n  if (forceTransactions) {\n    defaultMetricsState = MEPState.transactionsOnly;\n  }\n\n  const metricSettingFromParam =\n    allowedStates.find(s => s === _metricSettingFromParam) ?? defaultMetricsState;\n\n  const isControlledMEP = typeof _hasMEPState !== 'undefined';\n\n  const [_metricSettingState, _setMetricSettingState] = useReducer(\n    (_: MEPState, next: MEPState) => next,\n    metricSettingFromParam\n  );\n\n  const setMetricSettingState = useCallback(\n    (settingState: MEPState) => {\n      if (!location) {\n        return;\n      }\n      browserHistory.replace({\n        ...location,\n        query: {\n          ...location.query,\n          [METRIC_SETTING_PARAM]: settingState,\n        },\n      });\n      _setMetricSettingState(settingState);\n    },\n    [location, _setMetricSettingState]\n  );\n\n  const [autoSampleState, setAutoSampleState] = useReducer(\n    (_: AutoSampleState, next: AutoSampleState) => next,\n    AutoSampleState.unset\n  );\n\n  const metricSettingState = isControlledMEP ? _hasMEPState : _metricSettingState;\n\n  const shouldQueryProvideMEPAutoParams =\n    canUseMEP && metricSettingState === MEPState.auto;\n  const shouldQueryProvideMEPMetricParams =\n    canUseMEP && metricSettingState === MEPState.metricsOnly;\n  const shouldQueryProvideMEPTransactionParams =\n    canUseMEP && metricSettingState === MEPState.transactionsOnly;\n\n  const memoizationKey = `${metricSettingState}`;\n\n  return (\n    <_MEPSettingProvider\n      value={{\n        autoSampleState,\n        metricSettingState,\n        shouldQueryProvideMEPAutoParams,\n        shouldQueryProvideMEPMetricParams,\n        shouldQueryProvideMEPTransactionParams,\n        memoizationKey,\n        setMetricSettingState,\n        setAutoSampleState,\n      }}\n    >\n      {children}\n    </_MEPSettingProvider>\n  );\n};\n\nexport const useMEPSettingContext = _useMEPSettingContext;\n","import EventView, {ImmutableEventView} from 'sentry/utils/discover/eventView';\n\nimport {createDefinedContext} from './utils';\n\ntype usePerformanceEventViewContext = {\n  eventView: EventView;\n};\n\nconst [\n  PerformanceEventViewProvider,\n  _usePerformanceEventView,\n  PerformanceEventViewContext,\n] = createDefinedContext<usePerformanceEventViewContext>({\n  name: 'PerformanceEventViewContext',\n});\n\nexport {PerformanceEventViewProvider, PerformanceEventViewContext};\n\n// Provides a readonly event view. Also omits anything that isn't currently read-only, although in the future we should switch the code in EventView instead.\n// If you need mutability, use the mutable version.\nexport function usePerformanceEventView(): ImmutableEventView {\n  return _usePerformanceEventView().eventView;\n}\n\nexport function useMutablePerformanceEventView() {\n  return usePerformanceEventView().clone();\n}\n","import {createContext, useContext} from 'react';\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>];\n/*\n * Creates provider, context and useContext hook, guarding against calling useContext without a provider.\n * [0]: https://github.com/chakra-ui/chakra-ui/blob/c0f9c287df0397e2aa9bd90eb3d5c2f2c08aa0b1/packages/utils/src/react-helpers.ts#L27\n *\n * Renamed to createDefinedContext to not conflate with React context.\n */\nexport function createDefinedContext<ContextType>(options: {\n  name: string;\n  errorMessage?: string;\n  strict?: boolean;\n}) {\n  const {\n    strict = true,\n    errorMessage = `useContext for \"${options.name}\" must be inside a Provider with a value`,\n    name,\n  } = options;\n\n  const Context = createContext<ContextType | undefined>(undefined);\n\n  Context.displayName = name;\n\n  function useDefinedContext() {\n    const context = useContext(Context);\n    if (!context && strict) {\n      throw new Error(errorMessage);\n    }\n    return context;\n  }\n\n  return [\n    Context.Provider,\n    useDefinedContext,\n    Context,\n  ] as CreateContextReturn<ContextType>;\n}\n","import {Location} from 'history';\n\nimport Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport {Organization} from 'sentry/types';\nimport {MetricsCardinalityProvider} from 'sentry/utils/performance/contexts/metricsCardinality';\nimport {MEPSettingProvider} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype Props = {\n  children: React.ReactChildren;\n  location: Location;\n  organization: Organization;\n};\n\nfunction PerformanceContainer({organization, location, children}: Props) {\n  function renderNoAccess() {\n    return (\n      <PageContent>\n        <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n      </PageContent>\n    );\n  }\n\n  return (\n    <Feature\n      hookName=\"feature-disabled:performance-page\"\n      features={['performance-view']}\n      organization={organization}\n      renderDisabled={renderNoAccess}\n    >\n      <MetricsCardinalityProvider location={location} organization={organization}>\n        <MEPSettingProvider>{children}</MEPSettingProvider>\n      </MetricsCardinalityProvider>\n    </Feature>\n  );\n}\n\nexport default withOrganization(PerformanceContainer);\n"],"names":["QueryError","constructor","errorMessage","originalError","this","message","getOriginalError","_GenericDiscoverQuery","Component","isLoading","tableFetchID","undefined","error","tableData","pageLinks","prevProps","thisAPIPayload","getPayload","props","otherAPIPayload","isAPIPayloadSimilar","limit","route","cursor","parseError","detail","responseJSON","t","async","api","queryBatching","beforeFetch","afterFetch","didFetch","eventView","orgSlug","setError","isValid","url","Symbol","apiPayload","setState","clear","data","resp","doDiscoverQuery","state","prevState","getResponseHeader","err","_parseError","componentDidMount","fetchData","componentDidUpdate","refetchCondition","_shouldRefetchData","eventViewValidation","shouldRefetchExternal","shouldRefetchData","noPagination","referrer","payload","getRequestPayload","getEventsAPIPayload","location","forceAppendRawQueryString","per_page","Object","assign","queryExtras","render","childrenProps","children","GenericDiscoverQuery","organizationSlug","useContext","OrganizationContext","slug","performanceEventView","PerformanceEventViewContext","Error","_props","params","batchRequest","query","includeAllArgs","requestPromise","method","omit","MetricsCompatibilityQuery","useApi","rest","MetricsCompatibilitySumsQuery","_Provider","_useContext","_Context","createDefinedContext","name","strict","MetricsCardinalityProvider","canUseMetricsData","organization","value","outcome","forceTransactionsOnly","baseDiscoverProps","EventView","fields","field","_eventView","clone","start","end","statsPeriod","parsePeriodToHours","adjustEventViewTime","Fragment","compatabilityResult","sumsResult","getMetricsOutcome","Consumer","useMetricsCardinalityContext","dataCounts","hasOtherFallbackCondition","fallbackOutcome","compatibleProjects","compatible_projects","counts","normalizeCounts","dynamic_sampling_projects","length","metricsCount","checkForSamplingRules","checkNoDataFallback","nullCount","checkIncompatibleData","shouldWarnIncompatibleSDK","unparamCount","checkIfAllOtherData","shouldNotifyUnnamedTransactions","checkIfPartialOtherData","sum","Number","metrics","metrics_unparam","metrics_null","_","_MEPSettingProvider","_useMEPSettingContext","_MEPSettingContext","MEPConsumer","AutoSampleState","MEPState","METRIC_SETTING_PARAM","METRIC_SEARCH_SETTING_PARAM","isDevFlagOn","features","includes","canUseMetricsDevUI","isInternalViewOn","isRollingOut","MEPSettingProvider","_hasMEPState","forceTransactions","canUseMEP","useOrganization","allowedStates","metricsOnly","transactionsOnly","_metricSettingFromParam","decodeScalar","defaultMetricsState","metricSettingFromParam","find","s","isControlledMEP","_metricSettingState","_setMetricSettingState","useReducer","next","setMetricSettingState","useCallback","settingState","browserHistory","autoSampleState","setAutoSampleState","unset","metricSettingState","shouldQueryProvideMEPAutoParams","auto","shouldQueryProvideMEPMetricParams","shouldQueryProvideMEPTransactionParams","memoizationKey","useMEPSettingContext","PerformanceEventViewProvider","_usePerformanceEventView","options","Context","createContext","displayName","Provider","context","PerformanceContainer","hookName","renderDisabled","type","withOrganization"],"sourceRoot":""}