{"version":3,"file":"chunks/app_components_acl_access_tsx-app_components_forms_textCopyInput_tsx-app_components_tag_tsx-a-c583a1.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/acl/access.tsx","webpack:///./app/components/forms/textCopyInput.tsx","webpack:///./app/components/tag.tsx","webpack:///./app/components/truncate.tsx","webpack:///./app/utils/useOrganization.tsx","webpack:///./app/utils/withConfig.tsx","webpack:///./app/views/organizationContext.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Config, Organization, Scope} from 'sentry/types';\nimport {isRenderFunc} from 'sentry/utils/isRenderFunc';\nimport withConfig from 'sentry/utils/withConfig';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nconst DEFAULT_NO_ACCESS_MESSAGE = (\n  <Alert type=\"error\" showIcon>\n    {t('You do not have sufficient permissions to access this.')}\n  </Alert>\n);\n\n// Props that function children will get.\nexport type ChildRenderProps = {\n  hasAccess: boolean;\n  hasSuperuser: boolean;\n};\n\ntype ChildFunction = (props: ChildRenderProps) => React.ReactNode;\n\ntype DefaultProps = {\n  /**\n   * List of required access levels\n   */\n  access: Scope[];\n\n  /**\n   * Custom renderer function for \"no access\" message OR `true` to use\n   * default message. `false` will suppress message.\n   */\n  renderNoAccessMessage: ChildFunction | boolean;\n\n  /**\n   * Requires superuser\n   */\n  isSuperuser?: boolean;\n\n  /**\n   * Should the component require all access levels or just one or more.\n   */\n  requireAll?: boolean;\n};\n\nconst defaultProps: DefaultProps = {\n  renderNoAccessMessage: false,\n  isSuperuser: false,\n  requireAll: true,\n  access: [],\n};\n\ntype Props = {\n  /**\n   * Configuration from ConfigStore\n   */\n  config: Config;\n\n  /**\n   * Current Organization\n   */\n  organization: Organization;\n\n  /**\n   * Children can be a node or a function as child.\n   */\n  children?: React.ReactNode | ChildFunction;\n} & Partial<DefaultProps>;\n\n/**\n * Component to handle access restrictions.\n */\nclass Access extends Component<Props> {\n  static defaultProps = defaultProps;\n\n  render() {\n    const {\n      organization,\n      config,\n      access,\n      requireAll,\n      isSuperuser,\n      renderNoAccessMessage,\n      children,\n    } = this.props;\n\n    const {access: orgAccess} = organization || {access: []};\n    const method = requireAll ? 'every' : 'some';\n\n    const hasAccess = !access || access[method](acc => orgAccess.includes(acc));\n    const hasSuperuser = !!(config.user && config.user.isSuperuser);\n\n    const renderProps: ChildRenderProps = {\n      hasAccess,\n      hasSuperuser,\n    };\n\n    const render = hasAccess && (!isSuperuser || hasSuperuser);\n\n    if (!render && typeof renderNoAccessMessage === 'function') {\n      return renderNoAccessMessage(renderProps);\n    }\n    if (!render && renderNoAccessMessage) {\n      return DEFAULT_NO_ACCESS_MESSAGE;\n    }\n\n    if (isRenderFunc<ChildFunction>(children)) {\n      return children(renderProps);\n    }\n\n    return render ? children : null;\n  }\n}\n\nexport default withOrganization(withConfig(Access));\n","import {useCallback, useRef} from 'react';\nimport {findDOMNode} from 'react-dom';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport Clipboard from 'sentry/components/clipboard';\nimport Input, {InputProps} from 'sentry/components/input';\nimport {IconCopy} from 'sentry/icons';\nimport {selectText} from 'sentry/utils/selectText';\n\ninterface Props extends Omit<InputProps, 'onCopy'> {\n  /**\n   * Text to copy\n   */\n  children: string;\n  className?: string;\n  disabled?: boolean;\n  onCopy?: (value: string, event: React.MouseEvent) => void;\n  /**\n   * Always show the ending of a long overflowing text in input\n   */\n  rtl?: boolean;\n  style?: React.CSSProperties;\n}\n\nfunction TextCopyInput({\n  className,\n  disabled,\n  style,\n  onCopy,\n  rtl,\n  size,\n  children,\n  ...inputProps\n}: Props) {\n  const textRef = useRef<HTMLInputElement>(null);\n\n  const handleSelectText = useCallback(() => {\n    if (!textRef.current) {\n      return;\n    }\n\n    // We use findDOMNode here because `this.textRef` is not a dom node,\n    // it's a ref to AutoSelectText\n    const node = findDOMNode(textRef.current); // eslint-disable-line react/no-find-dom-node\n    if (!node || !(node instanceof HTMLElement)) {\n      return;\n    }\n\n    if (rtl && node instanceof HTMLInputElement) {\n      // we don't want to select the first character - \\u202A, nor the last - \\u202C\n      node.setSelectionRange(1, node.value.length - 1);\n    } else {\n      selectText(node);\n    }\n  }, [rtl]);\n\n  /**\n   * Select text when copy button is clicked\n   */\n  const handleCopyClick = useCallback(\n    (e: React.MouseEvent) => {\n      if (!textRef.current) {\n        return;\n      }\n\n      handleSelectText();\n\n      onCopy?.(children, e);\n\n      e.stopPropagation();\n    },\n    [handleSelectText, children, onCopy]\n  );\n\n  /**\n   * We are using direction: rtl; to always show the ending of a long overflowing text in input.\n   *\n   * This however means that the trailing characters with BiDi class O.N. ('Other Neutrals') goes to the other side.\n   * Hello! becomes !Hello and vice versa. This is a problem for us when we want to show path in this component, because\n   * /user/local/bin becomes user/local/bin/. Wrapping in unicode characters for left-to-righ embedding solves this,\n   * however we need to be aware of them when selecting the text - we are solving that by offsetting the selectionRange.\n   */\n  const inputValue = rtl ? '\\u202A' + children + '\\u202C' : children;\n\n  return (\n    <Wrapper className={className}>\n      <StyledInput\n        readOnly\n        disabled={disabled}\n        ref={textRef}\n        style={style}\n        value={inputValue}\n        onClick={handleSelectText}\n        size={size}\n        rtl={rtl}\n        {...inputProps}\n      />\n      <Clipboard hideUnsupported value={children}>\n        <StyledCopyButton\n          type=\"button\"\n          size={size}\n          disabled={disabled}\n          onClick={handleCopyClick}\n        >\n          <IconCopy size={size === 'xs' ? 'xs' : 'sm'} />\n        </StyledCopyButton>\n      </Clipboard>\n    </Wrapper>\n  );\n}\n\nexport default TextCopyInput;\n\nconst Wrapper = styled('div')`\n  display: flex;\n`;\n\nexport const StyledInput = styled(Input)<{rtl?: boolean}>`\n  position: relative;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  border-right-color: transparent;\n  direction: ${p => (p.rtl ? 'rtl' : 'ltr')};\n\n  &:focus {\n    z-index: 1;\n    border-right-color: ${p => p.theme.focusBorder};\n  }\n`;\n\nexport const StyledCopyButton = styled(Button)`\n  flex-shrink: 0;\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n  box-shadow: none;\n  transform: translateX(-1px);\n`;\n","import {cloneElement, isValidElement} from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Link, {LinkProps} from 'sentry/components/links/link';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconClose, IconOpen} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {defined} from 'sentry/utils';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport theme, {Color, Theme} from 'sentry/utils/theme';\n\nconst TAG_HEIGHT = '20px';\n\ninterface Props extends React.HTMLAttributes<HTMLSpanElement> {\n  /**\n   * Makes the tag clickable. Use for external links.\n   * If no icon is passed, it defaults to IconOpen (can be removed by passing icon={null})\n   */\n  href?: string;\n  /**\n   * Icon on the left side.\n   */\n  icon?: React.ReactNode;\n  /**\n   * Triggered when the item is clicked\n   */\n  onClick?: (eventKey: any) => void;\n  /**\n   * Shows clickable IconClose on the right side.\n   */\n  onDismiss?: () => void;\n  /**\n   * Max width of the tag's text\n   */\n  textMaxWidth?: number;\n  /**\n   * Makes the tag clickable. Use for internal links handled by react router.\n   * If no icon is passed, it defaults to IconOpen (can be removed by passing icon={null})\n   */\n  to?: LinkProps['to'];\n  /**\n   * Text to show up on a hover.\n   */\n  tooltipText?: React.ComponentProps<typeof Tooltip>['title'];\n  /**\n   * Dictates color scheme of the tag.\n   */\n  type?: keyof Theme['tag'];\n}\n\nfunction Tag({\n  type = 'default',\n  icon,\n  tooltipText,\n  to,\n  onClick,\n  href,\n  onDismiss,\n  children,\n  textMaxWidth = 150,\n  ...props\n}: Props) {\n  const iconsProps = {\n    size: '11px',\n    color: theme.tag[type].iconColor as Color,\n  };\n\n  const tag = (\n    <Tooltip title={tooltipText} containerDisplayMode=\"inline-flex\">\n      <Background type={type}>\n        {tagIcon()}\n\n        <Text type={type} maxWidth={textMaxWidth}>\n          {children}\n        </Text>\n\n        {defined(onDismiss) && (\n          <DismissButton\n            onClick={handleDismiss}\n            size=\"zero\"\n            priority=\"link\"\n            aria-label={t('Dismiss')}\n          >\n            <IconClose isCircled {...iconsProps} />\n          </DismissButton>\n        )}\n      </Background>\n    </Tooltip>\n  );\n\n  function handleDismiss(event: React.MouseEvent) {\n    event.preventDefault();\n    onDismiss?.();\n  }\n\n  const trackClickEvent = () => {\n    trackAdvancedAnalyticsEvent('tag.clicked', {\n      is_clickable: defined(onClick) || defined(to) || defined(href),\n      organization: null,\n    });\n  };\n\n  function tagIcon() {\n    if (isValidElement(icon)) {\n      return <IconWrapper>{cloneElement(icon, {...iconsProps})}</IconWrapper>;\n    }\n\n    if ((defined(href) || defined(to)) && icon === undefined) {\n      return (\n        <IconWrapper>\n          <IconOpen {...iconsProps} />\n        </IconWrapper>\n      );\n    }\n\n    return null;\n  }\n\n  function tagWithParent() {\n    if (defined(href)) {\n      return <ExternalLink href={href}>{tag}</ExternalLink>;\n    }\n\n    if (defined(to) && defined(onClick)) {\n      return (\n        <Link to={to} onClick={onClick}>\n          {tag}\n        </Link>\n      );\n    }\n    if (defined(to)) {\n      return <Link to={to}>{tag}</Link>;\n    }\n\n    return tag;\n  }\n\n  return (\n    <TagWrapper {...props} onClick={trackClickEvent}>\n      {tagWithParent()}\n    </TagWrapper>\n  );\n}\n\nconst TagWrapper = styled('span')`\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nexport const Background = styled('div')<{type: keyof Theme['tag']}>`\n  display: inline-flex;\n  align-items: center;\n  height: ${TAG_HEIGHT};\n  border-radius: ${TAG_HEIGHT};\n  background-color: ${p => p.theme.tag[p.type].background};\n  border: solid 1px ${p => p.theme.tag[p.type].border};\n  padding: 0 ${space(1)};\n`;\n\nconst IconWrapper = styled('span')`\n  margin-right: ${space(0.5)};\n  display: inline-flex;\n`;\n\nconst Text = styled('span')<{maxWidth: number; type: keyof Theme['tag']}>`\n  color: ${p =>\n    ['black', 'white'].includes(p.type)\n      ? p.theme.tag[p.type].iconColor\n      : p.theme.textColor};\n  max-width: ${p => p.maxWidth}px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  line-height: ${TAG_HEIGHT};\n`;\n\nconst DismissButton = styled(Button)`\n  margin-left: ${space(0.5)};\n  border: none;\n`;\n\nexport default Tag;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\n\ntype DefaultProps = {\n  className: string;\n  expandDirection: 'left' | 'right';\n  expandable: boolean;\n  leftTrim: boolean;\n  maxLength: number;\n  minLength: number;\n};\n\ntype Props = DefaultProps & {\n  value: string;\n  trimRegex?: RegExp;\n};\n\ntype State = {\n  isExpanded: boolean;\n};\n\nclass Truncate extends Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    className: '',\n    minLength: 15,\n    maxLength: 50,\n    leftTrim: false,\n    expandable: true,\n    expandDirection: 'right',\n  };\n\n  state: State = {\n    isExpanded: false,\n  };\n\n  onFocus = () => {\n    const {value, maxLength} = this.props;\n    if (value.length <= maxLength) {\n      return;\n    }\n    this.setState({isExpanded: true});\n  };\n\n  onBlur = () => {\n    if (this.state.isExpanded) {\n      this.setState({isExpanded: false});\n    }\n  };\n\n  render() {\n    const {\n      className,\n      leftTrim,\n      trimRegex,\n      minLength,\n      maxLength,\n      value,\n      expandable,\n      expandDirection,\n    } = this.props;\n    const isTruncated = value.length > maxLength;\n    let shortValue: React.ReactNode = '';\n\n    if (isTruncated) {\n      const slicedValue = leftTrim\n        ? value.slice(value.length - (maxLength - 4), value.length)\n        : value.slice(0, maxLength - 4);\n\n      // Try to trim to values from the regex\n      if (trimRegex && leftTrim) {\n        const valueIndex = slicedValue.search(trimRegex);\n        shortValue = (\n          <span>\n            …{' '}\n            {valueIndex > 0 && valueIndex <= maxLength - minLength\n              ? slicedValue.slice(slicedValue.search(trimRegex), slicedValue.length)\n              : slicedValue}\n          </span>\n        );\n      } else if (trimRegex && !leftTrim) {\n        const matches = slicedValue.match(trimRegex);\n        let lastIndex = matches\n          ? slicedValue.lastIndexOf(matches[matches.length - 1]) + 1\n          : slicedValue.length;\n        if (lastIndex <= minLength) {\n          lastIndex = slicedValue.length;\n        }\n        shortValue = <span>{slicedValue.slice(0, lastIndex)} …</span>;\n      } else if (leftTrim) {\n        shortValue = <span>… {slicedValue}</span>;\n      } else {\n        shortValue = <span>{slicedValue} …</span>;\n      }\n    } else {\n      shortValue = value;\n    }\n\n    return (\n      <Wrapper\n        className={className}\n        onMouseOver={expandable ? this.onFocus : undefined}\n        onMouseOut={expandable ? this.onBlur : undefined}\n        onFocus={expandable ? this.onFocus : undefined}\n        onBlur={expandable ? this.onBlur : undefined}\n      >\n        <span>{shortValue}</span>\n        {isTruncated && (\n          <FullValue expanded={this.state.isExpanded} expandDirection={expandDirection}>\n            {value}\n          </FullValue>\n        )}\n      </Wrapper>\n    );\n  }\n}\n\nconst Wrapper = styled('span')`\n  position: relative;\n`;\n\nexport const FullValue = styled('span')<{\n  expandDirection: 'left' | 'right';\n  expanded: boolean;\n}>`\n  display: none;\n  position: absolute;\n  background: ${p => p.theme.background};\n  padding: ${space(0.5)};\n  border: 1px solid ${p => p.theme.innerBorder};\n  white-space: nowrap;\n  border-radius: ${space(0.5)};\n  top: -5px;\n  ${p => p.expandDirection === 'left' && 'right: -5px;'}\n  ${p => p.expandDirection === 'right' && 'left: -5px;'}\n\n  ${p =>\n    p.expanded &&\n    `\n    z-index: ${p.theme.zIndex.truncationFullValue};\n    display: block;\n    `}\n`;\n\nexport default Truncate;\n","import {useContext} from 'react';\n\nimport {OrganizationContext} from 'sentry/views/organizationContext';\n\nfunction useOrganization() {\n  const organization = useContext(OrganizationContext);\n  if (!organization) {\n    throw new Error('useOrganization called but organization is not set.');\n  }\n  return organization;\n}\n\nexport default useOrganization;\n","import ConfigStore from 'sentry/stores/configStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport {Config} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedConfigProps = {\n  config: Config;\n};\n\n/**\n * Higher order component that passes the config object to the wrapped\n * component\n */\nfunction withConfig<P extends InjectedConfigProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  type Props = Omit<P, keyof InjectedConfigProps> & Partial<InjectedConfigProps>;\n\n  const Wrapper: React.FC<Props> = props => {\n    const config = useLegacyStore(ConfigStore);\n    const allProps = {config, ...props} as P;\n\n    return <WrappedComponent {...allProps} />;\n  };\n\n  Wrapper.displayName = `withConfig(${getDisplayName(WrappedComponent)})`;\n\n  return Wrapper;\n}\n\nexport default withConfig;\n","import {createContext} from 'react';\n\nimport {Organization} from 'sentry/types';\n\nexport const OrganizationContext = createContext<Organization | null>(null);\n"],"names":["DEFAULT_NO_ACCESS_MESSAGE","type","showIcon","t","Access","Component","render","organization","config","access","requireAll","isSuperuser","renderNoAccessMessage","children","this","props","orgAccess","hasAccess","acc","includes","hasSuperuser","user","renderProps","isRenderFunc","withOrganization","withConfig","TextCopyInput","className","disabled","style","onCopy","rtl","size","inputProps","textRef","useRef","handleSelectText","useCallback","current","node","findDOMNode","HTMLElement","HTMLInputElement","setSelectionRange","value","length","selectText","handleCopyClick","e","stopPropagation","inputValue","Wrapper","StyledInput","readOnly","ref","onClick","hideUnsupported","StyledCopyButton","Input","p","theme","focusBorder","Button","TAG_HEIGHT","Tag","icon","tooltipText","to","href","onDismiss","textMaxWidth","iconsProps","color","iconColor","tag","title","containerDisplayMode","Background","isValidElement","IconWrapper","cloneElement","defined","undefined","Text","maxWidth","DismissButton","event","preventDefault","priority","isCircled","TagWrapper","trackAdvancedAnalyticsEvent","is_clickable","fontSizeSmall","background","border","space","textColor","Truncate","isExpanded","maxLength","setState","state","leftTrim","trimRegex","minLength","expandable","expandDirection","isTruncated","shortValue","slicedValue","slice","valueIndex","search","matches","match","lastIndex","lastIndexOf","onMouseOver","onFocus","onMouseOut","onBlur","FullValue","expanded","innerBorder","zIndex","truncationFullValue","useContext","OrganizationContext","Error","WrappedComponent","allProps","useLegacyStore","ConfigStore","displayName","getDisplayName","createContext"],"sourceRoot":""}