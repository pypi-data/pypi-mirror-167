{"version":3,"file":"chunks/app_views_settings_project_projectKeys_list_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"sSA6Be,SAASA,EACtBC,EACAC,GACQ,QACR,MAAM,OAACC,EAAD,OAASC,EAAT,SAAiBC,EAAjB,SAA2BC,GAAYJ,EACvCK,EAAQJ,EAAOK,KAAI,QAAC,KAACC,GAAF,SAAYA,GAAQ,EAApB,IACzB,IAAIC,EACAC,EAGc,iBAAPV,GACTU,EAAaR,EAAOS,QAAQX,GAAM,EAClCS,EAAgBG,IAAcN,EAAMO,MAAM,EAAGH,IAAaF,GAAoB,MAAZA,EAAK,MAEvEC,EAAgBG,IAAcN,GAAOE,GAAoB,MAAZA,EAAK,KAGpD,IAAIM,EAAYR,EAAMO,MAAMJ,EAAeC,QAEnB,IAAbL,IACTS,EAAYA,EAAUD,MAAM,EAAGR,IAGjC,MAAMU,EAAM,UAAGX,aAAH,EAAGA,EAAUW,cAAb,QAAuB,GAC7BC,EAAI,UAAGZ,aAAH,EAAGA,EAAUY,YAAb,QAAqB,GAEzBC,EAAa,GAAEH,EAAUI,KAAK,MACpB,iBAAPlB,EAAkB,GAAKA,IAC7Be,IAASC,IAEZ,OAAOG,EAAAA,EAAAA,GAAoBF,EAAWd,EACvC,C,0DChDD,QAZA,SACEiB,EACAC,GAGQ,IAFRC,IAEQ,yDADRC,EACQ,uCACR,MAAMC,EAAY,GAAEJ,OAAeC,IAC7BI,EAAOF,EAAe,GAAEC,OAAcD,IAAgBC,EAE5D,OAAOF,EAAc,GAAEG,aAAkBA,CAC1C,C,wPCJc,MAAMC,UAGXC,EAAAA,EACRC,WACE,MAAO,EACR,CAEDC,SACE,OACE,QAAC,IAAD,CAAqBC,MAAOC,KAAKH,WAAjC,SACGG,KAAKC,mBAGX,EAdkBN,EAAAA,YAAAA,W,ytCCsBrB,MAAMO,UAAeC,EAAAA,UAAiB,+DACrB,KACb,MAAM,KAACC,EAAD,SAAOC,GAAYL,KAAKM,MAC9BD,EAASD,EAAT,KAHkC,4BAMrB,KACb,MAAM,SAACG,EAAD,KAAWH,GAAQJ,KAAKM,MAC9BC,GAAS,EAAMH,EAAf,KARkC,6BAWpB,KACd,MAAM,SAACG,EAAD,KAAWH,GAAQJ,KAAKM,MAC9BC,GAAS,EAAOH,EAAhB,GAbkC,CAgBpCN,SACE,MAAM,OAACU,EAAD,KAASJ,EAAT,OAAejC,EAAf,SAAuBE,EAAvB,OAAiCD,GAAU4B,KAAKM,MAChDG,GAAUzC,EAAAA,EAAAA,GAAe,GAAEoC,EAAKM,MAAO,CAACvC,SAAQC,SAAQC,aACxDsC,EAAgBH,EAAOI,IAAI,iBAE3BC,EAAW,EACf,QAAC,KAAD,CAAmB5C,GAAIwC,EAASK,KAAK,KAArC,UACGC,EAAAA,EAAAA,GAAE,cADO,SAGZ,QAAC,KAAD,CAEED,KAAK,KACLE,QAASZ,EAAKa,SAAWjB,KAAKkB,cAAgBlB,KAAKmB,aACnDC,UAAWT,EAJb,SAMGP,EAAKa,UAAWF,EAAAA,EAAAA,GAAE,YAAaA,EAAAA,EAAAA,GAAE,WAL9B,WAON,QAAC,IAAD,CAEEM,SAAS,SACTD,UAAWT,EACXW,UAAWtB,KAAKuB,aAChBC,aAAaT,EAAAA,EAAAA,GAAE,cACfU,SAASV,EAAAA,EAAAA,GACP,0EAPJ,UAUE,QAAC,KAAD,CACED,KAAK,KACLM,UAAWT,EACXe,MAAM,QAAC,KAAD,IACN,cAAYX,EAAAA,EAAAA,GAAE,aAbZ,WAkBR,OACE,QAAC,KAAD,YACE,QAAC,KAAD,CAAaY,YAAU,EAAvB,WACE,QAACC,EAAD,CAAOR,UAAWhB,EAAKa,SAAvB,WACE,QAACY,EAAD,CAAiB5D,GAAIwC,EAArB,SAA+BL,EAAK0B,SAClC1B,EAAKa,WACL,2BACG,QACAF,EAAAA,EAAAA,GAAE,mBAIT,QAACgB,EAAD,UACGlB,EAASrC,KAAI,CAACwD,EAAGC,KAChB,8BAAgBD,IAALC,WAKjB,QAACC,EAAD,CAAkBC,WAAY,IAAKC,gBAAc,EAACC,SAAStB,EAAAA,EAAAA,GAAE,UAA7D,UACE,QAACuB,EAAD,CAAiBlB,UAAWhB,EAAKa,SAAjC,UACE,QAAC,IAAD,CAAuBsB,UAAY,GAAEnC,EAAKmC,YAAanC,KAAMA,UAKtE,EA9EGF,EAAAA,YAAAA,SAiFN,UAEMgC,GAAmB,OAAOM,EAAAA,EAAP,qBAAH,oDAIAC,EAAAA,EAAAA,GAAM,GAJN,MAQhBZ,GAAkB,OAAOa,EAAAA,EAAP,qBAAH,UACVC,GAAKA,EAAEC,MAAMC,SADH,KAIfjB,GAAQ,OAAO,MAAP,qBAAH,WAEPe,GAAMA,EAAEvB,SAAW,gBAAkB,IAF9B,kBAGOqB,EAAAA,EAAAA,GAAM,GAHb,KAMLV,GAAW,OAAO,MAAP,qBAAH,wCAGLU,EAAAA,EAAAA,GAAM,GAHD,2BAORH,GAAkB,OAAOQ,EAAAA,EAAP,sBACpBH,GAAMA,EAAEvB,SAAW,gBAAkB,IADpB,KCtGrB,MAAM2B,UAAoBpD,EAAAA,EAAwB,kEAc9BqD,UAChB,MAAMC,EAAa,IAAIjD,KAAKkD,MAAMC,UAElCC,EAAAA,EAAAA,KAAkBrC,EAAAA,EAAAA,GAAE,kBAEpBf,KAAKqD,UAASH,IAAS,CACrBC,QAASD,EAAMC,QAAQG,QAAOC,GAAOA,EAAI7C,KAAON,EAAKM,SAGvD,MAAM,MAAC8C,EAAD,UAAQjB,GAAavC,KAAKM,MAAMlC,OAEtC,UACQ4B,KAAKyD,IAAIC,eAAgB,aAAYF,KAASjB,UAAkBnC,EAAKM,MAAO,CAChFiD,OAAQ,YAEVC,EAAAA,EAAAA,KAAkB7C,EAAAA,EAAAA,GAAE,eAMrB,CALC,MAAO8C,GACP7D,KAAKqD,SAAS,CACZF,QAASF,KAEXa,EAAAA,EAAAA,KAAgB/C,EAAAA,EAAAA,GAAE,wBACnB,MAnC6C,+BAsC9BiC,MAAO/B,EAAmBb,KAC1C,MAAM6C,EAAa,IAAIjD,KAAKkD,MAAMC,UAElCC,EAAAA,EAAAA,KAAkBrC,EAAAA,EAAAA,GAAE,oBAEpBf,KAAKqD,UAASH,IAWL,CAACC,QAVQD,EAAMC,QAAQ3E,KAAI+E,GAC5BA,EAAI7C,KAAON,EAAKM,GACX,IACF6C,EACHtC,UAAWb,EAAKa,UAIbsC,QAKX,MAAM,MAACC,EAAD,UAAQjB,GAAavC,KAAKM,MAAMlC,OAEtC,UACQ4B,KAAKyD,IAAIC,eAAgB,aAAYF,KAASjB,UAAkBnC,EAAKM,MAAO,CAChFiD,OAAQ,MACRvD,KAAM,CAACa,eAET2C,EAAAA,EAAAA,IAAkB3C,GAAWF,EAAAA,EAAAA,GAAE,gBAAiBA,EAAAA,EAAAA,GAAE,gBAInD,CAHC,MAAO8C,IACPC,EAAAA,EAAAA,IAAgB7C,GAAWF,EAAAA,EAAAA,GAAE,uBAAwBA,EAAAA,EAAAA,GAAE,wBACvDf,KAAKqD,SAAS,CAACF,QAASF,GACzB,MApE6C,+BAuE9BD,UAChB,MAAM,MAACQ,EAAD,UAAQjB,GAAavC,KAAKM,MAAMlC,OAEtC,IACE,MAAMgC,QAAyBJ,KAAKyD,IAAIC,eACrC,aAAYF,KAASjB,UACtB,CACEoB,OAAQ,SAIZ3D,KAAKqD,UAASH,IAAS,CACrBC,QAAS,IAAID,EAAMC,QAAS/C,QAE9BwD,EAAAA,EAAAA,KAAkB7C,EAAAA,EAAAA,GAAE,sBAGrB,CAFC,MAAO8C,IACPC,EAAAA,EAAAA,KAAgB/C,EAAAA,EAAAA,GAAE,+CACnB,IAxF6C,CAChDlB,WACE,MAAM,UAAC0C,GAAavC,KAAKM,MAAMlC,OAC/B,OAAO2F,EAAAA,EAAAA,IAAchD,EAAAA,EAAAA,GAAE,eAAgBwB,GAAW,EACnD,CAEDyB,eACE,MAAM,MAACR,EAAD,UAAQjB,GAAavC,KAAKM,MAAMlC,OACtC,MAAO,CAAC,CAAC,UAAY,aAAYoF,KAASjB,WAC3C,CAkFD0B,cACE,OACE,QAAC,KAAD,WACE,QAAC,IAAD,CACEvC,MAAM,QAAC,KAAD,CAAUZ,KAAK,OACrBoD,aAAanD,EAAAA,EAAAA,GAAE,iDAItB,CAEDoD,gBACE,MAAM,SAAC9F,EAAD,aAAW+F,EAAX,OAAyBjG,EAAzB,OAAiCC,GAAU4B,KAAKM,OAChD,MAACkD,EAAD,UAAQjB,GAAanE,EACrBoC,EAAS,IAAI6D,IAAID,EAAa5D,QAEpC,OACE,QAAC,EAAA8D,SAAD,WACGtE,KAAKkD,MAAMC,QAAQ3E,KAAI+E,IACtB,QAAC,EAAD,CACEE,IAAKzD,KAAKyD,IACVjD,OAAQA,EAERgD,MAAOA,EACPjB,UAAY,GAAEA,IACdnC,KAAMmD,EACNhD,SAAUP,KAAKuE,gBACflE,SAAUL,KAAKwE,gBACfrG,OAAQA,EACRE,SAAUA,EACVD,OAAQA,GARHmF,EAAI7C,OAWb,QAAC,IAAD,CAAY+D,UAAWzE,KAAKkD,MAAMwB,qBAGvC,CAEDC,aACE,MAAMnE,EAAS,IAAI6D,IAAIrE,KAAKM,MAAM8D,aAAa5D,QACzCoE,GAAW5E,KAAKkD,MAAMC,QAAQ0B,OAEpC,OACE,eAAK,eAAa,eAAlB,WACE,QAAC,IAAD,CACE9E,OAAOgB,EAAAA,EAAAA,GAAE,eACT+D,OACEtE,EAAOI,IAAI,kBACT,QAAC,KAAD,CACEI,QAAShB,KAAK+E,gBACdjE,KAAK,KACLO,SAAS,UACTK,MAAM,QAAC,KAAD,CAASZ,KAAK,KAAKkE,WAAS,IAJpC,UAMGjE,EAAAA,EAAAA,GAAE,sBAEH,QAGR,QAAC,IAAD,WACGkE,EAAAA,EAAAA,IACE,8QAID,CACEC,MACE,QAAC,IAAD,CAAcC,KAAK,2EAErBC,MAAM,uBAKXR,EAAU5E,KAAKiE,cAAgBjE,KAAKmE,kBAG1C,EAGH,SAAekB,EAAAA,EAAAA,GAAiBtC,E,2tBC7KhC,MAAMuC,UAA8BnF,EAAAA,UAAwB,uDAG3C,CACboF,mBAAmB,KAJqC,mCAOpC,KACpBvF,KAAKqD,UAASH,IAAS,CACrBqC,mBAAoBrC,EAAMqC,qBAD5B,GARwD,CAa1DzF,SACE,MAAM,kBAACyF,GAAqBvF,KAAKkD,OAC3B,UACJX,EADI,KAEJnC,EAFI,QAGJoF,EAHI,cAIJC,EAJI,qBAKJC,EALI,aAMJC,EANI,WAOJC,EAPI,cAQJC,EARI,cASJC,EATI,cAUJC,GACE/F,KAAKM,MAET,OACE,QAAC,EAAAgE,SAAD,WACGmB,IACC,QAAC,IAAD,CACE3D,OAAOf,EAAAA,EAAAA,GAAE,OACTiF,QAAQ,EACRC,0BAAwB,EACxBC,MAAMjB,EAAAA,EAAAA,IAAI,4DAA6D,CACrEC,KAAMM,GACJ,QAAC,IAAD,CAAMvH,GAAG,GAAG+C,QAAShB,KAAKmG,oBAA1B,SACGZ,GACGxE,EAAAA,EAAAA,GAAE,wBACFA,EAAAA,EAAAA,GAAE,yBAEN,OAXR,WAcE,QAAC,KAAD,WACGqF,EAAAA,EAAAA,GAAe,CACdC,MAAOjG,EAAKkG,IAAIC,OAChBC,MAAO,cAGVjB,IACC,QAACkB,EAAD,CACE3E,MAAO,KACPoE,MAAMnF,EAAAA,EAAAA,GACJ,2KAEFiF,QAAQ,EACRC,0BAAwB,EAN1B,UAQE,QAAC,KAAD,WACGG,EAAAA,EAAAA,GAAe,CACdC,MAAOjG,EAAKkG,IAAII,OAChBF,MAAO,+BASjBf,GAAiBD,IACjB,QAAC,IAAD,CACE1D,OAAOf,EAAAA,EAAAA,GAAE,oBACTmF,MAAMnF,EAAAA,EAAAA,GACJ,2KAEFiF,QAAQ,EACRC,0BAAwB,EAN1B,UAQE,QAAC,KAAD,WACGG,EAAAA,EAAAA,GAAe,CACdC,MAAOjG,EAAKkG,IAAII,OAChBF,MAAO,2BAMdd,IACC,QAAC,IAAD,CACE5D,OAAOf,EAAAA,EAAAA,GAAE,4BACTmF,MAAMnF,EAAAA,EAAAA,GACJ,kFAEFiF,QAAQ,EACRC,0BAAwB,EAN1B,UAQE,QAAC,KAAD,WACGG,EAAAA,EAAAA,GAAe,CACdC,MAAOjG,EAAKkG,IAAIK,SAChBH,MAAO,qCAMdb,IACC,QAAC,IAAD,CACE7D,OAAOf,EAAAA,EAAAA,GAAE,qBACTmF,MAAMjB,EAAAA,EAAAA,IACJ,uFACA,CACEC,MACE,QAAC,IAAD,CAAcC,KAAK,4DAAnB,sCAMNa,QAAQ,EACRC,0BAAwB,EAb1B,UAeE,QAAC,KAAD,WACGG,EAAAA,EAAAA,GAAe,CACdC,MAAOjG,EAAKkG,IAAIM,SAChBJ,MAAO,8BAMdZ,IACC,QAAC,IAAD,CACE9D,OAAOf,EAAAA,EAAAA,GAAE,4BACTmF,MAAMnF,EAAAA,EAAAA,GAAE,2DACRiF,QAAQ,EACRC,0BAAwB,EAJ1B,UAME,QAAC,KAAD,WACGG,EAAAA,EAAAA,GAAe,CACdC,MAAOjG,EAAKkG,IAAIO,QAAU,GAC1BL,MAAO,4BAMdX,IACC,QAAC,IAAD,CAAO/D,OAAOf,EAAAA,EAAAA,GAAE,cAAeiF,QAAM,EAACC,0BAAwB,EAA9D,UACE,QAAC,KAAD,WACGG,EAAAA,EAAAA,GAAe,CACdC,MAAOjG,EAAKmG,OACZC,MAAO,sBAMdV,IACC,QAAC,IAAD,CAAOhE,OAAOf,EAAAA,EAAAA,GAAE,cAAeiF,QAAM,EAACC,0BAAwB,EAA9D,UACE,QAAC,KAAD,WACGG,EAAAA,EAAAA,GAAe,CACdC,MAAOjG,EAAKsG,OACZF,MAAO,sBAMdT,IACC,QAAC,IAAD,CAAOjE,OAAOf,EAAAA,EAAAA,GAAE,cAAeiF,QAAM,EAACC,0BAAwB,EAA9D,UACE,QAAC,KAAD,WACGG,EAAAA,EAAAA,GAAe,CACdC,MAAO9D,EACPiE,MAAO,wBAOpB,EAvLGlB,EAAAA,YAAAA,yB,OAAAA,EAAAA,eApBgB,CACpBE,SAAS,EACTC,eAAe,EACfC,sBAAsB,EACtBC,cAAc,EACdC,YAAY,EACZC,eAAe,EACfC,eAAe,EACfC,eAAe,IAsMjB,MAAMU,GAAc,OAAOK,EAAAA,EAAP,qBAAH,YACJrE,EAAAA,EAAAA,GAAM,IADF,WAIjB,G","sources":["webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/projectKeys/list/keyRow.tsx","webpack:///./app/views/settings/project/projectKeys/list/index.tsx","webpack:///./app/views/settings/project/projectKeys/projectKeyCredentials.tsx"],"sourcesContent":["import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'sentry/utils/replaceRouterParams';\nimport {RouteWithName} from 'sentry/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  routes: RouteWithName[];\n\n  location?: Location;\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {Client} from 'sentry/api';\nimport Button from 'sentry/components/button';\nimport ClippedBox from 'sentry/components/clippedBox';\nimport Confirm from 'sentry/components/confirm';\nimport Link from 'sentry/components/links/link';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {IconDelete} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Scope} from 'sentry/types';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport ProjectKeyCredentials from 'sentry/views/settings/project/projectKeys/projectKeyCredentials';\nimport {ProjectKey} from 'sentry/views/settings/project/projectKeys/types';\n\ntype Props = {\n  access: Set<Scope>;\n  api: Client;\n  data: ProjectKey;\n  onRemove: (data: ProjectKey) => void;\n  onToggle: (isActive: boolean, data: ProjectKey) => void;\n  orgId: string;\n  projectId: string;\n} & Pick<RouteComponentProps<{}, {}>, 'routes' | 'location' | 'params'>;\n\nclass KeyRow extends Component<Props> {\n  handleRemove = () => {\n    const {data, onRemove} = this.props;\n    onRemove(data);\n  };\n\n  handleEnable = () => {\n    const {onToggle, data} = this.props;\n    onToggle(true, data);\n  };\n\n  handleDisable = () => {\n    const {onToggle, data} = this.props;\n    onToggle(false, data);\n  };\n\n  render() {\n    const {access, data, routes, location, params} = this.props;\n    const editUrl = recreateRoute(`${data.id}/`, {routes, params, location});\n    const controlActive = access.has('project:write');\n\n    const controls = [\n      <Button key=\"edit\" to={editUrl} size=\"sm\">\n        {t('Configure')}\n      </Button>,\n      <Button\n        key=\"toggle\"\n        size=\"sm\"\n        onClick={data.isActive ? this.handleDisable : this.handleEnable}\n        disabled={!controlActive}\n      >\n        {data.isActive ? t('Disable') : t('Enable')}\n      </Button>,\n      <Confirm\n        key=\"remove\"\n        priority=\"danger\"\n        disabled={!controlActive}\n        onConfirm={this.handleRemove}\n        confirmText={t('Remove Key')}\n        message={t(\n          'Are you sure you want to remove this key? This action is irreversible.'\n        )}\n      >\n        <Button\n          size=\"sm\"\n          disabled={!controlActive}\n          icon={<IconDelete />}\n          aria-label={t('Delete')}\n        />\n      </Confirm>,\n    ];\n\n    return (\n      <Panel>\n        <PanelHeader hasButtons>\n          <Title disabled={!data.isActive}>\n            <PanelHeaderLink to={editUrl}>{data.label}</PanelHeaderLink>\n            {!data.isActive && (\n              <small>\n                {' \\u2014  '}\n                {t('Disabled')}\n              </small>\n            )}\n          </Title>\n          <Controls>\n            {controls.map((c, n) => (\n              <span key={n}> {c}</span>\n            ))}\n          </Controls>\n        </PanelHeader>\n\n        <StyledClippedBox clipHeight={300} defaultClipped btnText={t('Expand')}>\n          <StyledPanelBody disabled={!data.isActive}>\n            <ProjectKeyCredentials projectId={`${data.projectId}`} data={data} />\n          </StyledPanelBody>\n        </StyledClippedBox>\n      </Panel>\n    );\n  }\n}\n\nexport default KeyRow;\n\nconst StyledClippedBox = styled(ClippedBox)`\n  padding: 0;\n  margin: 0;\n  > *:last-child {\n    padding-bottom: ${space(3)};\n  }\n`;\n\nconst PanelHeaderLink = styled(Link)`\n  color: ${p => p.theme.subText};\n`;\n\nconst Title = styled('div')<{disabled: boolean}>`\n  flex: 1;\n  ${p => (p.disabled ? 'opacity: 0.5;' : '')};\n  margin-right: ${space(1)};\n`;\n\nconst Controls = styled('div')`\n  display: grid;\n  align-items: center;\n  gap: ${space(1)};\n  grid-auto-flow: column;\n`;\n\nconst StyledPanelBody = styled(PanelBody)<{disabled: boolean}>`\n  ${p => (p.disabled ? 'opacity: 0.5;' : '')};\n`;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport Button from 'sentry/components/button';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Pagination from 'sentry/components/pagination';\nimport {Panel} from 'sentry/components/panels';\nimport {IconAdd, IconFlag} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport {ProjectKey} from 'sentry/views/settings/project/projectKeys/types';\n\nimport KeyRow from './keyRow';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n} & RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\ntype State = {\n  keyList: ProjectKey[];\n} & AsyncView['state'];\n\nclass ProjectKeys extends AsyncView<Props, State> {\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Client Keys'), projectId, false);\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n    return [['keyList', `/projects/${orgId}/${projectId}/keys/`]];\n  }\n\n  /**\n   * Optimistically remove key\n   */\n  handleRemoveKey = async (data: ProjectKey) => {\n    const oldKeyList = [...this.state.keyList];\n\n    addLoadingMessage(t('Revoking key\\u2026'));\n\n    this.setState(state => ({\n      keyList: state.keyList.filter(key => key.id !== data.id),\n    }));\n\n    const {orgId, projectId} = this.props.params;\n\n    try {\n      await this.api.requestPromise(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {\n        method: 'DELETE',\n      });\n      addSuccessMessage(t('Revoked key'));\n    } catch (_err) {\n      this.setState({\n        keyList: oldKeyList,\n      });\n      addErrorMessage(t('Unable to revoke key'));\n    }\n  };\n\n  handleToggleKey = async (isActive: boolean, data: ProjectKey) => {\n    const oldKeyList = [...this.state.keyList];\n\n    addLoadingMessage(t('Saving changes\\u2026'));\n\n    this.setState(state => {\n      const keyList = state.keyList.map(key => {\n        if (key.id === data.id) {\n          return {\n            ...key,\n            isActive: !data.isActive,\n          };\n        }\n\n        return key;\n      });\n      return {keyList};\n    });\n\n    const {orgId, projectId} = this.props.params;\n\n    try {\n      await this.api.requestPromise(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {\n        method: 'PUT',\n        data: {isActive},\n      });\n      addSuccessMessage(isActive ? t('Enabled key') : t('Disabled key'));\n    } catch (_err) {\n      addErrorMessage(isActive ? t('Error enabling key') : t('Error disabling key'));\n      this.setState({keyList: oldKeyList});\n    }\n  };\n\n  handleCreateKey = async () => {\n    const {orgId, projectId} = this.props.params;\n\n    try {\n      const data: ProjectKey = await this.api.requestPromise(\n        `/projects/${orgId}/${projectId}/keys/`,\n        {\n          method: 'POST',\n        }\n      );\n\n      this.setState(state => ({\n        keyList: [...state.keyList, data],\n      }));\n      addSuccessMessage(t('Created a new key.'));\n    } catch (_err) {\n      addErrorMessage(t('Unable to create new key. Please try again.'));\n    }\n  };\n\n  renderEmpty() {\n    return (\n      <Panel>\n        <EmptyMessage\n          icon={<IconFlag size=\"xl\" />}\n          description={t('There are no keys active for this project.')}\n        />\n      </Panel>\n    );\n  }\n\n  renderResults() {\n    const {location, organization, routes, params} = this.props;\n    const {orgId, projectId} = params;\n    const access = new Set(organization.access);\n\n    return (\n      <Fragment>\n        {this.state.keyList.map(key => (\n          <KeyRow\n            api={this.api}\n            access={access}\n            key={key.id}\n            orgId={orgId}\n            projectId={`${projectId}`}\n            data={key}\n            onToggle={this.handleToggleKey}\n            onRemove={this.handleRemoveKey}\n            routes={routes}\n            location={location}\n            params={params}\n          />\n        ))}\n        <Pagination pageLinks={this.state.keyListPageLinks} />\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const access = new Set(this.props.organization.access);\n    const isEmpty = !this.state.keyList.length;\n\n    return (\n      <div data-test-id=\"project-keys\">\n        <SettingsPageHeader\n          title={t('Client Keys')}\n          action={\n            access.has('project:write') ? (\n              <Button\n                onClick={this.handleCreateKey}\n                size=\"sm\"\n                priority=\"primary\"\n                icon={<IconAdd size=\"xs\" isCircled />}\n              >\n                {t('Generate New Key')}\n              </Button>\n            ) : null\n          }\n        />\n        <TextBlock>\n          {tct(\n            `To send data to Sentry you will need to configure an SDK with a client key\n          (usually referred to as the [code:SENTRY_DSN] value). For more\n          information on integrating Sentry with your application take a look at our\n          [link:documentation].`,\n            {\n              link: (\n                <ExternalLink href=\"https://docs.sentry.io/platform-redirect/?next=/configuration/options/\" />\n              ),\n              code: <code />,\n            }\n          )}\n        </TextBlock>\n\n        {isEmpty ? this.renderEmpty() : this.renderResults()}\n      </div>\n    );\n  }\n}\n\nexport default withOrganization(ProjectKeys);\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport Field from 'sentry/components/forms/field';\nimport TextCopyInput from 'sentry/components/forms/textCopyInput';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Link from 'sentry/components/links/link';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {ProjectKey} from 'sentry/views/settings/project/projectKeys/types';\n\nconst DEFAULT_PROPS = {\n  showDsn: true,\n  showDsnPublic: true,\n  showSecurityEndpoint: true,\n  showMinidump: true,\n  showUnreal: true,\n  showPublicKey: false,\n  showSecretKey: false,\n  showProjectId: false,\n};\n\ntype Props = {\n  data: ProjectKey;\n  projectId: string;\n} & typeof DEFAULT_PROPS;\n\ntype State = {\n  showDeprecatedDsn: boolean;\n};\n\nclass ProjectKeyCredentials extends Component<Props, State> {\n  static defaultProps = DEFAULT_PROPS;\n\n  state: State = {\n    showDeprecatedDsn: false,\n  };\n\n  toggleDeprecatedDsn = () => {\n    this.setState(state => ({\n      showDeprecatedDsn: !state.showDeprecatedDsn,\n    }));\n  };\n\n  render() {\n    const {showDeprecatedDsn} = this.state;\n    const {\n      projectId,\n      data,\n      showDsn,\n      showDsnPublic,\n      showSecurityEndpoint,\n      showMinidump,\n      showUnreal,\n      showPublicKey,\n      showSecretKey,\n      showProjectId,\n    } = this.props;\n\n    return (\n      <Fragment>\n        {showDsnPublic && (\n          <Field\n            label={t('DSN')}\n            inline={false}\n            flexibleControlStateSize\n            help={tct('The DSN tells the SDK where to send the events to. [link]', {\n              link: showDsn ? (\n                <Link to=\"\" onClick={this.toggleDeprecatedDsn}>\n                  {showDeprecatedDsn\n                    ? t('Hide deprecated DSN')\n                    : t('Show deprecated DSN')}\n                </Link>\n              ) : null,\n            })}\n          >\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.dsn.public,\n                fixed: '__DSN__',\n              })}\n            </TextCopyInput>\n            {showDeprecatedDsn && (\n              <StyledField\n                label={null}\n                help={t(\n                  'Deprecated DSN includes a secret which is no longer required by newer SDK versions. If you are unsure which to use, follow installation instructions for your language.'\n                )}\n                inline={false}\n                flexibleControlStateSize\n              >\n                <TextCopyInput>\n                  {getDynamicText({\n                    value: data.dsn.secret,\n                    fixed: '__DSN_DEPRECATED__',\n                  })}\n                </TextCopyInput>\n              </StyledField>\n            )}\n          </Field>\n        )}\n\n        {/* this edge case should imho not happen, but just to be sure */}\n        {!showDsnPublic && showDsn && (\n          <Field\n            label={t('DSN (Deprecated)')}\n            help={t(\n              'Deprecated DSN includes a secret which is no longer required by newer SDK versions. If you are unsure which to use, follow installation instructions for your language.'\n            )}\n            inline={false}\n            flexibleControlStateSize\n          >\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.dsn.secret,\n                fixed: '__DSN_DEPRECATED__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n\n        {showSecurityEndpoint && (\n          <Field\n            label={t('Security Header Endpoint')}\n            help={t(\n              'Use your security header endpoint for features like CSP and Expect-CT reports.'\n            )}\n            inline={false}\n            flexibleControlStateSize\n          >\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.dsn.security,\n                fixed: '__SECURITY_HEADER_ENDPOINT__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n\n        {showMinidump && (\n          <Field\n            label={t('Minidump Endpoint')}\n            help={tct(\n              'Use this endpoint to upload [link], for example with Electron, Crashpad or Breakpad.',\n              {\n                link: (\n                  <ExternalLink href=\"https://docs.sentry.io/platforms/native/guides/minidumps/\">\n                    minidump crash reports\n                  </ExternalLink>\n                ),\n              }\n            )}\n            inline={false}\n            flexibleControlStateSize\n          >\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.dsn.minidump,\n                fixed: '__MINIDUMP_ENDPOINT__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n\n        {showUnreal && (\n          <Field\n            label={t('Unreal Engine 4 Endpoint')}\n            help={t('Use this endpoint to configure your UE4 Crash Reporter.')}\n            inline={false}\n            flexibleControlStateSize\n          >\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.dsn.unreal || '',\n                fixed: '__UNREAL_ENDPOINT__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n\n        {showPublicKey && (\n          <Field label={t('Public Key')} inline flexibleControlStateSize>\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.public,\n                fixed: '__PUBLICKEY__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n\n        {showSecretKey && (\n          <Field label={t('Secret Key')} inline flexibleControlStateSize>\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.secret,\n                fixed: '__SECRETKEY__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n\n        {showProjectId && (\n          <Field label={t('Project ID')} inline flexibleControlStateSize>\n            <TextCopyInput>\n              {getDynamicText({\n                value: projectId,\n                fixed: '__PROJECTID__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst StyledField = styled(Field)`\n  padding: ${space(0.5)} 0 0 0;\n`;\n\nexport default ProjectKeyCredentials;\n"],"names":["recreateRoute","to","options","routes","params","location","stepBack","paths","map","path","lastRootIndex","routeIndex","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","KeyRow","Component","data","onRemove","props","onToggle","access","editUrl","id","controlActive","has","controls","size","t","onClick","isActive","handleDisable","handleEnable","disabled","priority","onConfirm","handleRemove","confirmText","message","icon","hasButtons","Title","PanelHeaderLink","label","Controls","c","n","StyledClippedBox","clipHeight","defaultClipped","btnText","StyledPanelBody","projectId","ClippedBox","space","Link","p","theme","subText","PanelBody","ProjectKeys","async","oldKeyList","state","keyList","addLoadingMessage","setState","filter","key","orgId","api","requestPromise","method","addSuccessMessage","_err","addErrorMessage","routeTitleGen","getEndpoints","renderEmpty","description","renderResults","organization","Set","Fragment","handleToggleKey","handleRemoveKey","pageLinks","keyListPageLinks","renderBody","isEmpty","length","action","handleCreateKey","isCircled","tct","link","href","code","withOrganization","ProjectKeyCredentials","showDeprecatedDsn","showDsn","showDsnPublic","showSecurityEndpoint","showMinidump","showUnreal","showPublicKey","showSecretKey","showProjectId","inline","flexibleControlStateSize","help","toggleDeprecatedDsn","getDynamicText","value","dsn","public","fixed","StyledField","secret","security","minidump","unreal","Field"],"sourceRoot":""}