{"version":3,"file":"chunks/app_views_admin_adminRelays_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/links/linkWithConfirmation.tsx","webpack:///./app/components/resultGrid.tsx","webpack:///./app/views/admin/adminRelays.tsx"],"sourcesContent":["import {ButtonProps} from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\n\nimport Anchor from './anchor';\n\ntype Props = {\n  message: React.ReactNode;\n  onConfirm: () => void;\n  title: string;\n  children?: React.ReactNode;\n  className?: string;\n  disabled?: boolean;\n  priority?: ButtonProps['priority'];\n};\n\n/**\n * <Confirm> is a more generic version of this component\n */\nfunction LinkWithConfirmation({\n  className,\n  disabled,\n  title,\n  children,\n  ...otherProps\n}: Props) {\n  return (\n    <Confirm {...otherProps} disabled={disabled}>\n      <Anchor href=\"#\" className={className} disabled={disabled} title={title}>\n        {children}\n      </Anchor>\n    </Confirm>\n  );\n}\n\nexport default LinkWithConfirmation;\n","import {Component} from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport {Client, RequestOptions} from 'sentry/api';\nimport DropdownLink from 'sentry/components/dropdownLink';\nimport MenuItem from 'sentry/components/menuItem';\nimport Pagination from 'sentry/components/pagination';\nimport {IconSearch} from 'sentry/icons';\nimport withApi from 'sentry/utils/withApi';\n\ntype Option = [value: string, label: string];\n\ntype FilterProps = {\n  location: Location;\n  name: string;\n  options: Option[];\n  path: string;\n  queryKey: string;\n  value: string;\n};\n\nclass Filter extends Component<FilterProps> {\n  getCurrentLabel() {\n    const selected = this.props.options.find(\n      item => item[0] === (this.props.value ?? '')\n    );\n    if (selected) {\n      return this.props.name + ': ' + selected[1];\n    }\n    return this.props.name + ': ' + 'Any';\n  }\n\n  getDefaultItem() {\n    const query = {...this.props.location.query, cursor: ''};\n    delete query[this.props.queryKey];\n\n    return (\n      <MenuItem\n        key=\"\"\n        isActive={this.props.value === '' || !this.props.value}\n        to={{pathname: this.props.path, query}}\n      >\n        Any\n      </MenuItem>\n    );\n  }\n\n  getSelector = () => (\n    <DropdownLink title={this.getCurrentLabel()}>\n      {this.getDefaultItem()}\n      {this.props.options.map(([value, label]) => {\n        const filterQuery = {\n          [this.props.queryKey]: value,\n          cursor: '',\n        };\n\n        const query = {...this.props.location.query, ...filterQuery};\n        return (\n          <MenuItem\n            key={value}\n            isActive={this.props.value === value}\n            to={{pathname: this.props.path, query}}\n          >\n            {label}\n          </MenuItem>\n        );\n      })}\n    </DropdownLink>\n  );\n\n  render() {\n    return (\n      <div className=\"filter-options\">\n        {this.props.options.length === 1 ? (\n          <strong>{this.getCurrentLabel()}</strong>\n        ) : (\n          this.getSelector()\n        )}\n      </div>\n    );\n  }\n}\n\ntype SortByProps = {\n  location: Location;\n  options: Option[];\n  path: string;\n  value: string;\n};\n\nclass SortBy extends Component<SortByProps> {\n  getCurrentSortLabel() {\n    return this.props.options.find(([value]) => value === this.props.value)?.[1];\n  }\n\n  getSortBySelector() {\n    return (\n      <DropdownLink title={this.getCurrentSortLabel()} className=\"sorted-by\">\n        {this.props.options.map(([value, label]) => {\n          const query = {...this.props.location.query, sortBy: value, cursor: ''};\n          return (\n            <MenuItem\n              isActive={this.props.value === value}\n              key={value}\n              to={{pathname: this.props.path, query}}\n            >\n              {label}\n            </MenuItem>\n          );\n        })}\n      </DropdownLink>\n    );\n  }\n\n  render() {\n    if (this.props.options.length === 0) {\n      return null;\n    }\n\n    return (\n      <div className=\"sort-options\">\n        Showing results sorted by\n        {this.props.options.length === 1 ? (\n          <strong className=\"sorted-by\">{this.getCurrentSortLabel()}</strong>\n        ) : (\n          this.getSortBySelector()\n        )}\n      </div>\n    );\n  }\n}\n\ntype FilterConfig = {\n  name: string;\n  options: Option[];\n};\n\n// XXX(ts): Using Partial here on the DefaultProps is not really correct, since\n// defaultProps guarantees they'll be set. But because this component is\n// wrapped with a HoC, we lose the defaultProps, and users of the component\ntype Props = {\n  api: Client;\n  location: Location;\n} & Partial<DefaultProps>;\n\ntype DefaultProps = {\n  columns: React.ReactNode[];\n  columnsForRow: (row: any) => React.ReactNode[];\n  defaultParams: Record<string, any>;\n  defaultSort: string;\n  endpoint: string;\n  filters: Record<string, FilterConfig>;\n  hasPagination: boolean;\n  hasSearch: boolean;\n  keyForRow: (row: any) => string;\n  method: RequestOptions['method'];\n  path: string;\n  sortOptions: Option[];\n};\n\ntype State = {\n  error: string | boolean;\n  filters: Record<string, string>;\n  loading: boolean;\n  pageLinks: null | string;\n  query: string;\n  rows: any[];\n  sortBy: string;\n};\n\nclass ResultGrid extends Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    path: '',\n    endpoint: '',\n    method: 'GET',\n    columns: [],\n    sortOptions: [],\n    filters: {},\n    defaultSort: '',\n    keyForRow: row => row.id,\n    columnsForRow: () => [],\n    defaultParams: {\n      per_page: 50,\n    },\n    hasPagination: true,\n    hasSearch: false,\n  };\n\n  state: State = this.defaultState;\n\n  componentWillMount() {\n    this.fetchData();\n  }\n\n  componentWillReceiveProps() {\n    const queryParams = this.query;\n    this.setState(\n      {\n        query: queryParams.query ?? '',\n        sortBy: queryParams.sortBy ?? this.props.defaultSort,\n        filters: {...queryParams},\n        pageLinks: null,\n        loading: true,\n        error: false,\n      },\n      this.fetchData\n    );\n  }\n\n  get defaultState() {\n    const queryParams = this.query;\n\n    return {\n      rows: [],\n      loading: true,\n      error: false,\n      pageLinks: null,\n      query: queryParams.query ?? '',\n      sortBy: queryParams.sortBy ?? this.props.defaultSort,\n      filters: {...queryParams},\n    } as State;\n  }\n\n  get query() {\n    return ((this.props.location ?? {}).query ?? {}) as {[k: string]: string};\n  }\n\n  remountComponent() {\n    this.setState(this.defaultState, this.fetchData);\n  }\n\n  refresh() {\n    this.setState({loading: true}, this.fetchData);\n  }\n\n  fetchData() {\n    // TODO(dcramer): this should explicitly allow filters/sortBy/cursor/perPage\n    const queryParams = {\n      ...this.props.defaultParams,\n      sortBy: this.state.sortBy,\n      ...this.query,\n    };\n\n    this.props.api.request(this.props.endpoint!, {\n      method: this.props.method,\n      data: queryParams,\n      success: (data, _, resp) => {\n        this.setState({\n          loading: false,\n          error: false,\n          rows: data,\n          pageLinks: resp?.getResponseHeader('Link') ?? null,\n        });\n      },\n      error: () => {\n        this.setState({\n          loading: false,\n          error: true,\n        });\n      },\n    });\n  }\n\n  onSearch = (e: React.FormEvent<HTMLFormElement>) => {\n    const location = this.props.location ?? {};\n    const {query} = this.state;\n    const targetQueryParams = {...(location.query ?? {}), query, cursor: ''};\n\n    e.preventDefault();\n\n    browserHistory.push({\n      pathname: this.props.path,\n      query: targetQueryParams,\n    });\n  };\n\n  onQueryChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({query: evt.target.value});\n  };\n\n  renderLoading() {\n    return (\n      <tr>\n        <td colSpan={this.props.columns!.length}>\n          <div className=\"loading\">\n            <div className=\"loading-indicator\" />\n            <div className=\"loading-message\">Hold on to your butts!</div>\n          </div>\n        </td>\n      </tr>\n    );\n  }\n\n  renderError() {\n    return (\n      <tr>\n        <td colSpan={this.props.columns!.length}>\n          <div className=\"alert-block alert-error\">Something bad happened :(</div>\n        </td>\n      </tr>\n    );\n  }\n\n  renderNoResults() {\n    return (\n      <tr>\n        <td colSpan={this.props.columns!.length}>No results found.</td>\n      </tr>\n    );\n  }\n\n  renderResults() {\n    return this.state.rows.map(row => (\n      <tr key={this.props.keyForRow?.(row)}>{this.props.columnsForRow?.(row)}</tr>\n    ));\n  }\n\n  render() {\n    const {filters, sortOptions, path, location} = this.props;\n    return (\n      <div className=\"result-grid\">\n        <div className=\"table-options\">\n          {this.props.hasSearch && (\n            <div className=\"result-grid-search\">\n              <form onSubmit={this.onSearch}>\n                <div className=\"form-group\">\n                  <input\n                    type=\"text\"\n                    className=\"form-control input-search\"\n                    placeholder=\"search\"\n                    style={{width: 300}}\n                    name=\"query\"\n                    autoComplete=\"off\"\n                    value={this.state.query}\n                    onChange={this.onQueryChange}\n                  />\n                  <button type=\"submit\" className=\"btn btn-sm btn-primary\">\n                    <IconSearch size=\"xs\" />\n                  </button>\n                </div>\n              </form>\n            </div>\n          )}\n          <SortBy\n            options={sortOptions ?? []}\n            value={this.state.sortBy}\n            path={path ?? ''}\n            location={location}\n          />\n          {Object.keys(filters ?? {}).map(filterKey => (\n            <Filter\n              key={filterKey}\n              queryKey={filterKey}\n              value={this.state.filters[filterKey]}\n              path={path ?? ''}\n              location={location}\n              {...(filters?.[filterKey] as FilterConfig)}\n            />\n          ))}\n        </div>\n\n        <table className=\"table table-grid\">\n          <thead>\n            <tr>{this.props.columns}</tr>\n          </thead>\n          <tbody>\n            {this.state.loading\n              ? this.renderLoading()\n              : this.state.error\n              ? this.renderError()\n              : this.state.rows.length === 0\n              ? this.renderNoResults()\n              : this.renderResults()}\n          </tbody>\n        </table>\n        {this.props.hasPagination && this.state.pageLinks && (\n          <Pagination pageLinks={this.state.pageLinks} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport {ResultGrid};\n\nexport default withApi(ResultGrid);\n","import {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport moment from 'moment';\n\nimport {Client} from 'sentry/api';\nimport LinkWithConfirmation from 'sentry/components/links/linkWithConfirmation';\nimport ResultGrid from 'sentry/components/resultGrid';\nimport {t} from 'sentry/locale';\nimport withApi from 'sentry/utils/withApi';\n\nconst prettyDate = (x: string) => moment(x).format('ll LTS');\n\ntype Props = RouteComponentProps<{}, {}> & {api: Client};\n\ntype State = {\n  loading: boolean;\n};\n\ntype RelayRow = {\n  firstSeen: string;\n  id: string;\n  lastSeen: string;\n  publicKey: string;\n  relayId: string;\n};\n\nclass AdminRelays extends Component<Props, State> {\n  state: State = {\n    loading: false,\n  };\n\n  onDelete(key: string) {\n    this.setState({loading: true});\n    this.props.api.request(`/relays/${key}/`, {\n      method: 'DELETE',\n      success: () => this.setState({loading: false}),\n      error: () => this.setState({loading: false}),\n    });\n  }\n\n  getRow(row: RelayRow) {\n    return [\n      <td key=\"id\">\n        <strong>{row.relayId}</strong>\n      </td>,\n      <td key=\"key\">{row.publicKey}</td>,\n      <td key=\"firstSeen\" style={{textAlign: 'right'}}>\n        {prettyDate(row.firstSeen)}\n      </td>,\n      <td key=\"lastSeen\" style={{textAlign: 'right'}}>\n        {prettyDate(row.lastSeen)}\n      </td>,\n      <td key=\"tools\" style={{textAlign: 'right'}}>\n        <span className=\"editor-tools\">\n          <LinkWithConfirmation\n            className=\"danger\"\n            title=\"Remove\"\n            message={t('Are you sure you wish to delete this relay?')}\n            onConfirm={() => this.onDelete(row.id)}\n          >\n            {t('Remove')}\n          </LinkWithConfirmation>\n        </span>\n      </td>,\n    ];\n  }\n\n  render() {\n    const columns = [\n      <th key=\"id\" style={{width: 350, textAlign: 'left'}}>\n        Relay\n      </th>,\n      <th key=\"key\">Public Key</th>,\n      <th key=\"firstSeen\" style={{width: 150, textAlign: 'right'}}>\n        First seen\n      </th>,\n      <th key=\"lastSeen\" style={{width: 150, textAlign: 'right'}}>\n        Last seen\n      </th>,\n      <th key=\"tools\" />,\n    ];\n\n    return (\n      <div>\n        <h3>{t('Relays')}</h3>\n        <ResultGrid\n          path=\"/manage/relays/\"\n          endpoint=\"/relays/\"\n          method=\"GET\"\n          columns={columns}\n          columnsForRow={this.getRow}\n          hasSearch={false}\n          sortOptions={[\n            ['firstSeen', 'First seen'],\n            ['lastSeen', 'Last seen'],\n            ['relayId', 'Relay ID'],\n          ]}\n          defaultSort=\"firstSeen\"\n          {...this.props}\n        />\n      </div>\n    );\n  }\n}\n\nexport {AdminRelays};\n\nexport default withApi(AdminRelays);\n"],"names":["LinkWithConfirmation","className","disabled","title","children","otherProps","href","Filter","Component","this","getCurrentLabel","getDefaultItem","props","options","map","value","label","filterQuery","queryKey","cursor","query","location","isActive","to","pathname","path","selected","find","item","name","render","length","getSelector","SortBy","getCurrentSortLabel","getSortBySelector","sortBy","ResultGrid","defaultState","e","state","targetQueryParams","preventDefault","browserHistory","evt","setState","target","componentWillMount","fetchData","componentWillReceiveProps","queryParams","defaultSort","filters","pageLinks","loading","error","rows","remountComponent","refresh","defaultParams","api","request","endpoint","method","data","success","_","resp","getResponseHeader","renderLoading","colSpan","columns","renderError","renderNoResults","renderResults","row","columnsForRow","keyForRow","sortOptions","hasSearch","onSubmit","onSearch","type","placeholder","style","width","autoComplete","onChange","onQueryChange","size","Object","keys","filterKey","hasPagination","id","per_page","withApi","prettyDate","x","moment","format","AdminRelays","onDelete","key","getRow","relayId","publicKey","textAlign","firstSeen","lastSeen","message","t","onConfirm"],"sourceRoot":""}