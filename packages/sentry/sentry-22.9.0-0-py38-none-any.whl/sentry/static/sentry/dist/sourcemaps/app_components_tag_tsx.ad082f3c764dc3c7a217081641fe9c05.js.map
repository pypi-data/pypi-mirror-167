{"version":3,"file":"chunks/app_components_tag_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"8xBAcA,MAAMA,EAAa,OAuCnB,SAASC,EAAT,GAWU,IAXG,KACXC,EAAO,UADI,KAEXC,EAFW,YAGXC,EAHW,GAIXC,EAJW,QAKXC,EALW,KAMXC,EANW,UAOXC,EAPW,SAQXC,EARW,aASXC,EAAe,OACZC,GACK,EACR,MAAMC,EAAa,CACjBC,KAAM,OACNC,MAAOC,EAAAA,GAAAA,IAAUb,GAAMc,WAGnBC,GACJ,QAAC,IAAD,CAASC,MAAOd,EAAae,qBAAqB,cAAlD,UACE,QAACC,EAAD,CAAYlB,KAAMA,EAAlB,WAkCEmB,EAAAA,EAAAA,gBAAelB,IACV,QAACmB,EAAD,WAAcC,EAAAA,EAAAA,cAAapB,EAAM,IAAIS,QAGzCY,EAAAA,EAAAA,IAAQjB,KAASiB,EAAAA,EAAAA,IAAQnB,UAAiBoB,IAATtB,GAElC,QAACmB,EAAD,WACE,QAAC,KAAD,IAAcV,MAKb,MA3CH,QAACc,EAAD,CAAMxB,KAAMA,EAAMyB,SAAUjB,EAA5B,SACGD,KAGFe,EAAAA,EAAAA,IAAQhB,KACP,QAACoB,EAAD,CACEtB,QAYV,SAAuBuB,GACrBA,EAAMC,iBACNtB,SAAAA,GACD,EAdSK,KAAK,OACLkB,SAAS,OACT,cAAYC,EAAAA,EAAAA,GAAE,WAJhB,UAME,QAAC,KAAD,CAAWC,WAAS,KAAKrB,WAsDnC,OACE,QAACsB,EAAD,IAAgBvB,EAAOL,QA3CD,MACtB6B,EAAAA,EAAAA,GAA4B,cAAe,CACzCC,cAAcZ,EAAAA,EAAAA,IAAQlB,KAAYkB,EAAAA,EAAAA,IAAQnB,KAAOmB,EAAAA,EAAAA,IAAQjB,GACzD8B,aAAc,MAFhB,EA0CA,UAnBIb,EAAAA,EAAAA,IAAQjB,IACH,QAAC,IAAD,CAAcA,KAAMA,EAApB,SAA2BU,KAGhCO,EAAAA,EAAAA,IAAQnB,KAAOmB,EAAAA,EAAAA,IAAQlB,IAEvB,QAAC,IAAD,CAAMD,GAAIA,EAAIC,QAASA,EAAvB,SACGW,KAIHO,EAAAA,EAAAA,IAAQnB,IACH,QAAC,IAAD,CAAMA,GAAIA,EAAV,SAAeY,IAGjBA,GAQV,CA5FQhB,EAAAA,YAAAA,MA8FT,MAAMiC,GAAa,OAAO,OAAP,qBAAH,cACDI,GAAKA,EAAEvB,MAAMwB,eADZ,KAIHnB,GAAa,OAAO,MAAP,qBAAH,iDAGXpB,EAHW,kBAIJA,EAJI,sBAKDsC,GAAKA,EAAEvB,MAAME,IAAIqB,EAAEpC,MAAMsC,YALxB,sBAMDF,GAAKA,EAAEvB,MAAME,IAAIqB,EAAEpC,MAAMuC,QANxB,eAORC,EAAAA,EAAAA,GAAM,GAPE,KAUjBpB,GAAc,OAAO,OAAP,qBAAH,iBACCoB,EAAAA,EAAAA,GAAM,IADP,yBAKXhB,GAAO,OAAO,OAAP,qBAAH,UACCY,GACP,CAAC,QAAS,SAASK,SAASL,EAAEpC,MAC1BoC,EAAEvB,MAAME,IAAIqB,EAAEpC,MAAMc,UACpBsB,EAAEvB,MAAM6B,WAJN,eAKKN,GAAKA,EAAEX,UALZ,4EASO3B,EATP,KAYJ4B,GAAgB,OAAOiB,EAAAA,GAAP,qBAAH,gBACFH,EAAAA,EAAAA,GAAM,IADJ,iBAKnB,G","sources":["webpack:///./app/components/tag.tsx"],"sourcesContent":["import {cloneElement, isValidElement} from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Link, {LinkProps} from 'sentry/components/links/link';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconClose, IconOpen} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {defined} from 'sentry/utils';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport theme, {Color, Theme} from 'sentry/utils/theme';\n\nconst TAG_HEIGHT = '20px';\n\ninterface Props extends React.HTMLAttributes<HTMLSpanElement> {\n  /**\n   * Makes the tag clickable. Use for external links.\n   * If no icon is passed, it defaults to IconOpen (can be removed by passing icon={null})\n   */\n  href?: string;\n  /**\n   * Icon on the left side.\n   */\n  icon?: React.ReactNode;\n  /**\n   * Triggered when the item is clicked\n   */\n  onClick?: (eventKey: any) => void;\n  /**\n   * Shows clickable IconClose on the right side.\n   */\n  onDismiss?: () => void;\n  /**\n   * Max width of the tag's text\n   */\n  textMaxWidth?: number;\n  /**\n   * Makes the tag clickable. Use for internal links handled by react router.\n   * If no icon is passed, it defaults to IconOpen (can be removed by passing icon={null})\n   */\n  to?: LinkProps['to'];\n  /**\n   * Text to show up on a hover.\n   */\n  tooltipText?: React.ComponentProps<typeof Tooltip>['title'];\n  /**\n   * Dictates color scheme of the tag.\n   */\n  type?: keyof Theme['tag'];\n}\n\nfunction Tag({\n  type = 'default',\n  icon,\n  tooltipText,\n  to,\n  onClick,\n  href,\n  onDismiss,\n  children,\n  textMaxWidth = 150,\n  ...props\n}: Props) {\n  const iconsProps = {\n    size: '11px',\n    color: theme.tag[type].iconColor as Color,\n  };\n\n  const tag = (\n    <Tooltip title={tooltipText} containerDisplayMode=\"inline-flex\">\n      <Background type={type}>\n        {tagIcon()}\n\n        <Text type={type} maxWidth={textMaxWidth}>\n          {children}\n        </Text>\n\n        {defined(onDismiss) && (\n          <DismissButton\n            onClick={handleDismiss}\n            size=\"zero\"\n            priority=\"link\"\n            aria-label={t('Dismiss')}\n          >\n            <IconClose isCircled {...iconsProps} />\n          </DismissButton>\n        )}\n      </Background>\n    </Tooltip>\n  );\n\n  function handleDismiss(event: React.MouseEvent) {\n    event.preventDefault();\n    onDismiss?.();\n  }\n\n  const trackClickEvent = () => {\n    trackAdvancedAnalyticsEvent('tag.clicked', {\n      is_clickable: defined(onClick) || defined(to) || defined(href),\n      organization: null,\n    });\n  };\n\n  function tagIcon() {\n    if (isValidElement(icon)) {\n      return <IconWrapper>{cloneElement(icon, {...iconsProps})}</IconWrapper>;\n    }\n\n    if ((defined(href) || defined(to)) && icon === undefined) {\n      return (\n        <IconWrapper>\n          <IconOpen {...iconsProps} />\n        </IconWrapper>\n      );\n    }\n\n    return null;\n  }\n\n  function tagWithParent() {\n    if (defined(href)) {\n      return <ExternalLink href={href}>{tag}</ExternalLink>;\n    }\n\n    if (defined(to) && defined(onClick)) {\n      return (\n        <Link to={to} onClick={onClick}>\n          {tag}\n        </Link>\n      );\n    }\n    if (defined(to)) {\n      return <Link to={to}>{tag}</Link>;\n    }\n\n    return tag;\n  }\n\n  return (\n    <TagWrapper {...props} onClick={trackClickEvent}>\n      {tagWithParent()}\n    </TagWrapper>\n  );\n}\n\nconst TagWrapper = styled('span')`\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nexport const Background = styled('div')<{type: keyof Theme['tag']}>`\n  display: inline-flex;\n  align-items: center;\n  height: ${TAG_HEIGHT};\n  border-radius: ${TAG_HEIGHT};\n  background-color: ${p => p.theme.tag[p.type].background};\n  border: solid 1px ${p => p.theme.tag[p.type].border};\n  padding: 0 ${space(1)};\n`;\n\nconst IconWrapper = styled('span')`\n  margin-right: ${space(0.5)};\n  display: inline-flex;\n`;\n\nconst Text = styled('span')<{maxWidth: number; type: keyof Theme['tag']}>`\n  color: ${p =>\n    ['black', 'white'].includes(p.type)\n      ? p.theme.tag[p.type].iconColor\n      : p.theme.textColor};\n  max-width: ${p => p.maxWidth}px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  line-height: ${TAG_HEIGHT};\n`;\n\nconst DismissButton = styled(Button)`\n  margin-left: ${space(0.5)};\n  border: none;\n`;\n\nexport default Tag;\n"],"names":["TAG_HEIGHT","Tag","type","icon","tooltipText","to","onClick","href","onDismiss","children","textMaxWidth","props","iconsProps","size","color","theme","iconColor","tag","title","containerDisplayMode","Background","isValidElement","IconWrapper","cloneElement","defined","undefined","Text","maxWidth","DismissButton","event","preventDefault","priority","t","isCircled","TagWrapper","trackAdvancedAnalyticsEvent","is_clickable","organization","p","fontSizeSmall","background","border","space","includes","textColor","Button"],"sourceRoot":""}