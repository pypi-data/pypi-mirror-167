{"version":3,"file":"chunks/app_components_featureFeedback_feedbackModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"8rCA0BA,MAAMA,EAAiB,IAAIC,EAAAA,EAAc,CAEvCC,IAAK,uEACLC,UAAWC,EAAAA,EACXC,YAAaC,EAAAA,GACbC,aAAcC,EAAAA,KAGVC,EAAuB,EAC3BC,EAAAA,EAAAA,GAAE,8BACFA,EAAAA,EAAAA,GAAE,wBACFA,EAAAA,EAAAA,GAAE,iBAYG,SAASC,EAAT,GAOG,IAPoB,OAC5BC,EAD4B,KAE5BC,EAF4B,OAG5BC,EAH4B,WAI5BC,EAJ4B,cAK5BC,EAAgBP,EALY,YAM5BQ,GACQ,EACR,MAAM,aAACC,IAAgBC,EAAAA,EAAAA,GAAeC,EAAAA,IAChC,SAACC,EAAUC,gBAAiBC,IAAkBC,EAAAA,EAAAA,KAC9CC,GAAWC,EAAAA,EAAAA,MACX,KAACC,EAAD,aAAOC,GAAgBC,EAAAA,EAAAA,aAEtBC,EAAOC,IAAYC,EAAAA,EAAAA,UAAgB,CACxCC,aAASC,EACTC,oBAAgBD,IAGZE,GAAUC,EAAAA,EAAAA,UAAQ,KACtB,GAAId,GAAkBE,EAASa,MAAMF,QACnC,OAAOf,EAASkB,MAAKC,GAAKA,EAAEC,KAAOhB,EAASa,MAAMF,SAEpD,GACC,CAACb,EAAgBF,EAAUI,EAASa,MAAMF,UAiC7C,OACE,QAAC,EAAAM,SAAD,YACE,QAAC9B,EAAD,CAAQ+B,aAAW,EAAnB,UACE,wBAAKjC,EAAAA,EAAAA,GAAE,wBAET,QAACG,EAAD,YACE,QAAC,IAAD,CACE+B,OAAOlC,EAAAA,EAAAA,GAAE,oBACTmC,KAAK,UACLC,QAAQ,EACRC,QAAS/B,EAAcgC,KAAI,CAACC,EAAcC,KAAf,CACzBC,MAAOD,EACPN,MAAOK,MAETG,aAAa1C,EAAAA,EAAAA,GAAE,2BACfyC,MAAOrB,EAAMG,QACboB,SAAUF,GAASpB,EAAS,IAAID,EAAOG,QAASkB,IAChDG,0BAAwB,EACxBC,SAAO,EACPC,UAAQ,KAEV,QAAC,IAAD,CACEZ,OAAOlC,EAAAA,EAAAA,GAAE,uBACToC,QAAQ,EACRU,UAAU,EACVF,0BAAwB,EACxBC,SAAO,EALT,UAOE,QAAC,IAAD,CACEV,KAAK,sBACLM,MAAOrB,EAAMK,eACbsB,KAAM,EACNC,UAAQ,EACRN,aAAa1C,EAAAA,EAAAA,GAAE,wBACf2C,SAAUM,GACR5B,EAAS,IACJD,EACHK,eAAgBwB,EAAMC,OAAOT,YAKpCvB,IACC,uBACGiC,EAAAA,EAAAA,IACC,mKACA,CACEC,eAAe,QAAC,IAAD,CAAcC,KAAK,uCAM5C,QAACjD,EAAD,WACE,QAAC,KAAD,CAAWkD,IAAK,EAAhB,WACE,QAAC,KAAD,CAAQC,QAASlD,EAAjB,UAA8BL,EAAAA,EAAAA,GAAE,aAChC,QAAC,KAAD,CACEwD,SAAS,UACTD,QAzFV,WAAwB,UACtB,MAAM,QAAChC,EAAD,eAAUE,GAAkBL,GAE7BqC,EAAAA,EAAAA,IAAQlC,KAIbjC,EAAeoE,aAAa,CAC1BC,QAASlC,SAAAA,EAAgBmC,OACpB,aAAYtD,EAAciB,QAAcE,IACxC,aAAYnB,EAAciB,KAC/BsC,QAAS,CACPC,IAAK/C,EAASgD,UAEhBC,MAAO,CACLC,YAAW,UAAEzD,aAAF,EAAEA,EAAc0D,gBAAhB,QAA4B,GACvCC,UAAS,UAAE3D,aAAF,EAAEA,EAAc4D,cAAhB,QAA0B,GACnCC,gBAAe,UAAE3C,aAAF,EAAEA,EAASwC,gBAAX,QAAuB,IAExCI,KAAM,CACJ/D,eAEFU,OACAsD,MAAO,UAGTC,EAAAA,EAAAA,KAAkBxE,EAAAA,EAAAA,GAAE,uDAEpBK,IACD,EA6DSoE,WAAWhB,EAAAA,EAAAA,IAAQrC,EAAMG,SAH3B,UAKGvB,EAAAA,EAAAA,GAAE,4BAMd,CA3HeC,EAAAA,YAAAA,gBA6HT,MAAMyE,EAAW,CAAH,mD,sGCtKd,SAAS1D,IAEd,OADc2D,EAAAA,EAAAA,KACD5D,QACd,C","sources":["webpack:///./app/components/featureFeedback/feedbackModal.tsx","webpack:///./app/utils/useLocation.tsx"],"sourcesContent":["import {Fragment, useMemo, useState} from 'react';\nimport {css} from '@emotion/react';\nimport {\n  BrowserClient,\n  defaultIntegrations,\n  defaultStackParser,\n  makeFetchTransport,\n} from '@sentry/react';\n\nimport {addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport Button from 'sentry/components/button';\nimport Textarea from 'sentry/components/forms/controls/textarea';\nimport SelectField from 'sentry/components/forms/selectField';\nimport {t, tct} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport OrganizationStore from 'sentry/stores/organizationStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport {defined} from 'sentry/utils';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useProjects from 'sentry/utils/useProjects';\n\nimport ButtonBar from '../buttonBar';\nimport Field from '../forms/field';\nimport ExternalLink from '../links/externalLink';\n\nconst feedbackClient = new BrowserClient({\n  // feedback project under Sentry organization\n  dsn: 'https://3c5ef4e344a04a0694d187a1272e96de@o1.ingest.sentry.io/6356259',\n  transport: makeFetchTransport,\n  stackParser: defaultStackParser,\n  integrations: defaultIntegrations,\n});\n\nconst defaultFeedbackTypes = [\n  t(\"I don't like this feature\"),\n  t('I like this feature'),\n  t('Other reason'),\n];\n\nexport interface FeedBackModalProps {\n  featureName: string;\n  feedbackTypes?: string[];\n}\n\ninterface Props extends FeedBackModalProps, ModalRenderProps {}\n\ntype State = {additionalInfo?: string; subject?: number};\n\nexport function FeedbackModal({\n  Header,\n  Body,\n  Footer,\n  closeModal,\n  feedbackTypes = defaultFeedbackTypes,\n  featureName,\n}: Props) {\n  const {organization} = useLegacyStore(OrganizationStore);\n  const {projects, initiallyLoaded: projectsLoaded} = useProjects();\n  const location = useLocation();\n  const {user, isSelfHosted} = ConfigStore.getConfig();\n\n  const [state, setState] = useState<State>({\n    subject: undefined,\n    additionalInfo: undefined,\n  });\n\n  const project = useMemo(() => {\n    if (projectsLoaded && location.query.project) {\n      return projects.find(p => p.id === location.query.project);\n    }\n    return undefined;\n  }, [projectsLoaded, projects, location.query.project]);\n\n  function handleSubmit() {\n    const {subject, additionalInfo} = state;\n\n    if (!defined(subject)) {\n      return;\n    }\n\n    feedbackClient.captureEvent({\n      message: additionalInfo?.trim()\n        ? `Feedback: ${feedbackTypes[subject]} - ${additionalInfo}`\n        : `Feedback: ${feedbackTypes[subject]}`,\n      request: {\n        url: location.pathname,\n      },\n      extra: {\n        orgFeatures: organization?.features ?? [],\n        orgAccess: organization?.access ?? [],\n        projectFeatures: project?.features ?? [],\n      },\n      tags: {\n        featureName,\n      },\n      user,\n      level: 'info',\n    });\n\n    addSuccessMessage(t('Thanks for taking the time to provide us feedback!'));\n\n    closeModal();\n  }\n\n  return (\n    <Fragment>\n      <Header closeButton>\n        <h3>{t('Submit Feedback')}</h3>\n      </Header>\n      <Body>\n        <SelectField\n          label={t('Type of feedback')}\n          name=\"subject\"\n          inline={false}\n          options={feedbackTypes.map((feedbackType, index) => ({\n            value: index,\n            label: feedbackType,\n          }))}\n          placeholder={t('Select type of feedback')}\n          value={state.subject}\n          onChange={value => setState({...state, subject: value})}\n          flexibleControlStateSize\n          stacked\n          required\n        />\n        <Field\n          label={t('Additional feedback')}\n          inline={false}\n          required={false}\n          flexibleControlStateSize\n          stacked\n        >\n          <Textarea\n            name=\"additional-feedback\"\n            value={state.additionalInfo}\n            rows={5}\n            autosize\n            placeholder={t('What did you expect?')}\n            onChange={event =>\n              setState({\n                ...state,\n                additionalInfo: event.target.value,\n              })\n            }\n          />\n        </Field>\n        {isSelfHosted && (\n          <p>\n            {tct(\n              \"You agree that any feedback you submit is subject to Sentry's [privacyPolicy:Privacy Policy] and Sentry may use such feedback without restriction or obligation.\",\n              {\n                privacyPolicy: <ExternalLink href=\"https://sentry.io/privacy/\" />,\n              }\n            )}\n          </p>\n        )}\n      </Body>\n      <Footer>\n        <ButtonBar gap={1}>\n          <Button onClick={closeModal}>{t('Cancel')}</Button>\n          <Button\n            priority=\"primary\"\n            onClick={handleSubmit}\n            disabled={!defined(state.subject)}\n          >\n            {t('Submit Feedback')}\n          </Button>\n        </ButtonBar>\n      </Footer>\n    </Fragment>\n  );\n}\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 680px;\n`;\n","import {Location, Query} from 'history';\n\nimport {useRouteContext} from 'sentry/utils/useRouteContext';\n\ntype DefaultQuery<T = string> = {\n  [key: string]: T | T[] | null | undefined;\n};\n\nexport function useLocation<Q extends Query = DefaultQuery>(): Location<Q> {\n  const route = useRouteContext();\n  return route.location;\n}\n"],"names":["feedbackClient","BrowserClient","dsn","transport","makeFetchTransport","stackParser","defaultStackParser","integrations","defaultIntegrations","defaultFeedbackTypes","t","FeedbackModal","Header","Body","Footer","closeModal","feedbackTypes","featureName","organization","useLegacyStore","OrganizationStore","projects","initiallyLoaded","projectsLoaded","useProjects","location","useLocation","user","isSelfHosted","ConfigStore","state","setState","useState","subject","undefined","additionalInfo","project","useMemo","query","find","p","id","Fragment","closeButton","label","name","inline","options","map","feedbackType","index","value","placeholder","onChange","flexibleControlStateSize","stacked","required","rows","autosize","event","target","tct","privacyPolicy","href","gap","onClick","priority","defined","captureEvent","message","trim","request","url","pathname","extra","orgFeatures","features","orgAccess","access","projectFeatures","tags","level","addSuccessMessage","disabled","modalCss","useRouteContext"],"sourceRoot":""}