{"version":3,"file":"chunks/app_views_settings_account_accountSecurity_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/links/listLink.tsx","webpack:///./app/data/forms/accountPassword.tsx","webpack:///./app/utils/getPendingInvite.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/accountSecurity/components/confirmHeader.tsx","webpack:///./app/views/settings/account/accountSecurity/components/removeConfirm.tsx","webpack:///./app/views/settings/account/accountSecurity/components/twoFactorRequired.tsx","webpack:///./app/views/settings/account/passwordForm.tsx","webpack:///./app/views/settings/account/accountSecurity/index.tsx"],"sourcesContent":["import {Component} from 'react';\n// eslint-disable-next-line no-restricted-imports\nimport {Link as RouterLink, withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\nimport {LocationDescriptor} from 'history';\nimport omit from 'lodash/omit';\nimport * as qs from 'query-string';\n\ntype DefaultProps = {\n  activeClassName: string;\n  disabled: boolean;\n  index: boolean;\n};\n\ntype LinkProps = Omit<React.ComponentProps<typeof RouterLink>, 'to'>;\n\ntype Props = WithRouterProps &\n  Partial<DefaultProps> &\n  LinkProps & {\n    /**\n     * Link target. We don't want to expose the ToLocationFunction on this component.\n     */\n    to: LocationDescriptor;\n    // If supplied by parent component, decides whether link element\n    // is \"active\" or not ... overriding default behavior of strict\n    // route matching\n    isActive?: (location: LocationDescriptor, indexOnly?: boolean) => boolean;\n    query?: string;\n  };\n\nclass ListLink extends Component<Props> {\n  static displayName = 'ListLink';\n\n  static defaultProps: DefaultProps = {\n    activeClassName: 'active',\n    index: false,\n    disabled: false,\n  };\n\n  isActive() {\n    const {isActive, to, query, index, router} = this.props;\n    const queryData = query ? qs.parse(query) : undefined;\n    const target: LocationDescriptor =\n      typeof to === 'string' ? {pathname: to, query: queryData} : to;\n\n    if (typeof isActive === 'function') {\n      return isActive(target, index);\n    }\n\n    return router.isActive(target, index);\n  }\n\n  getClassName = () => {\n    const _classNames = {};\n    const {className, activeClassName} = this.props;\n\n    if (className) {\n      _classNames[className] = true;\n    }\n\n    if (this.isActive() && activeClassName) {\n      _classNames[activeClassName] = true;\n    }\n\n    return classNames(_classNames);\n  };\n\n  render() {\n    const {index, children, to, disabled, ...props} = this.props;\n    const carriedProps = omit(\n      props,\n      'activeClassName',\n      'css',\n      'isActive',\n      'index',\n      'router',\n      'location'\n    );\n\n    return (\n      <StyledLi className={this.getClassName()} disabled={disabled}>\n        <RouterLink {...carriedProps} onlyActiveOnIndex={index} to={disabled ? '' : to}>\n          {children}\n        </RouterLink>\n      </StyledLi>\n    );\n  }\n}\n\nexport default withRouter(ListLink);\n\nconst StyledLi = styled('li', {\n  shouldForwardProp: prop => prop !== 'disabled',\n})<{disabled?: boolean}>`\n  ${p =>\n    p.disabled &&\n    `\n   a {\n    color:${p.theme.disabled} !important;\n    pointer-events: none;\n    :hover {\n      color: ${p.theme.disabled}  !important;\n    }\n   }\n`}\n`;\n","import {JsonFormObject} from 'sentry/components/forms/type';\n\nconst getUserIsNotManaged = ({user}) => !user.isManaged;\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Password',\n    fields: [\n      {\n        name: 'password',\n        type: 'secret',\n        autoComplete: 'current-password',\n        label: 'Current Password',\n        placeholder: '',\n        help: 'Your current password',\n        visible: getUserIsNotManaged,\n        required: true,\n      },\n      {\n        name: 'passwordNew',\n        type: 'secret',\n        autoComplete: 'new-password',\n        label: 'New Password',\n        placeholder: '',\n        help: '',\n        required: true,\n        visible: getUserIsNotManaged,\n        validate: ({id, form}) => (form[id] !== form.passwordVerify ? [[id, '']] : []),\n      },\n      {\n        name: 'passwordVerify',\n        type: 'secret',\n        autoComplete: 'new-password',\n        label: 'Verify New Password',\n        placeholder: '',\n        help: 'Verify your new password',\n        required: true,\n        visible: getUserIsNotManaged,\n        validate: ({id, form}) => {\n          // If password is set, and passwords don't match, then return an error\n          if (form.passwordNew && form.passwordNew !== form[id]) {\n            return [[id, 'Passwords do not match']];\n          }\n\n          return [];\n        },\n      },\n    ],\n  },\n];\n\nexport const route = '/settings/account/security/';\nexport default formGroups;\n","import Cookies from 'js-cookie';\nimport * as qs from 'query-string';\n\ntype PendingInvite = {\n  memberId: number;\n  token: string;\n  url: string;\n};\n\nexport default function getPendingInvite(): PendingInvite | null {\n  const data = Cookies.get('pending-invite');\n\n  if (!data) {\n    return null;\n  }\n\n  return qs.parse(data) as any;\n}\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'sentry/utils/replaceRouterParams';\nimport {RouteWithName} from 'sentry/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  routes: RouteWithName[];\n\n  location?: Location;\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import styled from '@emotion/styled';\n\nconst ConfirmHeader = styled('div')`\n  font-size: 1.2em;\n  margin-bottom: 10px;\n`;\n\nexport default ConfirmHeader;\n","import {Fragment} from 'react';\n\nimport Confirm from 'sentry/components/confirm';\nimport {t} from 'sentry/locale';\nimport ConfirmHeader from 'sentry/views/settings/account/accountSecurity/components/confirmHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype Props = React.ComponentProps<typeof Confirm>;\n\nconst message = (\n  <Fragment>\n    <ConfirmHeader>{t('Do you want to remove this method?')}</ConfirmHeader>\n    <TextBlock>\n      {t(\n        'Removing the last authentication method will disable two-factor authentication completely.'\n      )}\n    </TextBlock>\n  </Fragment>\n);\n\nconst RemoveConfirm = (props: Props) => <Confirm {...props} message={message} />;\n\nexport default RemoveConfirm;\n","import styled from '@emotion/styled';\n\nimport Alert from 'sentry/components/alert';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport getPendingInvite from 'sentry/utils/getPendingInvite';\n\nconst TwoFactorRequired = () =>\n  !getPendingInvite() ? null : (\n    <StyledAlert data-test-id=\"require-2fa\" type=\"error\" showIcon>\n      {tct(\n        'You have been invited to an organization that requires [link:two-factor authentication].' +\n          ' Setup two-factor authentication below to join your organization.',\n        {\n          link: <ExternalLink href=\"https://docs.sentry.io/accounts/require-2fa/\" />,\n        }\n      )}\n    </StyledAlert>\n  );\n\nconst StyledAlert = styled(Alert)`\n  margin: ${space(3)} 0;\n`;\n\nexport default TwoFactorRequired;\n","import styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport Button from 'sentry/components/button';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport {PanelAlert, PanelItem} from 'sentry/components/panels';\nimport accountPasswordFields from 'sentry/data/forms/accountPassword';\nimport {t} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\n\ntype OnSubmitSuccess = Parameters<NonNullable<Form['props']['onSubmitSuccess']>>;\n\nfunction PasswordForm() {\n  function handleSubmitSuccess(_change: OnSubmitSuccess[0], model: OnSubmitSuccess[1]) {\n    // Reset form on success\n    model.resetForm();\n    addSuccessMessage('Password has been changed');\n  }\n\n  function handleSubmitError() {\n    addErrorMessage('Error changing password');\n  }\n\n  const user = ConfigStore.get('user');\n\n  return (\n    <Form\n      apiMethod=\"PUT\"\n      apiEndpoint=\"/users/me/password/\"\n      initialData={{}}\n      onSubmitSuccess={handleSubmitSuccess}\n      onSubmitError={handleSubmitError}\n      hideFooter\n    >\n      <JsonForm\n        forms={accountPasswordFields}\n        additionalFieldProps={{user}}\n        renderFooter={() => (\n          <Actions>\n            <Button type=\"submit\" priority=\"primary\">\n              {t('Change password')}\n            </Button>\n          </Actions>\n        )}\n        renderHeader={() => (\n          <PanelAlert type=\"info\">\n            {t('Changing your password will invalidate all logged in sessions.')}\n          </PanelAlert>\n        )}\n      />\n    </Form>\n  );\n}\n\nconst Actions = styled(PanelItem)`\n  justify-content: flex-end;\n`;\n\nexport default PasswordForm;\n","import {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {openEmailVerification} from 'sentry/actionCreators/modal';\nimport Button from 'sentry/components/button';\nimport CircleIndicator from 'sentry/components/circleIndicator';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport Field from 'sentry/components/forms/field';\nimport ListLink from 'sentry/components/links/listLink';\nimport NavTabs from 'sentry/components/navTabs';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconDelete} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Authenticator, OrganizationSummary} from 'sentry/types';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport AsyncView from 'sentry/views/asyncView';\nimport RemoveConfirm from 'sentry/views/settings/account/accountSecurity/components/removeConfirm';\nimport TwoFactorRequired from 'sentry/views/settings/account/accountSecurity/components/twoFactorRequired';\nimport PasswordForm from 'sentry/views/settings/account/passwordForm';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype Props = {\n  authenticators: Authenticator[] | null;\n  countEnrolled: number;\n  deleteDisabled: boolean;\n  handleRefresh: () => void;\n  hasVerifiedEmail: boolean;\n  onDisable: (auth: Authenticator) => void;\n  orgsRequire2fa: OrganizationSummary[];\n} & AsyncView['props'] &\n  RouteComponentProps<{}, {}>;\n\n/**\n * Lists 2fa devices + password change form\n */\nclass AccountSecurity extends AsyncView<Props> {\n  getTitle() {\n    return t('Security');\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [];\n  }\n\n  handleSessionClose = async () => {\n    try {\n      await this.api.requestPromise('/auth/', {\n        method: 'DELETE',\n        data: {all: true},\n      });\n      window.location.assign('/auth/login/');\n    } catch (err) {\n      addErrorMessage(t('There was a problem closing all sessions'));\n      throw err;\n    }\n  };\n\n  formatOrgSlugs = () => {\n    const {orgsRequire2fa} = this.props;\n    const slugs = orgsRequire2fa.map(({slug}) => slug);\n\n    return [slugs.slice(0, -1).join(', '), slugs.slice(-1)[0]].join(\n      slugs.length > 1 ? ' and ' : ''\n    );\n  };\n\n  handleAdd2FAClicked = () => {\n    const {handleRefresh} = this.props;\n    openEmailVerification({\n      onClose: () => {\n        handleRefresh();\n      },\n      actionMessage: 'enrolling a 2FA device',\n    });\n  };\n\n  renderBody() {\n    const {authenticators, countEnrolled, deleteDisabled, onDisable, hasVerifiedEmail} =\n      this.props;\n    const isEmpty = !authenticators?.length;\n    return (\n      <div>\n        <SettingsPageHeader\n          title={t('Security')}\n          tabs={\n            <NavTabs underlined>\n              <ListLink to={recreateRoute('', this.props)} index>\n                {t('Settings')}\n              </ListLink>\n              <ListLink to={recreateRoute('session-history/', this.props)}>\n                {t('Session History')}\n              </ListLink>\n            </NavTabs>\n          }\n        />\n\n        {!isEmpty && countEnrolled === 0 && <TwoFactorRequired />}\n\n        <PasswordForm />\n\n        <Panel>\n          <PanelHeader>{t('Sessions')}</PanelHeader>\n          <PanelBody>\n            <Field\n              alignRight\n              flexibleControlStateSize\n              label={t('Sign out of all devices')}\n              help={t(\n                'Signing out of all devices will sign you out of this device as well.'\n              )}\n            >\n              <Button data-test-id=\"signoutAll\" onClick={this.handleSessionClose}>\n                {t('Sign out of all devices')}\n              </Button>\n            </Field>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Two-Factor Authentication')}</PanelHeader>\n\n          {isEmpty && (\n            <EmptyMessage>{t('No available authenticators to add')}</EmptyMessage>\n          )}\n\n          <PanelBody>\n            {!isEmpty &&\n              authenticators?.map(auth => {\n                const {\n                  id,\n                  authId,\n                  description,\n                  isBackupInterface,\n                  isEnrolled,\n                  disallowNewEnrollment,\n                  configureButton,\n                  name,\n                } = auth;\n                if (disallowNewEnrollment && !isEnrolled) {\n                  return null;\n                }\n                return (\n                  <AuthenticatorPanelItem key={id}>\n                    <AuthenticatorHeader>\n                      <AuthenticatorTitle>\n                        <AuthenticatorStatus enabled={isEnrolled} />\n                        <AuthenticatorName>{name}</AuthenticatorName>\n                      </AuthenticatorTitle>\n\n                      <Actions>\n                        {!isBackupInterface && !isEnrolled && hasVerifiedEmail && (\n                          <Button\n                            to={`/settings/account/security/mfa/${id}/enroll/`}\n                            size=\"sm\"\n                            priority=\"primary\"\n                            className=\"enroll-button\"\n                          >\n                            {t('Add')}\n                          </Button>\n                        )}\n                        {!isBackupInterface && !isEnrolled && !hasVerifiedEmail && (\n                          <Button\n                            onClick={this.handleAdd2FAClicked}\n                            size=\"sm\"\n                            priority=\"primary\"\n                            className=\"enroll-button\"\n                          >\n                            {t('Add')}\n                          </Button>\n                        )}\n\n                        {isEnrolled && authId && (\n                          <Button\n                            to={`/settings/account/security/mfa/${authId}/`}\n                            size=\"sm\"\n                            className=\"details-button\"\n                          >\n                            {configureButton}\n                          </Button>\n                        )}\n\n                        {!isBackupInterface && isEnrolled && (\n                          <Tooltip\n                            title={t(\n                              `Two-factor authentication is required for organization(s): ${this.formatOrgSlugs()}.`\n                            )}\n                            disabled={!deleteDisabled}\n                          >\n                            <RemoveConfirm\n                              onConfirm={() => onDisable(auth)}\n                              disabled={deleteDisabled}\n                            >\n                              <Button\n                                size=\"sm\"\n                                aria-label={t('delete')}\n                                icon={<IconDelete />}\n                              />\n                            </RemoveConfirm>\n                          </Tooltip>\n                        )}\n                      </Actions>\n\n                      {isBackupInterface && !isEnrolled ? t('requires 2FA') : null}\n                    </AuthenticatorHeader>\n\n                    <Description>{description}</Description>\n                  </AuthenticatorPanelItem>\n                );\n              })}\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nconst AuthenticatorName = styled('span')`\n  font-size: 1.2em;\n`;\n\nconst AuthenticatorPanelItem = styled(PanelItem)`\n  flex-direction: column;\n`;\n\nconst AuthenticatorHeader = styled('div')`\n  display: flex;\n  flex: 1;\n  align-items: center;\n`;\n\nconst AuthenticatorTitle = styled('div')`\n  flex: 1;\n`;\n\nconst Actions = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  gap: ${space(1)};\n`;\n\nconst AuthenticatorStatus = styled(CircleIndicator)`\n  margin-right: ${space(1)};\n`;\n\nconst Description = styled(TextBlock)`\n  margin-top: ${space(2)};\n  margin-bottom: 0;\n`;\n\nexport default AccountSecurity;\n"],"names":["ListLink","Component","_classNames","className","activeClassName","this","props","isActive","classNames","to","query","index","router","queryData","qs","undefined","target","pathname","render","children","disabled","carriedProps","omit","StyledLi","getClassName","onlyActiveOnIndex","withRouter","shouldForwardProp","prop","p","theme","getUserIsNotManaged","user","isManaged","route","title","fields","name","type","autoComplete","label","placeholder","help","visible","required","validate","id","form","passwordVerify","passwordNew","getPendingInvite","data","Cookies","recreateRoute","options","routes","params","location","stepBack","paths","map","path","lastRootIndex","routeIndex","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","AsyncView","AsyncComponent","getTitle","renderComponent","message","Fragment","t","RemoveConfirm","StyledAlert","Alert","space","showIcon","tct","link","href","PasswordForm","ConfigStore","apiMethod","apiEndpoint","initialData","onSubmitSuccess","_change","model","resetForm","addSuccessMessage","onSubmitError","addErrorMessage","hideFooter","forms","accountPasswordFields","additionalFieldProps","renderFooter","Actions","priority","renderHeader","PanelItem","AccountSecurity","async","api","requestPromise","method","all","window","assign","err","orgsRequire2fa","slugs","slug","length","handleRefresh","openEmailVerification","onClose","actionMessage","getEndpoints","renderBody","authenticators","countEnrolled","deleteDisabled","onDisable","hasVerifiedEmail","isEmpty","tabs","underlined","alignRight","flexibleControlStateSize","onClick","handleSessionClose","auth","authId","description","isBackupInterface","isEnrolled","disallowNewEnrollment","configureButton","AuthenticatorPanelItem","AuthenticatorHeader","AuthenticatorTitle","AuthenticatorStatus","enabled","AuthenticatorName","size","handleAdd2FAClicked","formatOrgSlugs","onConfirm","icon","Description","CircleIndicator","TextBlock"],"sourceRoot":""}