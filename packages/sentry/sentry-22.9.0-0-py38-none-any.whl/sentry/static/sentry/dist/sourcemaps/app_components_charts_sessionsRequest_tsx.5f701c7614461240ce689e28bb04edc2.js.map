{"version":3,"file":"chunks/app_components_charts_sessionsRequest_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/charts/sessionsRequest.tsx","webpack:///./app/utils/sessions.tsx","webpack:///./app/views/releases/utils/index.tsx","webpack:///./app/views/releases/utils/sessionTerm.tsx"],"sourcesContent":["import {Component} from 'react';\nimport isEqual from 'lodash/isEqual';\nimport omitBy from 'lodash/omitBy';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport {Organization, SessionApiResponse, SessionFieldWithOperation} from 'sentry/types';\nimport {filterSessionsInTimeWindow, getSessionsInterval} from 'sentry/utils/sessions';\n\nconst propNamesToIgnore = ['api', 'children', 'organization'];\nconst omitIgnoredProps = (props: Props) =>\n  omitBy(props, (_value, key) => propNamesToIgnore.includes(key));\n\nexport type SessionsRequestRenderProps = {\n  errored: boolean;\n  loading: boolean;\n  reloading: boolean;\n  response: SessionApiResponse | null;\n};\n\ntype Props = {\n  api: Client;\n  children: (renderProps: SessionsRequestRenderProps) => React.ReactNode;\n  field: SessionFieldWithOperation[];\n  organization: Organization;\n  end?: string;\n  environment?: string[];\n  groupBy?: string[];\n  interval?: string;\n  isDisabled?: boolean;\n  project?: number[];\n  query?: string;\n  shouldFilterSessionsInTimeWindow?: boolean;\n  start?: string;\n  statsPeriod?: string | null;\n};\n\ntype State = {\n  errored: boolean;\n  reloading: boolean;\n  response: SessionApiResponse | null;\n};\n\nclass SessionsRequest extends Component<Props, State> {\n  state: State = {\n    reloading: false,\n    errored: false,\n    response: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (isEqual(omitIgnoredProps(prevProps), omitIgnoredProps(this.props))) {\n      return;\n    }\n\n    this.fetchData();\n  }\n\n  get path() {\n    const {organization} = this.props;\n\n    return `/organizations/${organization.slug}/sessions/`;\n  }\n\n  get baseQueryParams() {\n    const {\n      project,\n      environment,\n      field,\n      statsPeriod,\n      start,\n      end,\n      query,\n      groupBy,\n      interval,\n      organization,\n    } = this.props;\n\n    return {\n      project,\n      environment,\n      field,\n      statsPeriod,\n      query,\n      groupBy,\n      start,\n      end,\n      interval: interval\n        ? interval\n        : getSessionsInterval(\n            {start, end, period: statsPeriod},\n            {highFidelity: organization.features.includes('minute-resolution-sessions')}\n          ),\n    };\n  }\n\n  fetchData = async () => {\n    const {api, isDisabled, shouldFilterSessionsInTimeWindow} = this.props;\n\n    if (isDisabled) {\n      return;\n    }\n\n    this.setState(state => ({\n      reloading: state.response !== null,\n      errored: false,\n    }));\n\n    try {\n      const response: SessionApiResponse = await api.requestPromise(this.path, {\n        query: this.baseQueryParams,\n      });\n\n      this.setState({\n        reloading: false,\n        response: shouldFilterSessionsInTimeWindow\n          ? filterSessionsInTimeWindow(\n              response,\n              this.baseQueryParams.start,\n              this.baseQueryParams.end\n            )\n          : response,\n      });\n    } catch (error) {\n      addErrorMessage(error.responseJSON?.detail ?? t('Error loading health data'));\n      this.setState({\n        reloading: false,\n        errored: true,\n      });\n    }\n  };\n\n  render() {\n    const {reloading, errored, response} = this.state;\n    const {children} = this.props;\n\n    const loading = response === null;\n\n    return children({\n      loading,\n      reloading,\n      errored,\n      response,\n    });\n  }\n}\n\nexport default SessionsRequest;\n","import compact from 'lodash/compact';\nimport mean from 'lodash/mean';\nimport moment from 'moment';\n\nimport {\n  DateTimeObject,\n  getDiffInMinutes,\n  SIX_HOURS,\n  SIXTY_DAYS,\n  THIRTY_DAYS,\n} from 'sentry/components/charts/utils';\nimport {SessionApiResponse, SessionFieldWithOperation, SessionStatus} from 'sentry/types';\nimport {SeriesDataUnit} from 'sentry/types/echarts';\nimport {defined, percent} from 'sentry/utils';\nimport {Theme} from 'sentry/utils/theme';\nimport {getCrashFreePercent, getSessionStatusPercent} from 'sentry/views/releases/utils';\nimport {sessionTerm} from 'sentry/views/releases/utils/sessionTerm';\n\n/**\n * If the time window is less than or equal 10, seconds will be displayed on the graphs\n */\nexport const MINUTES_THRESHOLD_TO_DISPLAY_SECONDS = 10;\n\nexport function getCount(\n  groups: SessionApiResponse['groups'] = [],\n  field: SessionFieldWithOperation\n) {\n  return groups.reduce((acc, group) => acc + group.totals[field], 0);\n}\n\nexport function getCountAtIndex(\n  groups: SessionApiResponse['groups'] = [],\n  field: SessionFieldWithOperation,\n  index: number\n) {\n  return groups.reduce((acc, group) => acc + group.series[field][index], 0);\n}\n\nexport function getCrashFreeRate(\n  groups: SessionApiResponse['groups'] = [],\n  field: SessionFieldWithOperation\n) {\n  const crashedRate = getSessionStatusRate(groups, field, SessionStatus.CRASHED);\n\n  return defined(crashedRate) ? getCrashFreePercent(100 - crashedRate) : null;\n}\n\nexport function getSeriesAverage(\n  groups: SessionApiResponse['groups'] = [],\n  field: SessionFieldWithOperation\n) {\n  const totalCount = getCount(groups, field);\n\n  const dataPoints = groups.filter(group => !!group.totals[field]).length;\n\n  return !defined(totalCount) || dataPoints === null || totalCount === 0\n    ? null\n    : totalCount / dataPoints;\n}\n\nexport function getSeriesSum(\n  groups: SessionApiResponse['groups'] = [],\n  field: SessionFieldWithOperation,\n  intervals: SessionApiResponse['intervals'] = []\n) {\n  const dataPointsSums: number[] = Array(intervals.length).fill(0);\n  const groupSeries = groups.map(group => group.series[field]);\n\n  groupSeries.forEach(series => {\n    series.forEach((dataPoint, idx) => (dataPointsSums[idx] += dataPoint));\n  });\n\n  return dataPointsSums;\n}\n\nexport function getSessionStatusRate(\n  groups: SessionApiResponse['groups'] = [],\n  field: SessionFieldWithOperation,\n  status: SessionStatus\n) {\n  const totalCount = getCount(groups, field);\n\n  const crashedCount = getCount(\n    groups.filter(({by}) => by['session.status'] === status),\n    field\n  );\n\n  return !defined(totalCount) || totalCount === 0\n    ? null\n    : percent(crashedCount ?? 0, totalCount ?? 0);\n}\n\nexport function getCrashFreeRateSeries(\n  groups: SessionApiResponse['groups'] = [],\n  intervals: SessionApiResponse['intervals'] = [],\n  field: SessionFieldWithOperation\n): SeriesDataUnit[] {\n  return compact(\n    intervals.map((interval, i) => {\n      const intervalTotalSessions = groups.reduce(\n        (acc, group) => acc + (group.series[field]?.[i] ?? 0),\n        0\n      );\n\n      const intervalCrashedSessions =\n        groups.find(group => group.by['session.status'] === SessionStatus.CRASHED)\n          ?.series[field]?.[i] ?? 0;\n\n      const crashedSessionsPercent = percent(\n        intervalCrashedSessions,\n        intervalTotalSessions\n      );\n\n      if (intervalTotalSessions === 0) {\n        return null;\n      }\n\n      return {\n        name: interval,\n        value: getCrashFreePercent(100 - crashedSessionsPercent),\n      };\n    })\n  );\n}\n\nexport function getSessionStatusRateSeries(\n  groups: SessionApiResponse['groups'] = [],\n  intervals: SessionApiResponse['intervals'] = [],\n  field: SessionFieldWithOperation,\n  status: SessionStatus\n): SeriesDataUnit[] {\n  return compact(\n    intervals.map((interval, i) => {\n      const intervalTotalSessions = groups.reduce(\n        (acc, group) => acc + group.series[field][i],\n        0\n      );\n\n      const intervalStatusSessions =\n        groups.find(group => group.by['session.status'] === status)?.series[field][i] ??\n        0;\n\n      const statusSessionsPercent = percent(\n        intervalStatusSessions,\n        intervalTotalSessions\n      );\n\n      if (intervalTotalSessions === 0) {\n        return null;\n      }\n\n      return {\n        name: interval,\n        value: getSessionStatusPercent(statusSessionsPercent),\n      };\n    })\n  );\n}\n\nexport function getSessionP50Series(\n  groups: SessionApiResponse['groups'] = [],\n  intervals: SessionApiResponse['intervals'] = [],\n  field: SessionFieldWithOperation,\n  valueFormatter?: (value: number) => number\n): SeriesDataUnit[] {\n  return compact(\n    intervals.map((interval, i) => {\n      const meanValue = mean(\n        groups.map(group => group.series[field][i]).filter(v => !!v)\n      );\n\n      if (!meanValue) {\n        return null;\n      }\n\n      return {\n        name: interval,\n        value:\n          typeof valueFormatter === 'function' ? valueFormatter(meanValue) : meanValue,\n      };\n    })\n  );\n}\n\nexport function getAdoptionSeries(\n  releaseGroups: SessionApiResponse['groups'] = [],\n  allGroups: SessionApiResponse['groups'] = [],\n  intervals: SessionApiResponse['intervals'] = [],\n  field: SessionFieldWithOperation\n): SeriesDataUnit[] {\n  return intervals.map((interval, i) => {\n    const intervalReleaseSessions = releaseGroups.reduce(\n      (acc, group) => acc + (group.series[field]?.[i] ?? 0),\n      0\n    );\n    const intervalTotalSessions = allGroups.reduce(\n      (acc, group) => acc + (group.series[field]?.[i] ?? 0),\n      0\n    );\n\n    const intervalAdoption = percent(intervalReleaseSessions, intervalTotalSessions);\n\n    return {\n      name: interval,\n      value: Math.round(intervalAdoption),\n    };\n  });\n}\n\nexport function getCountSeries(\n  field: SessionFieldWithOperation,\n  group?: SessionApiResponse['groups'][0],\n  intervals: SessionApiResponse['intervals'] = []\n): SeriesDataUnit[] {\n  return intervals.map((interval, index) => ({\n    name: interval,\n    value: group?.series[field][index] ?? 0,\n  }));\n}\n\nexport function initSessionsChart(theme: Theme) {\n  const colors = theme.charts.getColorPalette(14);\n  return {\n    [SessionStatus.HEALTHY]: {\n      seriesName: sessionTerm.healthy,\n      data: [],\n      color: theme.green300,\n      areaStyle: {\n        color: theme.green300,\n        opacity: 1,\n      },\n      lineStyle: {\n        opacity: 0,\n        width: 0.4,\n      },\n    },\n    [SessionStatus.ERRORED]: {\n      seriesName: sessionTerm.errored,\n      data: [],\n      color: colors[12],\n      areaStyle: {\n        color: colors[12],\n        opacity: 1,\n      },\n      lineStyle: {\n        opacity: 0,\n        width: 0.4,\n      },\n    },\n    [SessionStatus.ABNORMAL]: {\n      seriesName: sessionTerm.abnormal,\n      data: [],\n      color: colors[15],\n      areaStyle: {\n        color: colors[15],\n        opacity: 1,\n      },\n      lineStyle: {\n        opacity: 0,\n        width: 0.4,\n      },\n    },\n    [SessionStatus.CRASHED]: {\n      seriesName: sessionTerm.crashed,\n      data: [],\n      color: theme.red300,\n      areaStyle: {\n        color: theme.red300,\n        opacity: 1,\n      },\n      lineStyle: {\n        opacity: 0,\n        width: 0.4,\n      },\n    },\n  };\n}\n\ntype GetSessionsIntervalOptions = {\n  highFidelity?: boolean;\n};\n\nexport function getSessionsInterval(\n  datetimeObj: DateTimeObject,\n  {highFidelity}: GetSessionsIntervalOptions = {}\n) {\n  const diffInMinutes = getDiffInMinutes(datetimeObj);\n\n  if (moment(datetimeObj.start).isSameOrBefore(moment().subtract(30, 'days'))) {\n    // we cannot use sub-hour session resolution on buckets older than 30 days\n    highFidelity = false;\n  }\n\n  if (diffInMinutes >= SIXTY_DAYS) {\n    return '1d';\n  }\n\n  if (diffInMinutes >= THIRTY_DAYS) {\n    return '4h';\n  }\n\n  if (diffInMinutes >= SIX_HOURS) {\n    return '1h';\n  }\n\n  // limit on backend for sub-hour session resolution is set to six hours\n  if (highFidelity) {\n    if (diffInMinutes <= MINUTES_THRESHOLD_TO_DISPLAY_SECONDS) {\n      // This only works for metrics-based session stats.\n      // Backend will silently replace with '1m' for session-based stats.\n      return '10s';\n    }\n\n    if (diffInMinutes <= 30) {\n      return '1m';\n    }\n\n    return '5m';\n  }\n\n  return '1h';\n}\n\n// Sessions API can only round intervals to the closest hour - this is especially problematic when using sub-hour resolution.\n// We filter out results that are out of bounds on frontend and recalculate totals.\nexport function filterSessionsInTimeWindow(\n  sessions: SessionApiResponse,\n  start?: string,\n  end?: string\n) {\n  if (!start || !end) {\n    return sessions;\n  }\n\n  const filteredIndexes: number[] = [];\n\n  const intervals = sessions.intervals.filter((interval, index) => {\n    const isBetween = moment\n      .utc(interval)\n      .isBetween(moment.utc(start), moment.utc(end), undefined, '[]');\n    if (isBetween) {\n      filteredIndexes.push(index);\n    }\n\n    return isBetween;\n  });\n\n  const groups = sessions.groups.map(group => {\n    const series = {};\n    const totals = {};\n    Object.keys(group.series).forEach(field => {\n      totals[field] = 0;\n      series[field] = group.series[field].filter((value, index) => {\n        const isBetween = filteredIndexes.includes(index);\n        if (isBetween) {\n          totals[field] = (totals[field] ?? 0) + value;\n        }\n\n        return isBetween;\n      });\n      if (field.startsWith('p50')) {\n        totals[field] = mean(series[field]);\n      }\n      if (field.startsWith('count_unique')) {\n        /* E.g. users\n        We cannot sum here because users would not be unique anymore.\n        User can be repeated and part of multiple buckets in series but it's still that one user so totals would be wrong.\n        This operation is not 100% correct, because we are filtering series in time window but the total is for unfiltered series (it's the closest thing we can do right now) */\n        totals[field] = group.totals[field];\n      }\n    });\n    return {...group, series, totals};\n  });\n\n  return {\n    start: intervals[0],\n    end: intervals[intervals.length - 1],\n    query: sessions.query,\n    intervals,\n    groups,\n  };\n}\n","import {Location} from 'history';\nimport pick from 'lodash/pick';\nimport round from 'lodash/round';\nimport moment from 'moment';\n\nimport {DateTimeObject} from 'sentry/components/charts/utils';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {PAGE_URL_PARAM, URL_PARAM} from 'sentry/constants/pageFilters';\nimport {desktop, mobile, PlatformKey} from 'sentry/data/platformCategories';\nimport {t, tct} from 'sentry/locale';\nimport {Release, ReleaseStatus} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {Theme} from 'sentry/utils/theme';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {IssueSortOptions} from 'sentry/views/issueList/utils';\n\nexport const CRASH_FREE_DECIMAL_THRESHOLD = 95;\n\nexport const roundDuration = (seconds: number) => {\n  return round(seconds, seconds > 60 ? 0 : 3);\n};\n\nexport const getCrashFreePercent = (\n  percent: number,\n  decimalThreshold = CRASH_FREE_DECIMAL_THRESHOLD,\n  decimalPlaces = 3\n): number => {\n  const roundedValue = round(percent, percent > decimalThreshold ? decimalPlaces : 0);\n  if (roundedValue === 100 && percent < 100) {\n    return (\n      Math.floor(percent * Math.pow(10, decimalPlaces)) / Math.pow(10, decimalPlaces)\n    );\n  }\n\n  return roundedValue;\n};\n\nexport const displayCrashFreePercent = (\n  percent: number,\n  decimalThreshold = CRASH_FREE_DECIMAL_THRESHOLD,\n  decimalPlaces = 3\n): string => {\n  if (isNaN(percent)) {\n    return '\\u2015';\n  }\n\n  if (percent < 1 && percent > 0) {\n    return `<1\\u0025`;\n  }\n\n  const rounded = getCrashFreePercent(\n    percent,\n    decimalThreshold,\n    decimalPlaces\n  ).toLocaleString();\n\n  return `${rounded}\\u0025`;\n};\n\nexport const getSessionStatusPercent = (percent: number, absolute = true) => {\n  return round(absolute ? Math.abs(percent) : percent, 3);\n};\n\nexport const displaySessionStatusPercent = (percent: number, absolute = true) => {\n  return `${getSessionStatusPercent(percent, absolute).toLocaleString()}\\u0025`;\n};\n\nexport const getReleaseNewIssuesUrl = (\n  orgSlug: string,\n  projectId: string | number | null,\n  version: string\n) => {\n  return {\n    pathname: `/organizations/${orgSlug}/issues/`,\n    query: {\n      project: projectId,\n      // we are resetting time selector because releases' new issues count doesn't take time selector into account\n      statsPeriod: undefined,\n      start: undefined,\n      end: undefined,\n      query: new MutableSearch([`firstRelease:${version}`]).formatString(),\n      sort: IssueSortOptions.FREQ,\n    },\n  };\n};\n\nexport const getReleaseUnhandledIssuesUrl = (\n  orgSlug: string,\n  projectId: string | number | null,\n  version: string,\n  dateTime: DateTimeObject = {}\n) => {\n  return {\n    pathname: `/organizations/${orgSlug}/issues/`,\n    query: {\n      ...dateTime,\n      project: projectId,\n      query: new MutableSearch([\n        `release:${version}`,\n        'error.unhandled:true',\n      ]).formatString(),\n      sort: IssueSortOptions.FREQ,\n    },\n  };\n};\n\nexport const getReleaseHandledIssuesUrl = (\n  orgSlug: string,\n  projectId: string | number | null,\n  version: string,\n  dateTime: DateTimeObject = {}\n) => {\n  return {\n    pathname: `/organizations/${orgSlug}/issues/`,\n    query: {\n      ...dateTime,\n      project: projectId,\n      query: new MutableSearch([\n        `release:${version}`,\n        'error.handled:true',\n      ]).formatString(),\n      sort: IssueSortOptions.FREQ,\n    },\n  };\n};\n\nexport const isReleaseArchived = (release: Release) =>\n  release.status === ReleaseStatus.Archived;\n\nexport type ReleaseBounds = {\n  type: 'normal' | 'clamped' | 'ancient';\n  releaseEnd?: string | null;\n  releaseStart?: string | null;\n};\n\nexport function getReleaseBounds(release?: Release): ReleaseBounds {\n  const retentionBound = moment().subtract(90, 'days');\n  const {lastEvent, currentProjectMeta, dateCreated} = release || {};\n  const {sessionsUpperBound} = currentProjectMeta || {};\n\n  let type: ReleaseBounds['type'] = 'normal';\n  let releaseStart = moment(dateCreated).startOf('minute');\n  let releaseEnd = moment(\n    (moment(sessionsUpperBound).isAfter(lastEvent) ? sessionsUpperBound : lastEvent) ??\n      undefined\n  ).endOf('minute');\n\n  if (moment(releaseStart).isSame(releaseEnd, 'minute')) {\n    releaseEnd = moment(releaseEnd).add(1, 'minutes');\n  }\n\n  if (releaseStart.isBefore(retentionBound)) {\n    releaseStart = retentionBound;\n    type = 'clamped';\n\n    if (\n      releaseEnd.isBefore(releaseStart) ||\n      (!defined(sessionsUpperBound) && !defined(lastEvent))\n    ) {\n      releaseEnd = moment();\n      type = 'ancient';\n    }\n  }\n\n  return {\n    type,\n    releaseStart: releaseStart.utc().format(),\n    releaseEnd: releaseEnd.utc().format(),\n  };\n}\n\ntype GetReleaseParams = {\n  location: Location;\n  releaseBounds: ReleaseBounds;\n};\n\nexport function getReleaseParams({location, releaseBounds}: GetReleaseParams) {\n  const params = normalizeDateTimeParams(\n    pick(location.query, [\n      ...Object.values(URL_PARAM),\n      ...Object.values(PAGE_URL_PARAM),\n      'cursor',\n    ]),\n    {\n      allowAbsolutePageDatetime: true,\n      allowEmptyPeriod: true,\n    }\n  );\n  if (\n    !Object.keys(params).some(param =>\n      [URL_PARAM.START, URL_PARAM.END, URL_PARAM.UTC, URL_PARAM.PERIOD].includes(param)\n    )\n  ) {\n    params[URL_PARAM.START] = releaseBounds.releaseStart;\n    params[URL_PARAM.END] = releaseBounds.releaseEnd;\n  }\n\n  return params;\n}\n\nconst adoptionStagesLink = (\n  <ExternalLink href=\"https://docs.sentry.io/product/releases/health/#adoption-stages\" />\n);\n\nexport const ADOPTION_STAGE_LABELS: Record<\n  string,\n  {name: string; tooltipTitle: React.ReactNode; type: keyof Theme['tag']}\n> = {\n  low_adoption: {\n    name: t('Low Adoption'),\n    tooltipTitle: tct(\n      'This release has a low percentage of sessions compared to other releases in this project. [link:Learn more]',\n      {link: adoptionStagesLink}\n    ),\n    type: 'warning',\n  },\n  adopted: {\n    name: t('Adopted'),\n    tooltipTitle: tct(\n      'This release has a high percentage of sessions compared to other releases in this project. [link:Learn more]',\n      {link: adoptionStagesLink}\n    ),\n    type: 'success',\n  },\n  replaced: {\n    name: t('Replaced'),\n    tooltipTitle: tct(\n      'This release was previously Adopted, but now has a lower level of sessions compared to other releases in this project. [link:Learn more]',\n      {link: adoptionStagesLink}\n    ),\n    type: 'default',\n  },\n};\n\nexport const isMobileRelease = (releaseProjectPlatform: PlatformKey) =>\n  ([...mobile, ...desktop] as string[]).includes(releaseProjectPlatform);\n","import {PlatformKey} from 'sentry/data/platformCategories';\nimport {t} from 'sentry/locale';\n\nexport enum SessionTerm {\n  CRASHES = 'crashes',\n  CRASHED = 'crashed',\n  ABNORMAL = 'abnormal',\n  CRASH_FREE = 'crashFree',\n  CRASH_FREE_USERS = 'crash-free-users',\n  CRASH_FREE_SESSIONS = 'crash-free-sessions',\n  HEALTHY = 'healthy',\n  ERRORED = 'errored',\n  UNHANDLED = 'unhandled',\n  STABILITY = 'stability',\n  ADOPTION = 'adoption',\n}\n\nexport const sessionTerm = {\n  [SessionTerm.CRASHES]: t('Crashes'),\n  [SessionTerm.CRASHED]: t('Crashed'),\n  [SessionTerm.ABNORMAL]: t('Abnormal'),\n  [SessionTerm.CRASH_FREE_USERS]: t('Crash Free Users'),\n  [SessionTerm.CRASH_FREE_SESSIONS]: t('Crash Free Sessions'),\n  [SessionTerm.HEALTHY]: t('Healthy'),\n  [SessionTerm.ERRORED]: t('Errored'),\n  [SessionTerm.UNHANDLED]: t('Unhandled'),\n  [SessionTerm.ADOPTION]: t('Adoption'),\n  duration: t('Session Duration'),\n  otherCrashed: t('Other Crashed'),\n  otherAbnormal: t('Other Abnormal'),\n  otherErrored: t('Other Errored'),\n  otherHealthy: t('Other Healthy'),\n  otherCrashFreeUsers: t('Other Crash Free Users'),\n  otherCrashFreeSessions: t('Other Crash Free Sessions'),\n  otherReleases: t('Other Releases'),\n};\n\n// This should never be used directly (except in tests)\nexport const commonTermsDescription = {\n  [SessionTerm.CRASHES]: t('Number of sessions with a crashed state'),\n  [SessionTerm.CRASH_FREE]: t(\n    'Percentage of sessions/users who did not experience a crash.'\n  ),\n  [SessionTerm.CRASH_FREE_USERS]: t(\n    'Percentage of unique users with non-crashed sessions'\n  ),\n  [SessionTerm.CRASH_FREE_SESSIONS]: t('Percentage of non-crashed sessions'),\n  [SessionTerm.STABILITY]: t('The percentage of crash free sessions.'),\n  [SessionTerm.ADOPTION]: t(\n    'Adoption compares the sessions or users of a release with the total sessions or users for this project in the last 24 hours.'\n  ),\n};\n\n// This should never be used directly (except in tests)\nexport const mobileTermsDescription = {\n  [SessionTerm.CRASHED]: t(\n    'The process was terminated due to an unhandled exception or a request to the server that ended with an error'\n  ),\n  [SessionTerm.CRASH_FREE_SESSIONS]: t('Percentage of non-crashed sessions'),\n  [SessionTerm.ABNORMAL]: t(\n    'An unknown session exit. Like due to loss of power or killed by the operating system'\n  ),\n  [SessionTerm.HEALTHY]: t('A session without errors'),\n  [SessionTerm.ERRORED]: t('A session with errors'),\n  [SessionTerm.UNHANDLED]: t('Not handled by user code'),\n};\n\n// This should never be used directly (except in tests)\nexport const desktopTermDescriptions = {\n  crashed: t('The application crashed with a hard crash (eg. segfault)'),\n  [SessionTerm.ABNORMAL]: t(\n    'The application did not properly end the session, for example, due to force-quit'\n  ),\n  [SessionTerm.HEALTHY]: t(\n    'The application exited normally and did not observe any errors'\n  ),\n  [SessionTerm.ERRORED]: t(\n    'The application exited normally but observed error events while running'\n  ),\n  [SessionTerm.UNHANDLED]: t('The application crashed with a hard crash'),\n};\n\nfunction getTermDescriptions(platform: PlatformKey | null) {\n  const technology =\n    platform === 'react-native' ||\n    platform === 'java-spring' ||\n    platform === 'apple-ios' ||\n    platform === 'dotnet-aspnetcore'\n      ? platform\n      : platform?.split('-')[0];\n\n  switch (technology) {\n    case 'dotnet':\n    case 'java':\n      return {\n        ...commonTermsDescription,\n        ...mobileTermsDescription,\n      };\n    case 'java-spring':\n    case 'dotnet-aspnetcore':\n      return {\n        ...commonTermsDescription,\n        ...mobileTermsDescription,\n        [SessionTerm.CRASHES]: t(\n          'A request that resulted in an unhandled exception and hence a Server Error response'\n        ),\n      };\n    case 'android':\n    case 'cordova':\n    case 'react-native':\n    case 'flutter':\n      return {\n        ...commonTermsDescription,\n        ...mobileTermsDescription,\n        [SessionTerm.CRASHED]: t(\n          'An unhandled exception that resulted in the application crashing'\n        ),\n      };\n\n    case 'apple': {\n      return {\n        ...commonTermsDescription,\n        ...mobileTermsDescription,\n        [SessionTerm.CRASHED]: t('An error that resulted in the application crashing'),\n      };\n    }\n    case 'node':\n    case 'javascript':\n      return {\n        ...commonTermsDescription,\n        [SessionTerm.CRASHED]: t(\n          'During the session an unhandled global error/promise rejection occurred.'\n        ),\n        [SessionTerm.ABNORMAL]: t('Non applicable for Javascript.'),\n        [SessionTerm.HEALTHY]: t('No errors were captured during session life-time.'),\n        [SessionTerm.ERRORED]: t(\n          'During the session at least one handled error occurred.'\n        ),\n        [SessionTerm.UNHANDLED]:\n          \"An error was captured by the global 'onerror' or 'onunhandledrejection' handler.\",\n      };\n    case 'apple-ios':\n    case 'minidump':\n    case 'native':\n      return {\n        ...commonTermsDescription,\n        ...desktopTermDescriptions,\n      };\n    case 'rust':\n      return {\n        ...commonTermsDescription,\n        ...desktopTermDescriptions,\n        [SessionTerm.CRASHED]: t('The application had an unrecoverable error (a panic)'),\n      };\n    default:\n      return {\n        ...commonTermsDescription,\n        [SessionTerm.CRASHED]: t('Number of users who experienced an unhandled error'),\n        [SessionTerm.ABNORMAL]: t('An unknown session exit'),\n        [SessionTerm.HEALTHY]: mobileTermsDescription.healthy,\n        [SessionTerm.ERRORED]: mobileTermsDescription.errored,\n        [SessionTerm.UNHANDLED]: mobileTermsDescription.unhandled,\n      };\n  }\n}\n\nexport function getSessionTermDescription(\n  term: SessionTerm,\n  platform: PlatformKey | null\n) {\n  return getTermDescriptions(platform)[term];\n}\n"],"names":["propNamesToIgnore","omitIgnoredProps","props","omitBy","_value","key","includes","SessionsRequest","Component","reloading","errored","response","async","api","isDisabled","shouldFilterSessionsInTimeWindow","this","setState","state","requestPromise","path","query","baseQueryParams","filterSessionsInTimeWindow","start","end","error","addErrorMessage","responseJSON","detail","t","componentDidMount","fetchData","componentDidUpdate","prevProps","isEqual","organization","slug","project","environment","field","statsPeriod","groupBy","interval","getSessionsInterval","period","highFidelity","features","render","children","loading","MINUTES_THRESHOLD_TO_DISPLAY_SECONDS","getCount","groups","reduce","acc","group","totals","getCountAtIndex","index","series","getCrashFreeRate","crashedRate","getSessionStatusRate","SessionStatus","defined","getCrashFreePercent","getSeriesAverage","totalCount","dataPoints","filter","length","getSeriesSum","intervals","dataPointsSums","Array","fill","groupSeries","map","forEach","dataPoint","idx","status","crashedCount","by","percent","getCrashFreeRateSeries","compact","i","intervalTotalSessions","intervalCrashedSessions","find","crashedSessionsPercent","name","value","getSessionStatusRateSeries","intervalStatusSessions","statusSessionsPercent","getSessionStatusPercent","getSessionP50Series","valueFormatter","meanValue","mean","v","getAdoptionSeries","releaseGroups","allGroups","intervalReleaseSessions","intervalAdoption","Math","round","getCountSeries","initSessionsChart","theme","colors","charts","getColorPalette","seriesName","sessionTerm","data","color","green300","areaStyle","opacity","lineStyle","width","red300","datetimeObj","diffInMinutes","getDiffInMinutes","moment","isSameOrBefore","subtract","SIXTY_DAYS","THIRTY_DAYS","SIX_HOURS","sessions","filteredIndexes","isBetween","undefined","push","Object","keys","startsWith","CRASH_FREE_DECIMAL_THRESHOLD","roundDuration","seconds","decimalThreshold","decimalPlaces","roundedValue","floor","pow","displayCrashFreePercent","isNaN","rounded","toLocaleString","absolute","abs","displaySessionStatusPercent","getReleaseNewIssuesUrl","orgSlug","projectId","version","pathname","MutableSearch","formatString","sort","IssueSortOptions","getReleaseUnhandledIssuesUrl","dateTime","getReleaseHandledIssuesUrl","isReleaseArchived","release","ReleaseStatus","getReleaseBounds","retentionBound","lastEvent","currentProjectMeta","dateCreated","sessionsUpperBound","type","releaseStart","startOf","releaseEnd","isAfter","endOf","isSame","add","isBefore","utc","format","getReleaseParams","location","releaseBounds","params","normalizeDateTimeParams","pick","values","URL_PARAM","PAGE_URL_PARAM","allowAbsolutePageDatetime","allowEmptyPeriod","some","param","adoptionStagesLink","href","ADOPTION_STAGE_LABELS","low_adoption","tooltipTitle","tct","link","adopted","replaced","isMobileRelease","releaseProjectPlatform","mobile","desktop","SessionTerm","CRASHES","CRASHED","ABNORMAL","CRASH_FREE_USERS","CRASH_FREE_SESSIONS","HEALTHY","ERRORED","UNHANDLED","ADOPTION","duration","otherCrashed","otherAbnormal","otherErrored","otherHealthy","otherCrashFreeUsers","otherCrashFreeSessions","otherReleases","commonTermsDescription","CRASH_FREE","STABILITY","mobileTermsDescription","desktopTermDescriptions","crashed","getSessionTermDescription","term","platform","split","healthy","unhandled","getTermDescriptions"],"sourceRoot":""}