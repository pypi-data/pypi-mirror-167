{"version":3,"file":"chunks/app_views_settings_organizationTeams_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationTeams/allTeamsRow.tsx","webpack:///./app/views/settings/organizationTeams/allTeamsList.tsx","webpack:///./app/views/settings/organizationTeams/organizationAccessRequests.tsx","webpack:///./app/views/settings/organizationTeams/organizationTeams.tsx","webpack:///./app/views/settings/organizationTeams/index.tsx","webpack:///./app/views/settings/organizationTeams/roleOverwriteWarning.tsx"],"sourcesContent":["import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'sentry/utils/replaceRouterParams';\nimport {RouteWithName} from 'sentry/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  routes: RouteWithName[];\n\n  location?: Location;\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {fetchOrganizationDetails} from 'sentry/actionCreators/organizations';\nimport {joinTeam, leaveTeam} from 'sentry/actionCreators/teams';\nimport TeamActions from 'sentry/actions/teamActions';\nimport {Client} from 'sentry/api';\nimport Button from 'sentry/components/button';\nimport IdBadge from 'sentry/components/idBadge';\nimport Link from 'sentry/components/links/link';\nimport {PanelItem} from 'sentry/components/panels';\nimport {t, tct, tn} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Team} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\n\ntype Props = {\n  api: Client;\n  openMembership: boolean;\n  organization: Organization;\n  team: Team;\n  urlPrefix: string;\n};\n\ntype State = {\n  error: boolean;\n  loading: boolean;\n};\n\nclass AllTeamsRow extends Component<Props, State> {\n  state: State = {\n    loading: false,\n    error: false,\n  };\n\n  reloadProjects() {\n    const {api, organization} = this.props;\n    // After a change in teams has happened, refresh the project store\n    fetchOrganizationDetails(api, organization.slug, {\n      loadProjects: true,\n    });\n  }\n\n  handleRequestAccess = () => {\n    const {team} = this.props;\n\n    try {\n      this.joinTeam({\n        successMessage: tct('You have requested access to [team]', {\n          team: `#${team.slug}`,\n        }),\n\n        errorMessage: tct('Unable to request access to [team]', {\n          team: `#${team.slug}`,\n        }),\n      });\n\n      // Update team so that `isPending` is true\n      TeamActions.updateSuccess(team.slug, {\n        ...team,\n        isPending: true,\n      });\n    } catch (_err) {\n      // No need to do anything\n    }\n  };\n\n  handleJoinTeam = async () => {\n    const {team} = this.props;\n\n    await this.joinTeam({\n      successMessage: tct('You have joined [team]', {\n        team: `#${team.slug}`,\n      }),\n      errorMessage: tct('Unable to join [team]', {\n        team: `#${team.slug}`,\n      }),\n    });\n\n    this.reloadProjects();\n  };\n\n  joinTeam = ({\n    successMessage,\n    errorMessage,\n  }: {\n    errorMessage: React.ReactNode;\n    successMessage: React.ReactNode;\n  }) => {\n    const {api, organization, team} = this.props;\n\n    this.setState({\n      loading: true,\n    });\n\n    return new Promise<void>((resolve, reject) =>\n      joinTeam(\n        api,\n        {\n          orgId: organization.slug,\n          teamId: team.slug,\n        },\n        {\n          success: () => {\n            this.setState({\n              loading: false,\n              error: false,\n            });\n            addSuccessMessage(successMessage);\n            resolve();\n          },\n          error: () => {\n            this.setState({\n              loading: false,\n              error: true,\n            });\n            addErrorMessage(errorMessage);\n            reject(new Error('Unable to join team'));\n          },\n        }\n      )\n    );\n  };\n\n  handleLeaveTeam = () => {\n    const {api, organization, team} = this.props;\n\n    this.setState({\n      loading: true,\n    });\n\n    leaveTeam(\n      api,\n      {\n        orgId: organization.slug,\n        teamId: team.slug,\n      },\n      {\n        success: () => {\n          this.setState({\n            loading: false,\n            error: false,\n          });\n          addSuccessMessage(\n            tct('You have left [team]', {\n              team: `#${team.slug}`,\n            })\n          );\n\n          // Reload ProjectsStore\n          this.reloadProjects();\n        },\n        error: () => {\n          this.setState({\n            loading: false,\n            error: true,\n          });\n          addErrorMessage(\n            tct('Unable to leave [team]', {\n              team: `#${team.slug}`,\n            })\n          );\n        },\n      }\n    );\n  };\n\n  getTeamRoleName = () => {\n    const {organization, team} = this.props;\n    if (!organization.features.includes('team-roles') || !team.teamRole) {\n      return null;\n    }\n\n    const {teamRoleList} = organization;\n    const roleName = teamRoleList.find(r => r.id === team.teamRole)?.name;\n\n    return roleName;\n  };\n\n  render() {\n    const {team, urlPrefix, openMembership} = this.props;\n\n    const display = (\n      <IdBadge\n        team={team}\n        avatarSize={36}\n        description={tn('%s Member', '%s Members', team.memberCount)}\n      />\n    );\n\n    // You can only view team details if you have access to team -- this should account\n    // for your role + org open membership\n    const canViewTeam = team.hasAccess;\n\n    return (\n      <TeamPanelItem>\n        <div>\n          {canViewTeam ? (\n            <TeamLink data-test-id=\"team-link\" to={`${urlPrefix}teams/${team.slug}/`}>\n              {display}\n            </TeamLink>\n          ) : (\n            display\n          )}\n        </div>\n        <div>{this.getTeamRoleName()}</div>\n        <div>\n          {this.state.loading ? (\n            <Button size=\"sm\" disabled>\n              ...\n            </Button>\n          ) : team.isMember ? (\n            <Button size=\"sm\" onClick={this.handleLeaveTeam}>\n              {t('Leave Team')}\n            </Button>\n          ) : team.isPending ? (\n            <Button\n              size=\"sm\"\n              disabled\n              title={t(\n                'Your request to join this team is being reviewed by organization owners'\n              )}\n            >\n              {t('Request Pending')}\n            </Button>\n          ) : openMembership ? (\n            <Button size=\"sm\" onClick={this.handleJoinTeam}>\n              {t('Join Team')}\n            </Button>\n          ) : (\n            <Button size=\"sm\" onClick={this.handleRequestAccess}>\n              {t('Request Access')}\n            </Button>\n          )}\n        </div>\n      </TeamPanelItem>\n    );\n  }\n}\n\nconst TeamLink = styled(Link)`\n  display: inline-block;\n\n  &.focus-visible {\n    margin: -${space(1)};\n    padding: ${space(1)};\n    background: #f2eff5;\n    border-radius: 3px;\n    outline: none;\n  }\n`;\n\nexport {AllTeamsRow};\nexport default withApi(AllTeamsRow);\n\nconst TeamPanelItem = styled(PanelItem)`\n  display: grid;\n  grid-template-columns: minmax(150px, 4fr) minmax(90px, 1fr) min-content;\n  gap: ${space(2)};\n  align-items: center;\n\n  > div:last-child {\n    margin-left: auto;\n  }\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {openCreateTeamModal} from 'sentry/actionCreators/modal';\nimport Button from 'sentry/components/button';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Team} from 'sentry/types';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\nimport AllTeamsRow from './allTeamsRow';\n\ntype Props = {\n  access: Record<string, any>;\n  openMembership: boolean;\n  organization: Organization;\n  teamList: Array<Team>;\n  urlPrefix: string;\n};\n\nfunction AllTeamsList({\n  organization,\n  urlPrefix,\n  openMembership,\n  teamList,\n  access,\n}: Props) {\n  const teamNodes = teamList.map(team => (\n    <AllTeamsRow\n      urlPrefix={urlPrefix}\n      team={team}\n      organization={organization}\n      openMembership={openMembership}\n      key={team.slug}\n    />\n  ));\n\n  if (!teamNodes.length) {\n    const canCreateTeam = access.has('project:admin');\n\n    return (\n      <EmptyMessage>\n        {tct('No teams here. [teamCreate]', {\n          root: <TextBlock noMargin />,\n          teamCreate: canCreateTeam\n            ? tct('You can always [link:create one].', {\n                link: (\n                  <StyledButton\n                    priority=\"link\"\n                    onClick={() =>\n                      openCreateTeamModal({\n                        organization,\n                      })\n                    }\n                    aria-label={t('Create team')}\n                  />\n                ),\n              })\n            : null,\n        })}\n      </EmptyMessage>\n    );\n  }\n\n  return <Fragment>{teamNodes}</Fragment>;\n}\n\nexport default AllTeamsList;\n\nconst StyledButton = styled(Button)`\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport Button from 'sentry/components/button';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {AccessRequest} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\n\ntype Props = {\n  api: Client;\n  onRemoveAccessRequest: (id: string, isApproved: boolean) => void;\n  orgId: string;\n  requestList: AccessRequest[];\n};\n\ntype State = {\n  accessRequestBusy: Record<string, boolean>;\n};\n\ntype HandleOpts = {\n  errorMessage: string;\n  id: string;\n  isApproved: boolean;\n  successMessage: string;\n};\n\nclass OrganizationAccessRequests extends Component<Props, State> {\n  state: State = {\n    accessRequestBusy: {},\n  };\n\n  async handleAction({id, isApproved, successMessage, errorMessage}: HandleOpts) {\n    const {api, orgId, onRemoveAccessRequest} = this.props;\n\n    this.setState(state => ({\n      accessRequestBusy: {...state.accessRequestBusy, [id]: true},\n    }));\n\n    try {\n      await api.requestPromise(`/organizations/${orgId}/access-requests/${id}/`, {\n        method: 'PUT',\n        data: {isApproved},\n      });\n      onRemoveAccessRequest(id, isApproved);\n      addSuccessMessage(successMessage);\n    } catch {\n      addErrorMessage(errorMessage);\n    }\n\n    this.setState(state => ({\n      accessRequestBusy: {...state.accessRequestBusy, [id]: false},\n    }));\n  }\n\n  handleApprove = (id: string, e: React.MouseEvent) => {\n    e.stopPropagation();\n    this.handleAction({\n      id,\n      isApproved: true,\n      successMessage: t('Team request approved'),\n      errorMessage: t('Error approving team request'),\n    });\n  };\n\n  handleDeny = (id: string, e: React.MouseEvent) => {\n    e.stopPropagation();\n    this.handleAction({\n      id,\n      isApproved: false,\n      successMessage: t('Team request denied'),\n      errorMessage: t('Error denying team request'),\n    });\n  };\n\n  render() {\n    const {requestList} = this.props;\n    const {accessRequestBusy} = this.state;\n\n    if (!requestList || !requestList.length) {\n      return null;\n    }\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Pending Team Requests')}</PanelHeader>\n\n        <PanelBody>\n          {requestList.map(({id, member, team, requester}) => {\n            const memberName =\n              member.user &&\n              (member.user.name || member.user.email || member.user.username);\n            const requesterName =\n              requester && (requester.name || requester.email || requester.username);\n            return (\n              <StyledPanelItem key={id}>\n                <div data-test-id=\"request-message\">\n                  {requesterName\n                    ? tct('[requesterName] requests to add [name] to the [team] team.', {\n                        requesterName,\n                        name: <strong>{memberName}</strong>,\n                        team: <strong>#{team.slug}</strong>,\n                      })\n                    : tct('[name] requests access to the [team] team.', {\n                        name: <strong>{memberName}</strong>,\n                        team: <strong>#{team.slug}</strong>,\n                      })}\n                </div>\n                <div>\n                  <StyledButton\n                    priority=\"primary\"\n                    size=\"sm\"\n                    onClick={e => this.handleApprove(id, e)}\n                    busy={accessRequestBusy[id]}\n                  >\n                    {t('Approve')}\n                  </StyledButton>\n                  <Button\n                    busy={accessRequestBusy[id]}\n                    onClick={e => this.handleDeny(id, e)}\n                    size=\"sm\"\n                  >\n                    {t('Deny')}\n                  </Button>\n                </div>\n              </StyledPanelItem>\n            );\n          })}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\nconst StyledPanelItem = styled(PanelItem)`\n  display: grid;\n  grid-template-columns: auto max-content;\n  gap: ${space(2)};\n  align-items: center;\n`;\n\nconst StyledButton = styled(Button)`\n  margin-right: ${space(1)};\n`;\n\nexport default withApi(OrganizationAccessRequests);\n","import {useState} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\nimport partition from 'lodash/partition';\n\nimport {openCreateTeamModal} from 'sentry/actionCreators/modal';\nimport Button from 'sentry/components/button';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport SearchBar from 'sentry/components/searchBar';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {DEFAULT_DEBOUNCE_DURATION} from 'sentry/constants';\nimport {IconAdd} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {AccessRequest, Organization} from 'sentry/types';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport useTeams from 'sentry/utils/useTeams';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport {RoleOverwritePanelAlert} from 'sentry/views/settings/organizationTeams/roleOverwriteWarning';\n\nimport AllTeamsList from './allTeamsList';\nimport OrganizationAccessRequests from './organizationAccessRequests';\n\ntype Props = {\n  access: Set<string>;\n  features: Set<string>;\n  onRemoveAccessRequest: (id: string, isApproved: boolean) => void;\n  organization: Organization;\n  requestList: AccessRequest[];\n} & RouteComponentProps<{orgId: string}, {}>;\n\nfunction OrganizationTeams({\n  organization,\n  access,\n  features,\n  routes,\n  params,\n  requestList,\n  onRemoveAccessRequest,\n}: Props) {\n  const [teamQuery, setTeamQuery] = useState('');\n  const {initiallyLoaded} = useTeams({provideUserTeams: true});\n  const {teams, onSearch, loadMore, hasMore, fetching} = useTeams();\n\n  if (!organization) {\n    return null;\n  }\n  const canCreateTeams = access.has('project:admin');\n\n  const action = (\n    <Button\n      priority=\"primary\"\n      size=\"sm\"\n      disabled={!canCreateTeams}\n      title={\n        !canCreateTeams ? t('You do not have permission to create teams') : undefined\n      }\n      onClick={() =>\n        openCreateTeamModal({\n          organization,\n        })\n      }\n      icon={<IconAdd size=\"xs\" isCircled />}\n    >\n      {t('Create Team')}\n    </Button>\n  );\n\n  const teamRoute = routes.find(({path}) => path === 'teams/');\n  const urlPrefix = teamRoute\n    ? recreateRoute(teamRoute, {routes, params, stepBack: -2})\n    : '';\n\n  const title = t('Teams');\n\n  const debouncedSearch = debounce(onSearch, DEFAULT_DEBOUNCE_DURATION);\n  function handleSearch(query: string) {\n    setTeamQuery(query);\n    debouncedSearch(query);\n  }\n\n  const {slug: orgSlug, orgRole, orgRoleList, teamRoleList} = organization;\n  const filteredTeams = teams.filter(team =>\n    `#${team.slug}`.toLowerCase().includes(teamQuery.toLowerCase())\n  );\n  const [userTeams, otherTeams] = partition(filteredTeams, team => team.isMember);\n\n  return (\n    <div data-test-id=\"team-list\">\n      <SentryDocumentTitle title={title} orgSlug={orgSlug} />\n      <SettingsPageHeader title={title} action={action} />\n\n      <OrganizationAccessRequests\n        orgId={params.orgId}\n        requestList={requestList}\n        onRemoveAccessRequest={onRemoveAccessRequest}\n      />\n      <StyledSearchBar\n        placeholder={t('Search teams')}\n        onChange={handleSearch}\n        query={teamQuery}\n      />\n      <Panel>\n        <PanelHeader>{t('Your Teams')}</PanelHeader>\n        <PanelBody>\n          {features.has('team-roles') && (\n            <RoleOverwritePanelAlert\n              orgRole={orgRole}\n              orgRoleList={orgRoleList}\n              teamRoleList={teamRoleList}\n              isSelf\n            />\n          )}\n          {initiallyLoaded ? (\n            <AllTeamsList\n              urlPrefix={urlPrefix}\n              organization={organization}\n              teamList={userTeams.filter(team => team.slug.includes(teamQuery))}\n              access={access}\n              openMembership={false}\n            />\n          ) : (\n            <LoadingIndicator />\n          )}\n        </PanelBody>\n      </Panel>\n      <Panel>\n        <PanelHeader>{t('Other Teams')}</PanelHeader>\n        <PanelBody>\n          <AllTeamsList\n            urlPrefix={urlPrefix}\n            organization={organization}\n            teamList={otherTeams}\n            access={access}\n            openMembership={\n              !!(features.has('open-membership') || access.has('org:write'))\n            }\n          />\n        </PanelBody>\n      </Panel>\n      {hasMore && (\n        <LoadMoreWrapper>\n          {fetching && <LoadingIndicator mini />}\n          <Button onClick={() => loadMore(teamQuery)}>{t('Show more')}</Button>\n        </LoadMoreWrapper>\n      )}\n    </div>\n  );\n}\n\nconst StyledSearchBar = styled(SearchBar)`\n  margin-bottom: ${space(2)};\n`;\n\nconst LoadMoreWrapper = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  align-items: center;\n  justify-content: end;\n  grid-auto-flow: column;\n`;\n\nexport default OrganizationTeams;\n","import {RouteComponentProps} from 'react-router';\n\nimport {loadStats} from 'sentry/actionCreators/projects';\nimport TeamActions from 'sentry/actions/teamActions';\nimport {Client} from 'sentry/api';\nimport {AccessRequest, Organization, Team} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\n\nimport OrganizationTeams from './organizationTeams';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  teams: Team[];\n} & RouteComponentProps<{orgId: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  requestList: AccessRequest[];\n};\n\nclass OrganizationTeamsContainer extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId} = this.props.params;\n\n    return [['requestList', `/organizations/${orgId}/access-requests/`]];\n  }\n\n  componentDidMount() {\n    this.fetchStats();\n  }\n\n  fetchStats() {\n    loadStats(this.props.api, {\n      orgId: this.props.params.orgId,\n      query: {\n        since: (new Date().getTime() / 1000 - 3600 * 24).toString(),\n        stat: 'generated',\n        group: 'project',\n      },\n    });\n  }\n\n  removeAccessRequest = (id: string, isApproved: boolean) => {\n    const requestToRemove = this.state.requestList.find(request => request.id === id);\n    this.setState(state => ({\n      requestList: state.requestList.filter(request => request.id !== id),\n    }));\n    if (isApproved && requestToRemove) {\n      const team = requestToRemove.team;\n      TeamActions.updateSuccess(team.slug, {\n        ...team,\n        memberCount: team.memberCount + 1,\n      });\n    }\n  };\n\n  renderBody() {\n    const {organization} = this.props;\n\n    if (!organization) {\n      return null;\n    }\n\n    return (\n      <OrganizationTeams\n        {...this.props}\n        access={new Set(organization.access)}\n        features={new Set(organization.features)}\n        organization={organization}\n        requestList={this.state.requestList}\n        onRemoveAccessRequest={this.removeAccessRequest}\n      />\n    );\n  }\n}\n\nexport {OrganizationTeamsContainer};\n\nexport default withApi(withOrganization(OrganizationTeamsContainer));\n","import React from 'react';\n\nimport {PanelAlert} from 'sentry/components/panels';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconInfo} from 'sentry/icons';\nimport {tct} from 'sentry/locale';\nimport {OrgRole, TeamRole} from 'sentry/types';\n\ntype Props = {\n  orgRole: OrgRole['id'] | undefined;\n  orgRoleList: OrgRole[];\n  teamRoleList: TeamRole[];\n  isSelf?: boolean;\n};\n\nexport const RoleOverwriteIcon: React.FC<Props> = props => {\n  const hasOverride = hasOrgRoleOverwrite(props);\n  if (!hasOverride) {\n    return null;\n  }\n\n  return (\n    <Tooltip title={getOverwriteString(props)}>\n      <IconInfo size=\"sm\" color=\"gray300\" />\n    </Tooltip>\n  );\n};\n\nexport const RoleOverwritePanelAlert: React.FC<Props> = props => {\n  const hasOverride = hasOrgRoleOverwrite(props);\n  if (!hasOverride) {\n    return null;\n  }\n\n  return <PanelAlert>{getOverwriteString(props)}</PanelAlert>;\n};\n\n/**\n * Check that the user's org role has a minimum team role that maps to the lowest\n * possible team role\n */\nexport function hasOrgRoleOverwrite(props: Props) {\n  const {orgRole, orgRoleList, teamRoleList} = props;\n\n  const orgRoleObj = orgRoleList.find(r => r.id === orgRole);\n  return teamRoleList.findIndex(r => r.id === orgRoleObj?.minimumTeamRole) > 0;\n}\n\n/**\n * Standardize string so situations where org-level vs team-level roles is easier to recognize\n */\nexport function getOverwriteString(props: Props) {\n  const {orgRole, orgRoleList, teamRoleList, isSelf} = props;\n  const orgRoleObj = orgRoleList.find(r => r.id === orgRole);\n  const teamRoleObj = teamRoleList.find(r => r.id === orgRoleObj?.minimumTeamRole);\n  if (!orgRoleObj || !teamRoleObj) {\n    return '';\n  }\n\n  return tct(\n    '[selfNoun] organization role as [article] [orgRole] has granted [selfPronoun] a minimum team-level role of [teamRole]',\n    {\n      selfNoun: isSelf ? 'Your' : \"This user's\",\n      selfPronoun: isSelf ? 'you' : 'them',\n      article: 'AEIOU'.includes(orgRoleObj.name[0]) ? 'an' : 'a',\n      orgRole: <strong>{orgRoleObj.name}</strong>,\n      teamRole: <strong>{teamRoleObj.name}</strong>,\n    }\n  );\n}\n\nexport default RoleOverwriteIcon;\n"],"names":["recreateRoute","to","options","routes","params","location","stepBack","paths","map","path","lastRootIndex","routeIndex","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","AllTeamsRow","Component","loading","error","team","props","joinTeam","successMessage","tct","slug","errorMessage","TeamActions","isPending","_err","async","reloadProjects","api","organization","setState","Promise","resolve","reject","orgId","teamId","success","addSuccessMessage","addErrorMessage","Error","leaveTeam","features","includes","teamRole","teamRoleList","find","r","id","name","fetchOrganizationDetails","loadProjects","urlPrefix","openMembership","display","avatarSize","description","tn","memberCount","canViewTeam","hasAccess","TeamPanelItem","TeamLink","getTeamRoleName","state","size","disabled","isMember","onClick","handleLeaveTeam","t","handleJoinTeam","handleRequestAccess","Link","space","withApi","PanelItem","AllTeamsList","teamList","access","teamNodes","length","canCreateTeam","has","root","noMargin","teamCreate","link","StyledButton","priority","openCreateTeamModal","Fragment","Button","p","theme","fontSizeLarge","OrganizationAccessRequests","accessRequestBusy","e","stopPropagation","handleAction","isApproved","onRemoveAccessRequest","requestPromise","method","data","requestList","member","requester","memberName","user","email","username","requesterName","StyledPanelItem","handleApprove","busy","handleDeny","OrganizationTeams","teamQuery","setTeamQuery","useState","initiallyLoaded","useTeams","provideUserTeams","teams","onSearch","loadMore","hasMore","fetching","canCreateTeams","action","undefined","icon","isCircled","teamRoute","debouncedSearch","debounce","DEFAULT_DEBOUNCE_DURATION","orgSlug","orgRole","orgRoleList","filteredTeams","filter","toLowerCase","userTeams","otherTeams","partition","StyledSearchBar","placeholder","onChange","query","isSelf","LoadMoreWrapper","mini","SearchBar","OrganizationTeamsContainer","requestToRemove","request","getEndpoints","componentDidMount","fetchStats","loadStats","since","Date","getTime","toString","stat","group","renderBody","Set","removeAccessRequest","withOrganization","RoleOverwriteIcon","hasOrgRoleOverwrite","getOverwriteString","color","RoleOverwritePanelAlert","orgRoleObj","findIndex","minimumTeamRole","teamRoleObj","selfNoun","selfPronoun","article"],"sourceRoot":""}