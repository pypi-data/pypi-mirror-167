{"version":3,"file":"chunks/app_views_performance_transactionSummary_transactionReplays_index_tsx-node_modules_lodash__ba-240a92.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/performance/transactionSummary/transactionReplays/content.tsx","webpack:///./app/views/performance/transactionSummary/transactionReplays/index.tsx","webpack:///./app/views/performance/transactionSummary/transactionReplays/useReplaysFromTransaction.tsx","webpack:///../node_modules/lodash/_baseExtremum.js","webpack:///../node_modules/lodash/_baseGt.js"],"sourcesContent":["import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport first from 'lodash/first';\nimport omit from 'lodash/omit';\n\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport SearchBar from 'sentry/components/events/searchBar';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport Pagination from 'sentry/components/pagination';\nimport space from 'sentry/styles/space';\nimport type {Organization} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport EventView from 'sentry/utils/discover/eventView';\nimport ReplayTable from 'sentry/views/replays/replayTable';\nimport type {ReplayListLocationQuery, ReplayListRecord} from 'sentry/views/replays/types';\n\ntype Props = {\n  eventView: EventView;\n  isFetching: boolean;\n  location: Location<ReplayListLocationQuery>;\n  organization: Organization;\n  pageLinks: string | null;\n  replays: ReplayListRecord[];\n};\n\nfunction ReplaysContent({\n  eventView,\n  isFetching,\n  location,\n  organization,\n  pageLinks,\n  replays,\n}: Props) {\n  const query = location.query;\n\n  function handleChange(key: string) {\n    return function (value: string | undefined) {\n      const queryParams = normalizeDateTimeParams({\n        ...(location.query || {}),\n        [key]: value,\n      });\n\n      // do not propagate pagination when making a new search\n      const toOmit = ['cursor'];\n      if (!defined(value)) {\n        toOmit.push(key);\n      }\n      const searchQueryParams = omit(queryParams, toOmit);\n\n      browserHistory.push({\n        ...location,\n        query: searchQueryParams,\n      });\n    };\n  }\n\n  return (\n    <Layout.Main fullWidth>\n      <FilterActions>\n        <PageFilterBar condensed>\n          <EnvironmentPageFilter />\n          <DatePageFilter alignDropdown=\"left\" />\n        </PageFilterBar>\n        <SearchBar\n          organization={organization}\n          projectIds={eventView.project}\n          query={query.query}\n          fields={eventView.fields}\n          onSearch={handleChange('query')}\n        />\n      </FilterActions>\n      <ReplayTable\n        isFetching={isFetching}\n        replays={replays}\n        showProjectColumn={false}\n        sort={first(eventView.sorts) || {field: 'startedAt', kind: 'asc'}}\n      />\n      <Pagination pageLinks={pageLinks} />\n    </Layout.Main>\n  );\n}\n\nconst FilterActions = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: auto 1fr;\n  }\n`;\n\nexport default ReplaysContent;\n","import {Fragment, useEffect} from 'react';\nimport {Location} from 'history';\n\nimport Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport type {Organization, Project} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProjects from 'sentry/utils/withProjects';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\n\nimport PageLayout, {ChildProps} from '../pageLayout';\nimport Tab from '../tabs';\n\nimport ReplaysContent from './content';\nimport useReplaysFromTransaction from './useReplaysFromTransaction';\n\ntype Props = {\n  location: Location<ReplayListLocationQuery>;\n  organization: Organization;\n  projects: Project[];\n};\n\nfunction renderNoAccess() {\n  return (\n    <PageContent>\n      <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n    </PageContent>\n  );\n}\n\nfunction TransactionReplays(props: Props) {\n  const {location, organization, projects} = props;\n\n  return (\n    <Feature\n      features={['session-replay-ui']}\n      organization={organization}\n      renderDisabled={renderNoAccess}\n    >\n      <PageLayout\n        location={location}\n        organization={organization}\n        projects={projects}\n        tab={Tab.Replays}\n        getDocumentTitle={getDocumentTitle}\n        generateEventView={generateEventView}\n        childComponent={ReplaysContentWrapper}\n      />\n    </Feature>\n  );\n}\n\nfunction ReplaysContentWrapper({\n  eventView: eventsWithReplaysView,\n  location,\n  organization,\n  setError,\n}: ChildProps) {\n  const {eventView, replays, pageLinks, isFetching, fetchError} =\n    useReplaysFromTransaction({\n      eventsWithReplaysView,\n      location,\n      organization,\n    });\n\n  useEffect(() => {\n    setError(fetchError?.message);\n  }, [setError, fetchError]);\n\n  if (isFetching || !eventView) {\n    return (\n      <Layout.Main fullWidth>\n        <LoadingIndicator />\n      </Layout.Main>\n    );\n  }\n\n  return replays ? (\n    <ReplaysContent\n      eventView={eventView}\n      isFetching={isFetching}\n      location={location}\n      organization={organization}\n      pageLinks={pageLinks}\n      replays={replays}\n    />\n  ) : (\n    <Fragment>{null}</Fragment>\n  );\n}\n\nfunction getDocumentTitle(transactionName: string): string {\n  const hasTransactionName =\n    typeof transactionName === 'string' && String(transactionName).trim().length > 0;\n\n  if (hasTransactionName) {\n    return [String(transactionName).trim(), t('Replays')].join(' \\u2014 ');\n  }\n\n  return [t('Summary'), t('Replays')].join(' \\u2014 ');\n}\n\nfunction generateEventView({\n  location,\n  transactionName,\n}: {\n  location: Location;\n  transactionName: string;\n}) {\n  const query = decodeScalar(location.query.query, '');\n  const conditions = new MutableSearch(query);\n  conditions.addFilterValues('transaction', [transactionName]);\n  conditions.addFilterValues('!replayId', ['']);\n\n  return EventView.fromNewQueryWithLocation(\n    {\n      id: '',\n      name: `Replay events within a transaction`,\n      version: 2,\n      fields: ['replayId', 'count()'],\n      query: conditions.formatString(),\n      projects: [],\n    },\n    location\n  );\n}\n\nexport default withProjects(withOrganization(TransactionReplays));\n","import {useCallback, useEffect, useState} from 'react';\nimport {Location} from 'history';\n\nimport type {Client} from 'sentry/api';\nimport type {Organization} from 'sentry/types';\nimport {TableData} from 'sentry/utils/discover/discoverQuery';\nimport EventView, {fromSorts} from 'sentry/utils/discover/eventView';\nimport {doDiscoverQuery} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport fetchReplayList, {\n  DEFAULT_SORT,\n  REPLAY_LIST_FIELDS,\n} from 'sentry/utils/replays/fetchReplayList';\nimport useApi from 'sentry/utils/useApi';\n\ntype State = Awaited<ReturnType<typeof fetchReplayList>> & {\n  eventView: undefined | EventView;\n};\n\ntype Options = {\n  eventsWithReplaysView: EventView;\n  location: Location;\n  organization: Organization;\n};\n\nfunction useReplaysFromTransaction({\n  eventsWithReplaysView,\n  location,\n  organization,\n}: Options) {\n  const api = useApi();\n  const [data, setData] = useState<State>({\n    fetchError: undefined,\n    isFetching: true,\n    pageLinks: null,\n    replays: [],\n    eventView: undefined,\n  });\n\n  const load = useCallback(async () => {\n    const replayIds = await fetchReplayIds({\n      api,\n      eventView: eventsWithReplaysView,\n      location,\n      organization,\n    });\n    const eventView = EventView.fromNewQueryWithLocation(\n      {\n        id: '',\n        name: 'Replays within a transaction',\n        version: 2,\n        fields: REPLAY_LIST_FIELDS,\n        projects: [],\n        query: `id:[${String(replayIds)}]`,\n      },\n      location\n    );\n    eventView.sorts = fromSorts(decodeScalar(location.query.sort, DEFAULT_SORT));\n    const listData = await fetchReplayList({\n      api,\n      eventView,\n      location,\n      organization,\n    });\n    setData({\n      ...listData,\n      eventView,\n    });\n  }, [api, eventsWithReplaysView, location, organization]);\n\n  useEffect(() => {\n    load();\n  }, [load]);\n\n  return data;\n}\n\nasync function fetchReplayIds({\n  api,\n  eventView,\n  location,\n  organization,\n}: {\n  api: Client;\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n}) {\n  try {\n    const [data] = await doDiscoverQuery<TableData>(\n      api,\n      `/organizations/${organization.slug}/events/`,\n      eventView.getEventsAPIPayload(location)\n    );\n\n    return data.data.map(record => String(record.replayId));\n  } catch (err) {\n    return null;\n  }\n}\n\nexport default useReplaysFromTransaction;\n","var isSymbol = require('./isSymbol');\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseExtremum;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nmodule.exports = baseGt;\n"],"names":["ReplaysContent","eventView","isFetching","location","organization","pageLinks","replays","query","fullWidth","FilterActions","condensed","alignDropdown","projectIds","project","fields","onSearch","key","value","queryParams","normalizeDateTimeParams","toOmit","defined","push","searchQueryParams","omit","browserHistory","showProjectColumn","sort","first","sorts","field","kind","space","p","theme","breakpoints","small","renderNoAccess","type","t","TransactionReplays","props","projects","features","renderDisabled","tab","Tab","getDocumentTitle","generateEventView","childComponent","ReplaysContentWrapper","eventsWithReplaysView","setError","fetchError","api","useApi","data","setData","useState","undefined","load","useCallback","async","replayIds","doDiscoverQuery","slug","getEventsAPIPayload","map","record","String","replayId","err","fetchReplayIds","EventView","id","name","version","REPLAY_LIST_FIELDS","fromSorts","decodeScalar","DEFAULT_SORT","listData","fetchReplayList","useEffect","useReplaysFromTransaction","message","Fragment","transactionName","trim","length","join","conditions","MutableSearch","addFilterValues","formatString","withProjects","withOrganization","isSymbol","module","exports","array","iteratee","comparator","index","current","computed","result","other"],"sourceRoot":""}