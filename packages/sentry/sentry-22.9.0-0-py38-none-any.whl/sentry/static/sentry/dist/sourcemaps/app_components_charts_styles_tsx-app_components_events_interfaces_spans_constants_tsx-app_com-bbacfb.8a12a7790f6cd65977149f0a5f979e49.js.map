{"version":3,"file":"chunks/app_components_charts_styles_tsx-app_components_events_interfaces_spans_constants_tsx-app_com-bbacfb.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/charts/styles.tsx","webpack:///./app/components/circleIndicator.tsx","webpack:///./app/components/events/interfaces/spans/constants.tsx","webpack:///./app/components/tagDeprecated.tsx","webpack:///./app/components/featureBadge.tsx","webpack:///./app/components/modals/widgetBuilder/addToDashboardModal.tsx","webpack:///./app/components/performance/waterfall/treeConnector.tsx","webpack:///./app/utils/performance/vitals/constants.tsx","webpack:///./app/utils/withProject.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\n\nexport const SubHeading = styled('h3')`\n  font-size: ${p => p.theme.fontSizeLarge};\n  font-weight: normal;\n  color: ${p => p.theme.textColor};\n  margin: 0;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nexport const SectionHeading = styled('h4')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  gap: ${space(1)};\n  align-items: center;\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin: ${space(1)} 0;\n`;\n\nexport const SectionValue = styled('span')`\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-right: ${space(1)};\n`;\n\nexport const InlineContainer = styled('div')`\n  display: grid;\n  align-items: center;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-auto-flow: column;\n    grid-column-gap: ${space(1)};\n  }\n`;\n\nexport const ChartControls = styled('div')`\n  padding: ${space(1)} ${space(1)} ${space(1)} ${space(3)};\n  border-top: 1px solid ${p => p.theme.border};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    justify-content: space-between;\n    flex-wrap: wrap;\n  }\n`;\n\n// Header element for charts within panels.\nexport const HeaderTitle = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  gap: ${space(1)};\n  ${p => p.theme.text.cardTitle};\n  color: ${p => p.theme.headingColor};\n  align-items: center;\n`;\n\n// Header element for charts within panels\n// This header can be rendered while the chart is still loading\nexport const HeaderTitleLegend = styled(HeaderTitle)`\n  background-color: ${p => p.theme.background};\n  border-bottom-right-radius: ${p => p.theme.borderRadius};\n  position: absolute;\n  z-index: 1;\n`;\n\n// Used for rendering total value of a chart right below the HeaderTitleLegend\nexport const HeaderValue = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  gap: ${space(1)};\n  align-items: baseline;\n  background-color: ${p => p.theme.background};\n  position: absolute;\n  top: 40px;\n  z-index: 1;\n  font-size: ${p => p.theme.headerFontSize};\n`;\n\nexport const ChartContainer = styled('div')`\n  padding: ${space(2)} ${space(3)};\n`;\n","import styled from '@emotion/styled';\n\nimport {Theme} from 'sentry/utils/theme';\n\nconst defaultProps = {\n  enabled: true,\n  size: 14,\n};\n\ntype DefaultProps = Readonly<typeof defaultProps>;\n\ntype Props = {\n  color?: string;\n} & Partial<DefaultProps>;\n\nconst getBackgroundColor = (p: Props & {theme: Theme}) => {\n  if (p.color) {\n    return `background: ${p.color};`;\n  }\n\n  return `background: ${p.enabled ? p.theme.success : p.theme.error};`;\n};\n\nconst getSize = (p: Props) => `\n  height: ${p.size}px;\n  width: ${p.size}px;\n`;\n\nconst CircleIndicator = styled('div')<Props>`\n  display: inline-block;\n  position: relative;\n  border-radius: 50%;\n  ${getSize};\n  ${getBackgroundColor};\n`;\n\nCircleIndicator.defaultProps = defaultProps;\n\nexport default CircleIndicator;\n","export const MINIMAP_HEIGHT = 120;\n\nexport const MINIMAP_SPAN_BAR_HEIGHT = 4;\n\nexport const NUM_OF_SPANS_FIT_IN_MINI_MAP = MINIMAP_HEIGHT / MINIMAP_SPAN_BAR_HEIGHT;\n\nexport const TIME_AXIS_HEIGHT = 20;\n\nconst SECONDARY_HEADER_HEIGHT = 20;\n\nexport const MINIMAP_CONTAINER_HEIGHT =\n  MINIMAP_HEIGHT + TIME_AXIS_HEIGHT + SECONDARY_HEADER_HEIGHT + 1;\n\nexport const VIEW_HANDLE_HEIGHT = 18;\n\nexport const MERGE_LABELS_THRESHOLD_PERCENT = 10;\n","import {cloneElement, isValidElement} from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\nimport {Theme} from 'sentry/utils/theme';\n\ntype Props = React.HTMLAttributes<HTMLDivElement> & {\n  border?: boolean;\n  icon?: string | React.ReactNode;\n  inline?: boolean;\n  priority?: keyof Theme['badge'] | keyof Theme['alert'];\n  size?: string;\n};\n\ntype StyleFuncProps = Props & {theme: Theme};\n\n/**\n * Get priority from alerts or badge styles\n */\nconst getPriority = (p: StyleFuncProps) => {\n  if (p.priority) {\n    return p.theme.alert[p.priority] ?? p.theme.badge[p.priority] ?? null;\n  }\n\n  return null;\n};\n\nconst getMarginLeft = (p: StyleFuncProps) =>\n  p.inline ? `margin-left: ${p.size === 'small' ? '0.25em' : '0.5em'};` : '';\n\nconst getBorder = (p: StyleFuncProps) =>\n  p.border ? `border: 1px solid ${getPriority(p)?.border ?? p.theme.border};` : '';\n\nconst Tag = styled(\n  ({\n    children,\n    icon,\n    inline: _inline,\n    priority: _priority,\n    size: _size,\n    border: _border,\n    ...props\n  }: Props) => (\n    <div {...props}>\n      {icon && (\n        <IconWrapper>\n          {isValidElement(icon) && cloneElement<any>(icon, {size: 'xs'})}\n        </IconWrapper>\n      )}\n      {children}\n    </div>\n  )\n)`\n  display: inline-flex;\n  box-sizing: border-box;\n  padding: ${p => (p.size === 'small' ? '0.1em 0.4em 0.2em' : '0.35em 0.8em 0.4em')};\n  font-size: ${p => p.theme.fontSizeExtraSmall};\n  line-height: 1;\n  color: ${p => (p.priority ? p.theme.background : p.theme.textColor)};\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  align-items: center;\n  border-radius: ${p => (p.size === 'small' ? '0.25em' : '2em')};\n  text-transform: lowercase;\n  font-weight: ${p => (p.size === 'small' ? 'bold' : 'normal')};\n  background: ${p => getPriority(p)?.background ?? p.theme.gray100};\n  ${p => getBorder(p)};\n  ${p => getMarginLeft(p)};\n`;\n\nconst IconWrapper = styled('span')`\n  margin-right: ${space(0.5)};\n`;\n\nexport default Tag;\n","import {Fragment} from 'react';\nimport {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {captureException, withScope} from '@sentry/react';\nimport type {Severity} from '@sentry/types';\n\nimport CircleIndicator from 'sentry/components/circleIndicator';\nimport Tag from 'sentry/components/tagDeprecated';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\ntype BadgeProps = {\n  type: 'alpha' | 'beta' | 'new';\n  expiresAt?: Date;\n  noTooltip?: boolean;\n  title?: string;\n  variant?: 'indicator' | 'badge';\n};\n\ntype Props = Omit<React.HTMLAttributes<HTMLDivElement>, keyof BadgeProps> & BadgeProps;\n\nconst defaultTitles = {\n  alpha: t('This feature is internal and available for QA purposes'),\n  beta: t('This feature is available for early adopters and may change'),\n  new: t('This feature is new! Try it out and let us know what you think'),\n};\n\nconst labels = {\n  alpha: t('alpha'),\n  beta: t('beta'),\n  new: t('new'),\n};\n\nfunction BaseFeatureBadge({\n  type,\n  variant = 'badge',\n  title,\n  noTooltip,\n  expiresAt,\n  ...props\n}: Props) {\n  const theme = useTheme();\n  if (expiresAt && expiresAt.valueOf() < Date.now()) {\n    // Only get 1% of events as we don't need many to know that a badge needs to be cleaned up.\n    if (Math.random() < 0.01) {\n      withScope(scope => {\n        scope.setTag('title', title);\n        scope.setTag('type', type);\n        scope.setLevel('warning' as Severity);\n        captureException(new Error('Expired Feature Badge'));\n      });\n    }\n    return null;\n  }\n\n  return (\n    <div {...props}>\n      <Tooltip title={title ?? defaultTitles[type]} disabled={noTooltip} position=\"right\">\n        <Fragment>\n          {variant === 'badge' && <StyledTag priority={type}>{labels[type]}</StyledTag>}\n          {variant === 'indicator' && (\n            <CircleIndicator color={theme.badge[type].indicatorColor} size={8} />\n          )}\n        </Fragment>\n      </Tooltip>\n    </div>\n  );\n}\n\nconst StyledTag = styled(Tag)`\n  padding: 3px ${space(0.75)};\n`;\n\nconst FeatureBadge = styled(BaseFeatureBadge)`\n  display: inline-flex;\n  align-items: center;\n  margin-left: ${space(0.75)};\n  position: relative;\n  top: -1px;\n`;\n\nexport default FeatureBadge;\n","import {useEffect, useState} from 'react';\nimport {InjectedRouter} from 'react-router';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {Location, Query} from 'history';\n\nimport {\n  fetchDashboard,\n  fetchDashboards,\n  updateDashboard,\n} from 'sentry/actionCreators/dashboards';\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {DateString, Organization, PageFilters, SelectValue} from 'sentry/types';\nimport handleXhrErrorResponse from 'sentry/utils/handleXhrErrorResponse';\nimport {MetricsCardinalityProvider} from 'sentry/utils/performance/contexts/metricsCardinality';\nimport {MEPSettingProvider} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport useApi from 'sentry/utils/useApi';\nimport {\n  DashboardDetails,\n  DashboardListItem,\n  DisplayType,\n  MAX_WIDGETS,\n  Widget,\n} from 'sentry/views/dashboardsV2/types';\nimport {\n  eventViewFromWidget,\n  getDashboardFiltersFromURL,\n  getSavedFiltersAsPageFilters,\n  getSavedPageFilters,\n} from 'sentry/views/dashboardsV2/utils';\nimport {NEW_DASHBOARD_ID} from 'sentry/views/dashboardsV2/widgetBuilder/utils';\nimport WidgetCard from 'sentry/views/dashboardsV2/widgetCard';\nimport {OrganizationContext} from 'sentry/views/organizationContext';\nimport {MetricsDataSwitcher} from 'sentry/views/performance/landing/metricsDataSwitcher';\n\ntype WidgetAsQueryParams = Query & {\n  defaultTableColumns: string[];\n  defaultTitle: string;\n  defaultWidgetQuery: string;\n  displayType: DisplayType;\n  environment: string[];\n  project: number[];\n  source: string;\n  end?: DateString;\n  start?: DateString;\n  statsPeriod?: string | null;\n};\n\nexport type AddToDashboardModalProps = {\n  location: Location;\n  organization: Organization;\n  router: InjectedRouter;\n  selection: PageFilters;\n  widget: Widget;\n  widgetAsQueryParams: WidgetAsQueryParams;\n};\n\ntype Props = ModalRenderProps & AddToDashboardModalProps;\n\nconst SELECT_DASHBOARD_MESSAGE = t('Select a dashboard');\n\nfunction AddToDashboardModal({\n  Header,\n  Body,\n  Footer,\n  closeModal,\n  location,\n  organization,\n  router,\n  selection,\n  widget,\n  widgetAsQueryParams,\n}: Props) {\n  const api = useApi();\n  const [dashboards, setDashboards] = useState<DashboardListItem[] | null>(null);\n  const [selectedDashboard, setSelectedDashboard] = useState<DashboardDetails | null>(\n    null\n  );\n  const [selectedDashboardId, setSelectedDashboardId] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Track mounted state so we dont call setState on unmounted components\n    let unmounted = false;\n\n    fetchDashboards(api, organization.slug).then(response => {\n      // If component has unmounted, dont set state\n      if (unmounted) {\n        return;\n      }\n\n      setDashboards(response);\n    });\n\n    return () => {\n      unmounted = true;\n    };\n  }, [api, organization.slug]);\n\n  useEffect(() => {\n    // Track mounted state so we dont call setState on unmounted components\n    let unmounted = false;\n\n    if (selectedDashboardId === NEW_DASHBOARD_ID || selectedDashboardId === null) {\n      setSelectedDashboard(null);\n    } else {\n      fetchDashboard(api, organization.slug, selectedDashboardId).then(response => {\n        // If component has unmounted, dont set state\n        if (unmounted) {\n          return;\n        }\n\n        setSelectedDashboard(response);\n      });\n    }\n\n    return () => {\n      unmounted = true;\n    };\n  }, [api, organization.slug, selectedDashboardId]);\n\n  function handleGoToBuilder() {\n    const pathname =\n      selectedDashboardId === NEW_DASHBOARD_ID\n        ? `/organizations/${organization.slug}/dashboards/new/widget/new/`\n        : `/organizations/${organization.slug}/dashboard/${selectedDashboardId}/widget/new/`;\n\n    router.push({\n      pathname,\n      query: {\n        ...widgetAsQueryParams,\n        ...(organization.features.includes('dashboards-top-level-filter') &&\n        selectedDashboard\n          ? getSavedPageFilters(selectedDashboard)\n          : {}),\n      },\n    });\n    closeModal();\n  }\n\n  async function handleAddAndStayInDiscover() {\n    if (selectedDashboard === null) {\n      return;\n    }\n\n    let orderby = widget.queries[0].orderby;\n    if (!(DisplayType.AREA && widget.queries[0].columns.length)) {\n      orderby = ''; // Clear orderby if its not a top n visualization.\n    }\n    const query = widget.queries[0];\n\n    const newWidget = {\n      ...widget,\n      title: widget.title === '' ? t('All Events') : widget.title,\n      queries: [{...query, orderby}],\n    };\n\n    try {\n      const newDashboard = {\n        ...selectedDashboard,\n        widgets: [...selectedDashboard.widgets, newWidget],\n      };\n\n      await updateDashboard(api, organization.slug, newDashboard);\n\n      closeModal();\n      addSuccessMessage(t('Successfully added widget to dashboard'));\n    } catch (e) {\n      const errorMessage = t('Unable to add widget to dashboard');\n      handleXhrErrorResponse(errorMessage)(e);\n      addErrorMessage(errorMessage);\n    }\n  }\n\n  const canSubmit = selectedDashboardId !== null;\n\n  return (\n    <OrganizationContext.Provider value={organization}>\n      <Header closeButton>\n        <h4>{t('Add to Dashboard')}</h4>\n      </Header>\n      <Body>\n        <Wrapper>\n          <SelectControl\n            disabled={dashboards === null}\n            menuPlacement=\"auto\"\n            name=\"dashboard\"\n            placeholder={t('Select Dashboard')}\n            value={selectedDashboardId}\n            options={\n              dashboards && [\n                {label: t('+ Create New Dashboard'), value: 'new'},\n                ...dashboards.map(({title, id, widgetDisplay}) => ({\n                  label: title,\n                  value: id,\n                  disabled: widgetDisplay.length >= MAX_WIDGETS,\n                  tooltip:\n                    widgetDisplay.length >= MAX_WIDGETS &&\n                    tct('Max widgets ([maxWidgets]) per dashboard reached.', {\n                      maxWidgets: MAX_WIDGETS,\n                    }),\n                  tooltipOptions: {position: 'right'},\n                })),\n              ]\n            }\n            onChange={(option: SelectValue<string>) => {\n              if (option.disabled) {\n                return;\n              }\n              setSelectedDashboardId(option.value);\n            }}\n          />\n        </Wrapper>\n        <Wrapper>\n          {organization.features.includes('dashboards-top-level-filter')\n            ? t(\n                'Any conflicting filters from this query will be overridden by Dashboard filters. This is a preview of how the widget will appear in your dashboard.'\n              )\n            : t('This is a preview of how the widget will appear in your dashboard.')}\n        </Wrapper>\n        <MetricsCardinalityProvider organization={organization} location={location}>\n          <MetricsDataSwitcher\n            organization={organization}\n            eventView={eventViewFromWidget(\n              widget.title,\n              widget.queries[0],\n              selection,\n              widget.displayType\n            )}\n            location={location}\n            hideLoadingIndicator\n          >\n            {metricsDataSide => (\n              <MEPSettingProvider\n                location={location}\n                forceTransactions={metricsDataSide.forceTransactionsOnly}\n              >\n                <WidgetCard\n                  api={api}\n                  organization={organization}\n                  currentWidgetDragging={false}\n                  isEditing={false}\n                  isSorting={false}\n                  widgetLimitReached={false}\n                  selection={\n                    organization.features.includes('dashboards-top-level-filter') &&\n                    selectedDashboard\n                      ? getSavedFiltersAsPageFilters(selectedDashboard)\n                      : selection\n                  }\n                  dashboardFilters={\n                    organization.features.includes('dashboards-top-level-filter')\n                      ? getDashboardFiltersFromURL(location) ?? selectedDashboard?.filters\n                      : {}\n                  }\n                  widget={widget}\n                  showStoredAlert\n                />\n              </MEPSettingProvider>\n            )}\n          </MetricsDataSwitcher>\n        </MetricsCardinalityProvider>\n      </Body>\n\n      <Footer>\n        <StyledButtonBar gap={1.5}>\n          <Button\n            onClick={handleAddAndStayInDiscover}\n            disabled={!canSubmit || selectedDashboardId === NEW_DASHBOARD_ID}\n            title={canSubmit ? undefined : SELECT_DASHBOARD_MESSAGE}\n          >\n            {t('Add + Stay in Discover')}\n          </Button>\n          <Button\n            priority=\"primary\"\n            onClick={handleGoToBuilder}\n            disabled={!canSubmit}\n            title={canSubmit ? undefined : SELECT_DASHBOARD_MESSAGE}\n          >\n            {t('Open in Widget Builder')}\n          </Button>\n        </StyledButtonBar>\n      </Footer>\n    </OrganizationContext.Provider>\n  );\n}\n\nexport default AddToDashboardModal;\n\nconst Wrapper = styled('div')`\n  margin-bottom: ${space(2)};\n`;\n\nconst StyledButtonBar = styled(ButtonBar)`\n  @media (max-width: ${props => props.theme.breakpoints.small}) {\n    grid-template-rows: repeat(2, 1fr);\n    gap: ${space(1.5)};\n    width: 100%;\n\n    > button {\n      width: 100%;\n    }\n  }\n`;\n\nexport const modalCss = css`\n  max-width: 700px;\n  margin: 70px auto;\n`;\n","import styled from '@emotion/styled';\n\nimport {ROW_HEIGHT} from 'sentry/components/performance/waterfall/constants';\nimport {getToggleTheme} from 'sentry/components/performance/waterfall/utils';\nimport {IconChevron} from 'sentry/icons';\nimport space from 'sentry/styles/space';\n\nconst TOGGLE_BUTTON_MARGIN_RIGHT = 16;\nexport const TOGGLE_BUTTON_MAX_WIDTH = 30;\nexport const TOGGLE_BORDER_BOX = TOGGLE_BUTTON_MAX_WIDTH + TOGGLE_BUTTON_MARGIN_RIGHT;\nconst TREE_TOGGLE_CONTAINER_WIDTH = 40;\n\nexport const ConnectorBar = styled('div')<{orphanBranch: boolean}>`\n  height: 250%;\n\n  border-left: 2px ${p => (p.orphanBranch ? 'dashed' : 'solid')} ${p => p.theme.border};\n  position: absolute;\n  top: 0;\n`;\n\ntype TogglerTypes = {\n  hasToggler?: boolean;\n  isLast?: boolean;\n};\n\nexport const TreeConnector = styled('div')<TogglerTypes & {orphanBranch: boolean}>`\n  height: ${p => (p.isLast ? ROW_HEIGHT / 2 + 1 : ROW_HEIGHT)}px;\n  width: 100%;\n  border-left: ${p => `2px ${p.orphanBranch ? 'dashed' : 'solid'} ${p.theme.border};`};\n  position: absolute;\n  top: 0;\n\n  ${p =>\n    p.isLast\n      ? `\n      border-bottom: 2px ${p.orphanBranch ? 'dashed' : 'solid'} ${p.theme.border};\n      border-bottom-left-radius: ${p.theme.borderRadius};`\n      : `\n      &:before {\n        content: '';\n        height: 2px;\n        left: -2px;\n        border-bottom: 2px ${p.orphanBranch ? 'dashed' : 'solid'} ${p.theme.border};\n        width: calc(100% - 2px);\n        position: absolute;\n        bottom: calc(50% - 1px);\n      }`}\n\n  &:after {\n    content: '';\n    background-color: ${p => p.theme.border};\n    border-radius: 50%;\n    height: 6px;\n    width: 6px;\n    position: absolute;\n    right: 0;\n    top: ${ROW_HEIGHT / 2 - 3}px;\n  }\n`;\n\ntype SpanTreeTogglerAndDivProps = {\n  disabled: boolean;\n  errored: boolean;\n  isExpanded: boolean;\n  isSpanGroupToggler?: boolean;\n};\n\nexport const TreeToggle = styled('div')<SpanTreeTogglerAndDivProps>`\n  height: 16px;\n  white-space: nowrap;\n  min-width: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 99px;\n  padding: 0px ${space(0.5)};\n  transition: all 0.15s ease-in-out;\n  font-size: 10px;\n  line-height: 0;\n  z-index: 1;\n  box-shadow: ${p => p.theme.dropShadowLightest};\n\n  ${p => getToggleTheme(p)}\n`;\n\nexport const TreeToggleContainer = styled('div')<TogglerTypes>`\n  position: relative;\n  height: ${ROW_HEIGHT}px;\n  width: ${TREE_TOGGLE_CONTAINER_WIDTH}px;\n  min-width: ${TREE_TOGGLE_CONTAINER_WIDTH}px;\n  margin-right: ${space(1)};\n  z-index: ${p => p.theme.zIndex.traceView.spanTreeToggler};\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n`;\n\nexport const TreeToggleIcon = styled(IconChevron)`\n  width: 7px;\n  margin-left: ${space(0.25)};\n`;\n","import {t} from 'sentry/locale';\nimport {measurementType} from 'sentry/utils/discover/fields';\nimport {MobileVital, WebVital} from 'sentry/utils/fields';\nimport {Vital} from 'sentry/utils/performance/vitals/types';\n\nexport const WEB_VITAL_DETAILS: Record<WebVital, Vital> = {\n  [WebVital.FP]: {\n    slug: 'fp',\n    name: t('First Paint'),\n    acronym: 'FP',\n    description: t(\n      'Render time of the first pixel loaded in the viewport (may overlap with FCP).'\n    ),\n    poorThreshold: 3000,\n    type: measurementType(WebVital.FP),\n  },\n  [WebVital.FCP]: {\n    slug: 'fcp',\n    name: t('First Contentful Paint'),\n    acronym: 'FCP',\n    description: t(\n      'Render time of the first image, text or other DOM node in the viewport.'\n    ),\n    poorThreshold: 3000,\n    type: measurementType(WebVital.FCP),\n  },\n  [WebVital.LCP]: {\n    slug: 'lcp',\n    name: t('Largest Contentful Paint'),\n    acronym: 'LCP',\n    description: t(\n      'Render time of the largest image, text or other DOM node in the viewport.'\n    ),\n    poorThreshold: 4000,\n    type: measurementType(WebVital.LCP),\n  },\n  [WebVital.FID]: {\n    slug: 'fid',\n    name: t('First Input Delay'),\n    acronym: 'FID',\n    description: t(\n      'Response time of the browser to a user interaction (clicking, tapping, etc).'\n    ),\n    poorThreshold: 300,\n    type: measurementType(WebVital.FID),\n  },\n  [WebVital.CLS]: {\n    slug: 'cls',\n    name: t('Cumulative Layout Shift'),\n    acronym: 'CLS',\n    description: t(\n      'Sum of layout shift scores that measure the visual stability of the page.'\n    ),\n    poorThreshold: 0.25,\n    type: measurementType(WebVital.CLS),\n  },\n  [WebVital.TTFB]: {\n    slug: 'ttfb',\n    name: t('Time to First Byte'),\n    acronym: 'TTFB',\n    description: t(\n      \"The time that it takes for a user's browser to receive the first byte of page content.\"\n    ),\n    poorThreshold: 600,\n    type: measurementType(WebVital.TTFB),\n  },\n  [WebVital.RequestTime]: {\n    slug: 'ttfb.requesttime',\n    name: t('Request Time'),\n    acronym: 'RT',\n    description: t(\n      'Captures the time spent making the request and receiving the first byte of the response.'\n    ),\n    poorThreshold: 600,\n    type: measurementType(WebVital.RequestTime),\n  },\n};\n\nexport const MOBILE_VITAL_DETAILS: Record<MobileVital, Vital> = {\n  [MobileVital.AppStartCold]: {\n    slug: 'app_start_cold',\n    name: t('App Start Cold'),\n    description: t(\n      'Cold start is a measure of the application start up time from scratch.'\n    ),\n    type: measurementType(MobileVital.AppStartCold),\n  },\n  [MobileVital.AppStartWarm]: {\n    slug: 'app_start_warm',\n    name: t('App Start Warm'),\n    description: t(\n      'Warm start is a measure of the application start up time while still in memory.'\n    ),\n    type: measurementType(MobileVital.AppStartWarm),\n  },\n  [MobileVital.FramesTotal]: {\n    slug: 'frames_total',\n    name: t('Total Frames'),\n    description: t(\n      'Total frames is a count of the number of frames recorded within a transaction.'\n    ),\n    type: measurementType(MobileVital.FramesTotal),\n  },\n  [MobileVital.FramesSlow]: {\n    slug: 'frames_slow',\n    name: t('Slow Frames'),\n    description: t(\n      'Slow frames is a count of the number of slow frames recorded within a transaction.'\n    ),\n    type: measurementType(MobileVital.FramesSlow),\n  },\n  [MobileVital.FramesFrozen]: {\n    slug: 'frames_frozen',\n    name: t('Frozen Frames'),\n    description: t(\n      'Frozen frames is a count of the number of frozen frames recorded within a transaction.'\n    ),\n    type: measurementType(MobileVital.FramesFrozen),\n  },\n  [MobileVital.FramesSlowRate]: {\n    slug: 'frames_slow_rate',\n    name: t('Slow Frames Rate'),\n    description: t(\n      'Slow Frames Rate is the percentage of frames recorded within a transaction that is considered slow.'\n    ),\n    type: measurementType(MobileVital.FramesSlowRate),\n  },\n  [MobileVital.FramesFrozenRate]: {\n    slug: 'frames_frozen_rate',\n    name: t('Frozen Frames Rate'),\n    description: t(\n      'Frozen Frames Rate is the percentage of frames recorded within a transaction that is considered frozen.'\n    ),\n    type: measurementType(MobileVital.FramesFrozenRate),\n  },\n  [MobileVital.StallCount]: {\n    slug: 'stall_count',\n    name: t('Stalls'),\n    description: t(\n      'Stalls is the number of times the application stalled within a transaction.'\n    ),\n    type: measurementType(MobileVital.StallCount),\n  },\n  [MobileVital.StallTotalTime]: {\n    slug: 'stall_total_time',\n    name: t('Total Stall Time'),\n    description: t(\n      'Stall Total Time is the total amount of time the application is stalled within a transaction.'\n    ),\n    type: measurementType(MobileVital.StallTotalTime),\n  },\n  [MobileVital.StallLongestTime]: {\n    slug: 'stall_longest_time',\n    name: t('Longest Stall Time'),\n    description: t(\n      'Stall Longest Time is the longest amount of time the application is stalled within a transaction.'\n    ),\n    type: measurementType(MobileVital.StallLongestTime),\n  },\n  [MobileVital.StallPercentage]: {\n    slug: 'stall_percentage',\n    name: t('Stall Percentage'),\n    description: t(\n      'Stall Percentage is the percentage of the transaction duration the application was stalled.'\n    ),\n    type: measurementType(MobileVital.StallPercentage),\n  },\n};\n\nexport enum Browser {\n  CHROME = 'Chrome',\n  EDGE = 'Edge',\n  OPERA = 'Opera',\n  FIREFOX = 'Firefox',\n  SAFARI = 'Safari',\n  IE = 'IE',\n}\n","import {Component} from 'react';\n\nimport SentryTypes from 'sentry/sentryTypes';\nimport {Project} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedProjectProps = {\n  project?: Project;\n};\n\n/**\n * Currently wraps component with project from context\n */\nconst withProject = <P extends InjectedProjectProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  class extends Component<\n    Omit<P, keyof InjectedProjectProps> & Partial<InjectedProjectProps>\n  > {\n    static displayName = `withProject(${getDisplayName(WrappedComponent)})`;\n    static contextTypes = {\n      project: SentryTypes.Project,\n    };\n\n    render() {\n      const {project, ...props} = this.props;\n      return (\n        <WrappedComponent\n          {...({project: project ?? this.context.project, ...props} as P)}\n        />\n      );\n    }\n  };\n\nexport default withProject;\n"],"names":["SectionHeading","space","p","theme","subText","fontSizeMedium","SectionValue","InlineContainer","breakpoints","small","ChartControls","border","HeaderTitle","text","cardTitle","headingColor","HeaderTitleLegend","background","borderRadius","HeaderValue","headerFontSize","ChartContainer","getBackgroundColor","color","enabled","success","error","getSize","size","CircleIndicator","defaultProps","MINIMAP_HEIGHT","MINIMAP_SPAN_BAR_HEIGHT","NUM_OF_SPANS_FIT_IN_MINI_MAP","TIME_AXIS_HEIGHT","MINIMAP_CONTAINER_HEIGHT","VIEW_HANDLE_HEIGHT","MERGE_LABELS_THRESHOLD_PERCENT","getPriority","priority","alert","badge","Tag","children","icon","inline","_inline","_priority","_size","_border","props","IconWrapper","isValidElement","cloneElement","fontSizeExtraSmall","textColor","gray100","getBorder","getMarginLeft","defaultTitles","alpha","t","beta","new","labels","BaseFeatureBadge","type","variant","title","noTooltip","expiresAt","useTheme","valueOf","Date","now","Math","random","withScope","scope","setTag","setLevel","captureException","Error","disabled","position","Fragment","StyledTag","indicatorColor","SELECT_DASHBOARD_MESSAGE","AddToDashboardModal","Header","Body","Footer","closeModal","location","organization","router","selection","widget","widgetAsQueryParams","api","useApi","dashboards","setDashboards","useState","selectedDashboard","setSelectedDashboard","selectedDashboardId","setSelectedDashboardId","useEffect","unmounted","fetchDashboards","slug","then","response","NEW_DASHBOARD_ID","fetchDashboard","canSubmit","value","closeButton","Wrapper","menuPlacement","name","placeholder","options","label","map","id","widgetDisplay","length","MAX_WIDGETS","tooltip","tct","maxWidgets","tooltipOptions","onChange","option","features","includes","eventView","eventViewFromWidget","queries","displayType","hideLoadingIndicator","metricsDataSide","forceTransactions","forceTransactionsOnly","currentWidgetDragging","isEditing","isSorting","widgetLimitReached","getSavedFiltersAsPageFilters","dashboardFilters","getDashboardFiltersFromURL","filters","showStoredAlert","StyledButtonBar","gap","onClick","async","orderby","DisplayType","columns","query","newWidget","newDashboard","widgets","updateDashboard","addSuccessMessage","e","errorMessage","handleXhrErrorResponse","addErrorMessage","undefined","pathname","push","getSavedPageFilters","ButtonBar","modalCss","TOGGLE_BUTTON_MAX_WIDTH","TOGGLE_BORDER_BOX","ConnectorBar","orphanBranch","TreeConnector","isLast","ROW_HEIGHT","TreeToggle","dropShadowLightest","getToggleTheme","TreeToggleContainer","zIndex","traceView","spanTreeToggler","TreeToggleIcon","IconChevron","WEB_VITAL_DETAILS","WebVital","acronym","description","poorThreshold","measurementType","MOBILE_VITAL_DETAILS","MobileVital","Browser","WrappedComponent","Component","render","project","this","context","getDisplayName","SentryTypes"],"sourceRoot":""}