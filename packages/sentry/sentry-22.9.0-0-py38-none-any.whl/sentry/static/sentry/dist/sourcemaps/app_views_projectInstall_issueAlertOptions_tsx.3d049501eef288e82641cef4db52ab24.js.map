{"version":3,"file":"chunks/app_views_projectInstall_issueAlertOptions_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/alerts/rules/metric/presets.tsx","webpack:///./app/views/alerts/rules/metric/types.tsx","webpack:///./app/components/forms/MultipleCheckboxField.tsx","webpack:///./app/views/projectInstall/issueAlertOptions.tsx"],"sourcesContent":["import {Client} from 'sentry/api';\nimport {IconGraph} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {uniqueId} from 'sentry/utils/guid';\n\nimport {AlertType} from '../../wizard/options';\n\nimport {\n  ActionType,\n  AlertRuleComparisonType,\n  AlertRuleThresholdType,\n  AlertRuleTriggerType,\n  Dataset,\n  EventTypes,\n  TargetType,\n  Trigger,\n} from './types';\n\nexport type PresetContext = {\n  aggregate: string;\n  comparisonType: AlertRuleComparisonType;\n  dataset: Dataset;\n  eventTypes: EventTypes[];\n  name: string;\n  thresholdType: AlertRuleThresholdType;\n\n  triggers: Trigger[];\n  comparisonDelta?: number;\n  query?: string;\n  timeWindow?: number;\n};\nexport type Preset = {\n  Icon: typeof IconGraph;\n  // Will be shown on the corresponding alert type in the wizard.\n  alertType: AlertType;\n  description: string;\n  id: string;\n  makeContext(\n    client: Client,\n    project: Project,\n    organization: Organization\n  ): Promise<PresetContext>;\n  makeUnqueriedContext(project: Project, organization: Organization): PresetContext;\n  title: string;\n};\n\nasync function getHighestVolumeTransaction(\n  client: Client,\n  organizationSlug: string,\n  projectId: string\n): Promise<[string, number] | null> {\n  const result = await client.requestPromise(\n    `/organizations/${organizationSlug}/events/`,\n    {\n      method: 'GET',\n      data: {\n        statsPeriod: '7d',\n        project: projectId,\n        field: ['count()', 'transaction'],\n        sort: '-count',\n        referrer: 'alert.presets.highest-volume',\n        query: 'event.type:transaction',\n        per_page: 1,\n      },\n    }\n  );\n  const transaction = result.data[0];\n  if (transaction) {\n    return [transaction.transaction, transaction['count()']];\n  }\n  return null;\n}\n\nfunction makeTeamCriticalAlert(project: Project, threshold: number = 200) {\n  return {\n    label: AlertRuleTriggerType.CRITICAL,\n    alertThreshold: threshold,\n    actions: project.teams.slice(0, 4).map(team => ({\n      type: ActionType.EMAIL,\n      targetType: TargetType.TEAM,\n      targetIdentifier: team.id,\n      unsavedDateCreated: new Date().toISOString(),\n      inputChannelId: null,\n      options: null,\n      unsavedId: uniqueId(),\n    })),\n  };\n}\nfunction makeTeamWarningAlert(threshold: number = 100) {\n  return {\n    label: AlertRuleTriggerType.WARNING,\n    alertThreshold: threshold,\n    actions: [],\n  };\n}\n\nexport const PRESET_AGGREGATES: readonly Preset[] = [\n  {\n    id: 'p95-highest-volume',\n    title: t('Slow transactions'),\n    description: 'Get notified when important transactions are slower on average',\n    Icon: IconGraph,\n    alertType: 'trans_duration',\n    makeUnqueriedContext(project, _) {\n      return {\n        name: t('p95 Alert for %s', [project.slug]),\n        aggregate: 'p95(transaction.duration)',\n        dataset: Dataset.TRANSACTIONS,\n        eventTypes: [EventTypes.TRANSACTION],\n        timeWindow: 60,\n        comparisonDelta: 1440,\n        comparisonType: AlertRuleComparisonType.CHANGE,\n        thresholdType: AlertRuleThresholdType.ABOVE,\n        triggers: [makeTeamCriticalAlert(project), makeTeamWarningAlert()],\n      };\n    },\n    async makeContext(client, project, organization) {\n      const transaction = (\n        await getHighestVolumeTransaction(client, organization.slug, project.id)\n      )?.[0];\n      return {\n        ...this.makeUnqueriedContext(project, organization),\n        query: 'transaction:' + transaction,\n      };\n    },\n  },\n  {\n    id: 'throughput-highest-volume',\n    title: t('Throttled throughput'),\n    description: 'Send an alert when transaction throughput drops significantly',\n    Icon: IconGraph,\n    alertType: 'throughput',\n    makeUnqueriedContext(project, _) {\n      return {\n        name: t('Throughput Alert for %s', [project.slug]),\n        aggregate: 'count()',\n        dataset: Dataset.TRANSACTIONS,\n        eventTypes: [EventTypes.TRANSACTION],\n        timeWindow: 30,\n        comparisonDelta: 24 * 60 * 7,\n        comparisonType: AlertRuleComparisonType.CHANGE,\n        thresholdType: AlertRuleThresholdType.BELOW,\n        triggers: [makeTeamCriticalAlert(project, 500), makeTeamWarningAlert(300)],\n      };\n    },\n    async makeContext(client, project, organization) {\n      const transaction = (\n        await getHighestVolumeTransaction(client, organization.slug, project.id)\n      )?.[0];\n      return {\n        ...this.makeUnqueriedContext(project, organization),\n        query: 'transaction:' + transaction,\n      };\n    },\n  },\n  {\n    id: 'apdex-highest-volume',\n    title: t('Apdex Score'),\n    description:\n      'Learn when the ratio of satisfactory, tolerable, and frustrated requests drop',\n    Icon: IconGraph,\n    alertType: 'apdex',\n    makeUnqueriedContext(project, _) {\n      return {\n        name: t('Apdex regression for %s', [project.slug]),\n        aggregate: 'apdex(300)',\n        dataset: Dataset.TRANSACTIONS,\n        eventTypes: [EventTypes.TRANSACTION],\n        timeWindow: 30,\n        comparisonDelta: 24 * 60 * 7,\n        comparisonType: AlertRuleComparisonType.CHANGE,\n        thresholdType: AlertRuleThresholdType.BELOW,\n        triggers: [makeTeamCriticalAlert(project), makeTeamWarningAlert()],\n      };\n    },\n    async makeContext(client, project, organization) {\n      const transaction = (\n        await getHighestVolumeTransaction(client, organization.slug, project.id)\n      )?.[0];\n      return {\n        ...this.makeUnqueriedContext(project, organization),\n        query: 'transaction:' + transaction,\n      };\n    },\n  },\n] as const;\n","import {t} from 'sentry/locale';\nimport {MEPAlertsQueryType} from 'sentry/views/alerts/wizard/options';\nimport type {SchemaFormConfig} from 'sentry/views/organizationIntegrations/sentryAppExternalForm';\n\nimport type {Incident} from '../../types';\n\nexport enum AlertRuleThresholdType {\n  ABOVE,\n  BELOW,\n}\n\nexport enum AlertRuleTriggerType {\n  CRITICAL = 'critical',\n  WARNING = 'warning',\n  RESOLVE = 'resolve',\n}\n\nexport enum AlertRuleComparisonType {\n  COUNT = 'count',\n  CHANGE = 'change',\n  PERCENT = 'percent',\n}\n\nexport enum Dataset {\n  ERRORS = 'events',\n  TRANSACTIONS = 'transactions',\n  /** Also used for performance alerts **/\n  GENERIC_METRICS = 'generic_metrics',\n  SESSIONS = 'sessions',\n  /** Also used for crash free alerts */\n  METRICS = 'metrics',\n}\n\nexport enum EventTypes {\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n  USER = 'user',\n  SESSION = 'session',\n}\n\nexport enum Datasource {\n  ERROR_DEFAULT = 'error_default',\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n}\n\n/**\n * This is not a real aggregate as crash-free sessions/users can be only calculated on frontend by comparing the count of sessions broken down by status\n * It is here nevertheless to shoehorn sessions dataset into existing alerts codebase\n * This will most likely be revised as we introduce the metrics dataset\n */\nexport enum SessionsAggregate {\n  CRASH_FREE_SESSIONS = 'percentage(sessions_crashed, sessions) AS _crash_rate_alert_aggregate',\n  CRASH_FREE_USERS = 'percentage(users_crashed, users) AS _crash_rate_alert_aggregate',\n}\n\nexport type UnsavedTrigger = {\n  actions: Action[];\n  alertThreshold: number | '' | null;\n  label: AlertRuleTriggerType;\n  // UnsavedTrigger can be a part of an Unsaved Alert Rule that does not have an\n  // id yet\n  alertRuleId?: string;\n};\n\nexport type ThresholdControlValue = {\n  /**\n   * Resolve threshold is optional, so it can be null\n   */\n  threshold: number | '' | null;\n  thresholdType: AlertRuleThresholdType;\n};\n\ntype SavedTrigger = Omit<UnsavedTrigger, 'actions'> & {\n  actions: Action[];\n  dateCreated: string;\n  id: string;\n};\n\nexport type Trigger = Partial<SavedTrigger> & UnsavedTrigger;\n\nexport type UnsavedMetricRule = {\n  aggregate: string;\n  dataset: Dataset;\n  environment: string | null;\n  projects: string[];\n  query: string;\n  resolveThreshold: number | '' | null;\n  thresholdPeriod: number | null;\n  thresholdType: AlertRuleThresholdType;\n  timeWindow: TimeWindow;\n  triggers: Trigger[];\n  comparisonDelta?: number | null;\n  eventTypes?: EventTypes[];\n  owner?: string | null;\n  queryType?: MEPAlertsQueryType | null;\n};\n\nexport interface SavedMetricRule extends UnsavedMetricRule {\n  dateCreated: string;\n  dateModified: string;\n  id: string;\n  name: string;\n  status: number;\n  createdBy?: {email: string; id: number; name: string} | null;\n  errors?: {detail: string}[];\n  /**\n   * Returned with the expand=latestIncident query parameter\n   */\n  latestIncident?: Incident | null;\n  originalAlertRuleId?: number | null;\n}\n\nexport type MetricRule = Partial<SavedMetricRule> & UnsavedMetricRule;\n\nexport enum TimePeriod {\n  SIX_HOURS = '6h',\n  ONE_DAY = '1d',\n  THREE_DAYS = '3d',\n  // Seven days is actually 10080m but we have a max of 10000 events\n  SEVEN_DAYS = '10000m',\n  FOURTEEN_DAYS = '14d',\n  THIRTY_DAYS = '30d',\n}\n\nexport enum TimeWindow {\n  ONE_MINUTE = 1,\n  FIVE_MINUTES = 5,\n  TEN_MINUTES = 10,\n  FIFTEEN_MINUTES = 15,\n  THIRTY_MINUTES = 30,\n  ONE_HOUR = 60,\n  TWO_HOURS = 120,\n  FOUR_HOURS = 240,\n  ONE_DAY = 1440,\n}\n\nexport enum ActionType {\n  EMAIL = 'email',\n  SLACK = 'slack',\n  PAGERDUTY = 'pagerduty',\n  MSTEAMS = 'msteams',\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const ActionLabel = {\n  // \\u200B is needed because Safari disregards autocomplete=\"off\". It's seeing \"Email\" and\n  // opening up the browser autocomplete for email. https://github.com/JedWatson/react-select/issues/3500\n  [ActionType.EMAIL]: t('Emai\\u200Bl'),\n  [ActionType.SLACK]: t('Slack'),\n  [ActionType.PAGERDUTY]: t('Pagerduty'),\n  [ActionType.MSTEAMS]: t('MS Teams'),\n  [ActionType.SENTRY_APP]: t('Notification'),\n};\n\nexport enum TargetType {\n  // A direct reference, like an email address, Slack channel, or PagerDuty service\n  SPECIFIC = 'specific',\n\n  // A specific user. This could be used to grab the user's email address.\n  USER = 'user',\n\n  // A specific team. This could be used to send an email to everyone associated with a team.\n  TEAM = 'team',\n\n  // A Sentry App instead of any of the above.\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const TargetLabel = {\n  [TargetType.USER]: t('Member'),\n  [TargetType.TEAM]: t('Team'),\n};\n\n/**\n * This is an available action template that is associated to a Trigger in a\n * Metric Alert Rule. They are defined by the available-actions API.\n */\nexport type MetricActionTemplate = {\n  /**\n   * See `TargetType`\n   */\n  allowedTargetTypes: TargetType[];\n\n  /**\n   * The integration type e.g. 'email'\n   */\n  type: ActionType;\n\n  /**\n   * Integration id for this `type`, should be passed to backend as `integrationId` when creating an action\n   */\n  integrationId?: number;\n\n  /**\n   * Name of the integration. This is a text field that differentiates integrations from the same provider from each other\n   */\n  integrationName?: string;\n\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options?: Array<{label: string; value: any}>;\n\n  /**\n   * SentryApp id for this `type`, should be passed to backend as `sentryAppId` when creating an action.\n   */\n  sentryAppId?: number;\n\n  sentryAppInstallationUuid?: string;\n  /**\n   * Name of the SentryApp. Like `integrationName`, this differentiates SentryApps from each other.\n   */\n  sentryAppName?: string;\n\n  /**\n   * Sentry App Alert Rule UI Component settings\n   */\n  settings?: SchemaFormConfig;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n\n/**\n * This is the user's configured action\n */\nexport type Action = UnsavedAction & Partial<SavedActionFields>;\n\ntype SavedActionFields = {\n  /**\n   * The id of the alert rule this action belongs to\n   */\n  alertRuleTriggerId: string;\n\n  /**\n   * date created\n   */\n  dateCreated: string;\n\n  /**\n   * A human readable description of the action generated by server\n   */\n  desc: string;\n\n  /**\n   * model id of the action\n   */\n  id: string;\n\n  /**\n   *  Could not fetch details from SentryApp. Show the rule but make it disabled.\n   */\n  disabled?: boolean;\n};\n\ntype UnsavedAction = {\n  /**\n   * An optional Slack channel or user id the user can input to avoid rate limiting issues.\n   */\n  inputChannelId: string | null;\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options: Array<{label: string; value: any}> | null;\n  /**\n   * How to identify the target. Can be email, slack channel, pagerduty service,\n   * user_id, team_id, SentryApp id, etc\n   */\n  targetIdentifier: string | null;\n\n  targetType: TargetType | null;\n\n  type: ActionType;\n  /** Used to maintain order of unsaved actions */\n  unsavedDateCreated: string;\n  unsavedId: string;\n\n  /**\n   * The id of the integration, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  integrationId?: number | null;\n\n  /**\n   * The id of the SentryApp, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  sentryAppId?: number | null;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n","import {Key} from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\n\nimport CheckboxFancy from '../checkboxFancy/checkboxFancy';\n\ntype CheckboxOption<T> = {\n  title: string;\n  value: T;\n  checked?: boolean;\n  disabled?: boolean;\n  intermediate?: boolean;\n};\n\ntype Props<T> = {\n  choices: CheckboxOption<T>[];\n  className?: string;\n  onClick?(item: T);\n  size?: string;\n};\n\nexport default function MultipleCheckboxField<T extends Key>(props: Props<T>) {\n  return (\n    <div className={props.className}>\n      {props.choices.map(option => (\n        <CheckboxWrapper key={option.value.toString()}>\n          <CheckboxFancy\n            size={props.size}\n            isDisabled={option.disabled}\n            isChecked={option.checked}\n            isIndeterminate={option.intermediate}\n            onClick={() => {\n              props.onClick?.(option.value);\n            }}\n          />\n          <CheckboxText>{option.title}</CheckboxText>\n        </CheckboxWrapper>\n      ))}\n    </div>\n  );\n}\n\nconst CheckboxWrapper = styled('div')`\n  margin-bottom: ${space(2)};\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst CheckboxText = styled('span')`\n  margin-left: ${space(1)};\n`;\n","import {Fragment} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport isEqual from 'lodash/isEqual';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport RadioGroup from 'sentry/components/forms/controls/radioGroup';\nimport MultipleCheckboxField from 'sentry/components/forms/MultipleCheckboxField';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport Input from 'sentry/components/input';\nimport PageHeading from 'sentry/components/pageHeading';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport {PRESET_AGGREGATES} from '../alerts/rules/metric/presets';\n\nenum MetricValues {\n  ERRORS,\n  USERS,\n}\nenum Actions {\n  ALERT_ON_EVERY_ISSUE,\n  CUSTOMIZED_ALERTS,\n  CREATE_ALERT_LATER,\n}\n\nconst UNIQUE_USER_FREQUENCY_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventUniqueUserFrequencyCondition';\nconst EVENT_FREQUENCY_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventFrequencyCondition';\nconst NOTIFY_EVENT_ACTION = 'sentry.rules.actions.notify_event.NotifyEventAction';\nexport const EVENT_FREQUENCY_PERCENT_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventFrequencyPercentCondition';\n\nconst METRIC_CONDITION_MAP = {\n  [MetricValues.ERRORS]: EVENT_FREQUENCY_CONDITION,\n  [MetricValues.USERS]: UNIQUE_USER_FREQUENCY_CONDITION,\n} as const;\n\nconst DEFAULT_PLACEHOLDER_VALUE = '10';\n\ntype StateUpdater = (updatedData: RequestDataFragment) => void;\ntype Props = AsyncComponent['props'] & {\n  onChange: StateUpdater;\n  organization: Organization;\n};\n\ntype State = AsyncComponent['state'] & {\n  alertSetting: string;\n  // TODO(ts): When we have alert conditional types, convert this\n  conditions: any;\n  interval: string;\n  intervalChoices: [string, string][] | undefined;\n  metric: MetricValues;\n  metricAlertPresets: Set<string>;\n\n  threshold: string;\n};\n\ntype RequestDataFragment = {\n  actionMatch: string;\n  actions: {id: string}[];\n  conditions: {id: string; interval: string; value: string}[] | undefined;\n  defaultRules: boolean;\n  frequency: number;\n  metricAlertPresets: string[];\n  name: string;\n  shouldCreateCustomRule: boolean;\n};\n\nfunction getConditionFrom(\n  interval: string,\n  metricValue: MetricValues,\n  threshold: string\n): {id: string; interval: string; value: string} {\n  let condition: string;\n  switch (metricValue) {\n    case MetricValues.ERRORS:\n      condition = EVENT_FREQUENCY_CONDITION;\n      break;\n    case MetricValues.USERS:\n      condition = UNIQUE_USER_FREQUENCY_CONDITION;\n      break;\n    default:\n      throw new RangeError('Supplied metric value is not handled');\n  }\n  return {\n    interval,\n    id: condition,\n    value: threshold,\n  };\n}\n\nfunction unpackConditions(conditions: any[]) {\n  const equalityReducer = (acc, curr) => {\n    if (!acc || !curr || !isEqual(acc, curr)) {\n      return null;\n    }\n    return acc;\n  };\n\n  const intervalChoices = conditions\n    .map(condition => condition.formFields?.interval?.choices)\n    .reduce(equalityReducer);\n  return {intervalChoices, interval: intervalChoices?.[0]?.[0]};\n}\n\nclass IssueAlertOptions extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      conditions: [],\n      intervalChoices: [],\n      alertSetting: Actions.CREATE_ALERT_LATER.toString(),\n      metric: MetricValues.ERRORS,\n      interval: '',\n      threshold: '',\n      metricAlertPresets: new Set(),\n    };\n  }\n\n  getAvailableMetricOptions() {\n    return [\n      {value: MetricValues.ERRORS, label: t('occurrences of')},\n      {value: MetricValues.USERS, label: t('users affected by')},\n    ].filter(({value}) => {\n      return this.state.conditions?.some?.(\n        object => object?.id === METRIC_CONDITION_MAP[value]\n      );\n    });\n  }\n\n  getIssueAlertsChoices(\n    hasProperlyLoadedConditions: boolean\n  ): [string, string | React.ReactElement][] {\n    const options: [string, React.ReactNode][] = [\n      [Actions.CREATE_ALERT_LATER.toString(), t(\"I'll create my own alerts later\")],\n      [Actions.ALERT_ON_EVERY_ISSUE.toString(), t('Alert me on every new issue')],\n    ];\n\n    if (hasProperlyLoadedConditions) {\n      options.push([\n        Actions.CUSTOMIZED_ALERTS.toString(),\n        <CustomizeAlertsGrid\n          key={Actions.CUSTOMIZED_ALERTS}\n          onClick={e => {\n            // XXX(epurkhiser): The `e.preventDefault` here is needed to stop\n            // propagation of the click up to the label, causing it to focus\n            // the radio input and lose focus on the select.\n            e.preventDefault();\n            const alertSetting = Actions.CUSTOMIZED_ALERTS.toString();\n            this.setStateAndUpdateParents({alertSetting});\n          }}\n        >\n          {t('When there are more than')}\n          <InlineInput\n            type=\"number\"\n            min=\"0\"\n            name=\"\"\n            placeholder={DEFAULT_PLACEHOLDER_VALUE}\n            value={this.state.threshold}\n            onChange={threshold =>\n              this.setStateAndUpdateParents({threshold: threshold.target.value})\n            }\n            data-test-id=\"range-input\"\n          />\n          <InlineSelectControl\n            value={this.state.metric}\n            options={this.getAvailableMetricOptions()}\n            onChange={metric => this.setStateAndUpdateParents({metric: metric.value})}\n          />\n          {t('a unique error in')}\n          <InlineSelectControl\n            value={this.state.interval}\n            options={this.state.intervalChoices?.map(([value, label]) => ({\n              value,\n              label,\n            }))}\n            onChange={interval =>\n              this.setStateAndUpdateParents({interval: interval.value})\n            }\n          />\n        </CustomizeAlertsGrid>,\n      ]);\n    }\n    return options.map(([choiceValue, node]) => [\n      choiceValue,\n      <RadioItemWrapper key={choiceValue}>{node}</RadioItemWrapper>,\n    ]);\n  }\n\n  getUpdatedData(): RequestDataFragment {\n    let defaultRules: boolean;\n    let shouldCreateCustomRule: boolean;\n    const alertSetting: Actions = parseInt(this.state.alertSetting, 10);\n    switch (alertSetting) {\n      case Actions.ALERT_ON_EVERY_ISSUE:\n        defaultRules = true;\n        shouldCreateCustomRule = false;\n        break;\n      case Actions.CREATE_ALERT_LATER:\n        defaultRules = false;\n        shouldCreateCustomRule = false;\n        break;\n      case Actions.CUSTOMIZED_ALERTS:\n        defaultRules = false;\n        shouldCreateCustomRule = true;\n        break;\n      default:\n        throw new RangeError('Supplied alert creation action is not handled');\n    }\n\n    return {\n      defaultRules,\n      shouldCreateCustomRule,\n      name: 'Send a notification for new issues',\n      conditions:\n        this.state.interval.length > 0 && this.state.threshold.length > 0\n          ? [\n              getConditionFrom(\n                this.state.interval,\n                this.state.metric,\n                this.state.threshold\n              ),\n            ]\n          : undefined,\n      actions: [{id: NOTIFY_EVENT_ACTION}],\n      actionMatch: 'all',\n      frequency: 5,\n      metricAlertPresets: Array.from(this.state.metricAlertPresets),\n    };\n  }\n\n  setStateAndUpdateParents<K extends keyof State>(\n    state:\n      | ((\n          prevState: Readonly<State>,\n          props: Readonly<Props>\n        ) => Pick<State, K> | State | null)\n      | Pick<State, K>\n      | State\n      | null\n  ): void {\n    this.setState(state, () => {\n      this.props.onChange(this.getUpdatedData());\n    });\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [['conditions', `/projects/${this.props.organization.slug}/rule-conditions/`]];\n  }\n\n  onLoadAllEndpointsSuccess(): void {\n    const conditions = this.state.conditions?.filter?.(object =>\n      Object.values(METRIC_CONDITION_MAP).includes(object?.id)\n    );\n\n    if (!conditions || conditions.length === 0) {\n      this.setStateAndUpdateParents({\n        conditions: undefined,\n      });\n      return;\n    }\n\n    const {intervalChoices, interval} = unpackConditions(conditions);\n    if (!intervalChoices || !interval) {\n      Sentry.withScope(scope => {\n        scope.setExtra('props', this.props);\n        scope.setExtra('state', this.state);\n        Sentry.captureException(\n          new Error('Interval choices or sent from API endpoint is inconsistent or empty')\n        );\n      });\n      this.setStateAndUpdateParents({\n        conditions: undefined,\n      });\n      return;\n    }\n\n    this.setStateAndUpdateParents({\n      conditions,\n      intervalChoices,\n      interval,\n    });\n  }\n\n  renderBody(): React.ReactElement {\n    const issueAlertOptionsChoices = this.getIssueAlertsChoices(\n      this.state.conditions?.length > 0\n    );\n    const showMetricAlertSelections =\n      !!this.props.organization.experiments.MetricAlertOnProjectCreationExperiment;\n    return (\n      <Fragment>\n        <PageHeadingWithTopMargins withMargins>\n          {t('Set your default alert settings')}\n        </PageHeadingWithTopMargins>\n        <Content>\n          {showMetricAlertSelections && <Subheading>{t('Issue Alerts')}</Subheading>}\n          <RadioGroupWithPadding\n            choices={issueAlertOptionsChoices}\n            label={t('Options for creating an alert')}\n            onChange={alertSetting => this.setStateAndUpdateParents({alertSetting})}\n            value={this.state.alertSetting}\n          />\n          {showMetricAlertSelections && (\n            <Fragment>\n              <Subheading>{t('Performance Alerts')}</Subheading>\n              <MultipleCheckboxField\n                size=\"24px\"\n                choices={PRESET_AGGREGATES.map(agg => ({\n                  title: agg.description,\n                  value: agg.id,\n                  checked: this.state.metricAlertPresets.has(agg.id),\n                }))}\n                css={CheckboxFieldStyles}\n                onClick={selectedItem => {\n                  const next = new Set(this.state.metricAlertPresets);\n                  if (next.has(selectedItem)) {\n                    next.delete(selectedItem);\n                  } else {\n                    next.add(selectedItem);\n                  }\n                  this.setStateAndUpdateParents({\n                    metricAlertPresets: next,\n                  });\n                }}\n              />\n            </Fragment>\n          )}\n        </Content>\n      </Fragment>\n    );\n  }\n}\n\nexport default withOrganization(IssueAlertOptions);\n\nconst CheckboxFieldStyles = css`\n  margin-top: ${space(1)};\n`;\n\nconst Content = styled('div')`\n  padding-top: ${space(2)};\n  padding-bottom: ${space(4)};\n`;\n\nconst CustomizeAlertsGrid = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(5, max-content);\n  gap: ${space(1)};\n  align-items: center;\n`;\nconst InlineInput = styled(Input)`\n  width: 80px;\n`;\nconst InlineSelectControl = styled(SelectControl)`\n  width: 160px;\n`;\nconst RadioGroupWithPadding = styled(RadioGroup)`\n  margin-bottom: ${space(2)};\n`;\nconst PageHeadingWithTopMargins = styled(PageHeading)`\n  margin-top: 65px;\n  margin-bottom: 0;\n  padding-bottom: ${space(3)};\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n`;\nconst RadioItemWrapper = styled('div')`\n  min-height: 35px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\nconst Subheading = styled('b')`\n  display: block;\n`;\n"],"names":["async","getHighestVolumeTransaction","client","organizationSlug","projectId","transaction","requestPromise","method","data","statsPeriod","project","field","sort","referrer","query","per_page","makeTeamCriticalAlert","threshold","label","AlertRuleTriggerType","alertThreshold","actions","teams","slice","map","team","type","ActionType","targetType","TargetType","targetIdentifier","id","unsavedDateCreated","Date","toISOString","inputChannelId","options","unsavedId","uniqueId","makeTeamWarningAlert","PRESET_AGGREGATES","title","t","description","Icon","IconGraph","alertType","makeUnqueriedContext","_","name","slug","aggregate","dataset","Dataset","eventTypes","EventTypes","timeWindow","comparisonDelta","comparisonType","AlertRuleComparisonType","thresholdType","AlertRuleThresholdType","triggers","organization","this","Datasource","SessionsAggregate","TimePeriod","TimeWindow","ActionLabel","EMAIL","SLACK","PAGERDUTY","MSTEAMS","SENTRY_APP","TargetLabel","USER","TEAM","MultipleCheckboxField","props","className","choices","option","CheckboxWrapper","size","isDisabled","disabled","isChecked","checked","isIndeterminate","intermediate","onClick","value","CheckboxText","toString","space","MetricValues","Actions","UNIQUE_USER_FREQUENCY_CONDITION","EVENT_FREQUENCY_CONDITION","EVENT_FREQUENCY_PERCENT_CONDITION","METRIC_CONDITION_MAP","ERRORS","USERS","getConditionFrom","interval","metricValue","condition","RangeError","IssueAlertOptions","AsyncComponent","getDefaultState","super","conditions","intervalChoices","alertSetting","CREATE_ALERT_LATER","metric","metricAlertPresets","Set","getAvailableMetricOptions","filter","state","some","object","getIssueAlertsChoices","hasProperlyLoadedConditions","ALERT_ON_EVERY_ISSUE","push","CUSTOMIZED_ALERTS","CustomizeAlertsGrid","e","preventDefault","setStateAndUpdateParents","InlineInput","min","placeholder","onChange","target","InlineSelectControl","choiceValue","node","RadioItemWrapper","getUpdatedData","defaultRules","shouldCreateCustomRule","parseInt","length","undefined","actionMatch","frequency","Array","from","setState","getEndpoints","onLoadAllEndpointsSuccess","Object","values","includes","formFields","reduce","acc","curr","isEqual","unpackConditions","Sentry","scope","setExtra","Error","renderBody","issueAlertOptionsChoices","showMetricAlertSelections","experiments","MetricAlertOnProjectCreationExperiment","Fragment","PageHeadingWithTopMargins","withMargins","Content","Subheading","RadioGroupWithPadding","agg","has","css","CheckboxFieldStyles","selectedItem","next","delete","add","withOrganization","Input","SelectControl","RadioGroup","PageHeading"],"sourceRoot":""}