{"version":3,"file":"chunks/app_views_settings_organizationTeams_teamDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/links/listLink.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/settings/organizationTeams/teamDetails.tsx"],"sourcesContent":["import {Component} from 'react';\n// eslint-disable-next-line no-restricted-imports\nimport {Link as RouterLink, withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\nimport {LocationDescriptor} from 'history';\nimport omit from 'lodash/omit';\nimport * as qs from 'query-string';\n\ntype DefaultProps = {\n  activeClassName: string;\n  disabled: boolean;\n  index: boolean;\n};\n\ntype LinkProps = Omit<React.ComponentProps<typeof RouterLink>, 'to'>;\n\ntype Props = WithRouterProps &\n  Partial<DefaultProps> &\n  LinkProps & {\n    /**\n     * Link target. We don't want to expose the ToLocationFunction on this component.\n     */\n    to: LocationDescriptor;\n    // If supplied by parent component, decides whether link element\n    // is \"active\" or not ... overriding default behavior of strict\n    // route matching\n    isActive?: (location: LocationDescriptor, indexOnly?: boolean) => boolean;\n    query?: string;\n  };\n\nclass ListLink extends Component<Props> {\n  static displayName = 'ListLink';\n\n  static defaultProps: DefaultProps = {\n    activeClassName: 'active',\n    index: false,\n    disabled: false,\n  };\n\n  isActive() {\n    const {isActive, to, query, index, router} = this.props;\n    const queryData = query ? qs.parse(query) : undefined;\n    const target: LocationDescriptor =\n      typeof to === 'string' ? {pathname: to, query: queryData} : to;\n\n    if (typeof isActive === 'function') {\n      return isActive(target, index);\n    }\n\n    return router.isActive(target, index);\n  }\n\n  getClassName = () => {\n    const _classNames = {};\n    const {className, activeClassName} = this.props;\n\n    if (className) {\n      _classNames[className] = true;\n    }\n\n    if (this.isActive() && activeClassName) {\n      _classNames[activeClassName] = true;\n    }\n\n    return classNames(_classNames);\n  };\n\n  render() {\n    const {index, children, to, disabled, ...props} = this.props;\n    const carriedProps = omit(\n      props,\n      'activeClassName',\n      'css',\n      'isActive',\n      'index',\n      'router',\n      'location'\n    );\n\n    return (\n      <StyledLi className={this.getClassName()} disabled={disabled}>\n        <RouterLink {...carriedProps} onlyActiveOnIndex={index} to={disabled ? '' : to}>\n          {children}\n        </RouterLink>\n      </StyledLi>\n    );\n  }\n}\n\nexport default withRouter(ListLink);\n\nconst StyledLi = styled('li', {\n  shouldForwardProp: prop => prop !== 'disabled',\n})<{disabled?: boolean}>`\n  ${p =>\n    p.disabled &&\n    `\n   a {\n    color:${p.theme.disabled} !important;\n    pointer-events: none;\n    :hover {\n      color: ${p.theme.disabled}  !important;\n    }\n   }\n`}\n`;\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'sentry/utils/replaceRouterParams';\nimport {RouteWithName} from 'sentry/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  routes: RouteWithName[];\n\n  location?: Location;\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import {cloneElement, isValidElement, useState} from 'react';\nimport type {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {joinTeam} from 'sentry/actionCreators/teams';\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport IdBadge from 'sentry/components/idBadge';\nimport ListLink from 'sentry/components/links/listLink';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport NavTabs from 'sentry/components/navTabs';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t, tct} from 'sentry/locale';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport useApi from 'sentry/utils/useApi';\nimport useTeams from 'sentry/utils/useTeams';\n\ntype Props = {\n  children: React.ReactNode;\n} & RouteComponentProps<{orgId: string; teamId: string}, {}>;\n\nfunction TeamDetails({children, ...props}: Props) {\n  const api = useApi();\n  const [requesting, setRequesting] = useState(false);\n  const {teams, initiallyLoaded} = useTeams({slugs: [props.params.teamId]});\n  const team = teams.find(({slug}) => slug === props.params.teamId);\n\n  function handleRequestAccess(teamSlug: string) {\n    setRequesting(true);\n\n    joinTeam(\n      api,\n      {\n        orgId: props.params.orgId,\n        teamId: teamSlug,\n      },\n      {\n        success: () => {\n          addSuccessMessage(\n            tct('You have requested access to [team]', {\n              team: `#${teamSlug}`,\n            })\n          );\n          setRequesting(false);\n        },\n        error: () => {\n          addErrorMessage(\n            tct('Unable to request access to [team]', {\n              team: `#${teamSlug}`,\n            })\n          );\n          setRequesting(false);\n        },\n      }\n    );\n  }\n\n  // `/organizations/${orgId}/teams/${teamId}`;\n  const routePrefix = recreateRoute('', {\n    routes: props.routes,\n    params: props.params,\n    stepBack: -1,\n  });\n\n  const navigationTabs = [\n    <ListLink key={0} to={`${routePrefix}members/`}>\n      {t('Members')}\n    </ListLink>,\n    <ListLink key={1} to={`${routePrefix}projects/`}>\n      {t('Projects')}\n    </ListLink>,\n    <ListLink key={2} to={`${routePrefix}notifications/`}>\n      {t('Notifications')}\n    </ListLink>,\n    <ListLink key={3} to={`${routePrefix}settings/`}>\n      {t('Settings')}\n    </ListLink>,\n  ];\n\n  if (!initiallyLoaded) {\n    return <LoadingIndicator />;\n  }\n\n  if (!team) {\n    return (\n      <Alert type=\"warning\">\n        <div>{t('You do not have access to this team.')}</div>\n      </Alert>\n    );\n  }\n\n  return (\n    <div>\n      <SentryDocumentTitle title={t('Team Details')} orgSlug={props.params.orgId} />\n      {team.hasAccess ? (\n        <div>\n          <h3>\n            <IdBadge hideAvatar team={team} avatarSize={36} />\n          </h3>\n\n          <NavTabs underlined>{navigationTabs}</NavTabs>\n\n          {isValidElement(children) ? cloneElement<any>(children, {team}) : null}\n        </div>\n      ) : (\n        <Alert type=\"warning\">\n          <RequestAccessWrapper>\n            {tct('You do not have access to the [teamSlug] team.', {\n              teamSlug: <strong>{`#${team.slug}`}</strong>,\n            })}\n            <Button\n              disabled={requesting || team.isPending}\n              size=\"sm\"\n              onClick={() => handleRequestAccess(team.slug)}\n            >\n              {team.isPending ? t('Request Pending') : t('Request Access')}\n            </Button>\n          </RequestAccessWrapper>\n        </Alert>\n      )}\n    </div>\n  );\n}\n\nexport default TeamDetails;\n\nconst RequestAccessWrapper = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n"],"names":["ListLink","Component","_classNames","className","activeClassName","this","props","isActive","classNames","to","query","index","router","queryData","qs","undefined","target","pathname","render","children","disabled","carriedProps","omit","StyledLi","getClassName","onlyActiveOnIndex","withRouter","shouldForwardProp","prop","p","theme","recreateRoute","options","routes","params","location","stepBack","paths","map","path","lastRootIndex","routeIndex","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","TeamDetails","api","useApi","requesting","setRequesting","useState","teams","initiallyLoaded","useTeams","slugs","teamId","team","find","slug","routePrefix","navigationTabs","t","title","orgSlug","orgId","hasAccess","hideAvatar","avatarSize","underlined","isValidElement","cloneElement","type","RequestAccessWrapper","tct","teamSlug","isPending","size","onClick","handleRequestAccess","joinTeam","success","addSuccessMessage","error","addErrorMessage"],"sourceRoot":""}