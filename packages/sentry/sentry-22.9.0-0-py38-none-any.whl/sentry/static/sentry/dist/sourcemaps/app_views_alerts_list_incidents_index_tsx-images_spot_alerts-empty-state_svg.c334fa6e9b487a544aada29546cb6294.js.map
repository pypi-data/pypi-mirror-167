{"version":3,"file":"chunks/app_views_alerts_list_incidents_index_tsx-images_spot_alerts-empty-state_svg.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/views/alerts/list/onboarding.tsx","webpack:///./app/views/alerts/list/incidents/row.tsx","webpack:///./app/views/alerts/list/incidents/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  children: React.ReactNode;\n  image: React.ReactNode;\n  className?: string;\n};\n\nfunction OnboardingPanel({className, image, children}: Props) {\n  return (\n    <Panel className={className}>\n      <Container>\n        <IlloBox>{image}</IlloBox>\n        <StyledBox>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')`\n  z-index: 1;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import styled from '@emotion/styled';\n\nimport emptyStateImg from 'sentry-images/spot/alerts-empty-state.svg';\n\nimport ButtonBar from 'sentry/components/buttonBar';\nimport OnboardingPanel from 'sentry/components/onboardingPanel';\nimport {t} from 'sentry/locale';\n\ntype Props = {\n  actions: React.ReactNode;\n};\n\nfunction Onboarding({actions}: Props) {\n  return (\n    <OnboardingPanel image={<AlertsImage src={emptyStateImg} />}>\n      <h3>{t('More signal, less noise')}</h3>\n      <p>\n        {t(\n          'Not every error is worth an email. Set your own rules for alerts you need, with information that helps.'\n        )}\n      </p>\n      <ButtonList gap={1}>{actions}</ButtonList>\n    </OnboardingPanel>\n  );\n}\n\nconst AlertsImage = styled('img')`\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    user-select: none;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 220px;\n    margin-top: auto;\n    margin-bottom: auto;\n    transform: translateX(-50%);\n    left: 50%;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    transform: translateX(-60%);\n    width: 280px;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    transform: translateX(-75%);\n    width: 320px;\n  }\n`;\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n\nexport default Onboarding;\n","import {Fragment, useMemo} from 'react';\nimport styled from '@emotion/styled';\nimport moment from 'moment';\n\nimport ActorAvatar from 'sentry/components/avatar/actorAvatar';\nimport Duration from 'sentry/components/duration';\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport IdBadge from 'sentry/components/idBadge';\nimport Link from 'sentry/components/links/link';\nimport Tag from 'sentry/components/tag';\nimport TimeSince from 'sentry/components/timeSince';\nimport {t} from 'sentry/locale';\nimport TeamStore from 'sentry/stores/teamStore';\nimport space from 'sentry/styles/space';\nimport {Actor, Organization, Project} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {Incident, IncidentStatus} from 'sentry/views/alerts/types';\nimport {alertDetailsLink} from 'sentry/views/alerts/utils';\n\ntype Props = {\n  incident: Incident;\n  organization: Organization;\n  projects: Project[];\n  projectsLoaded: boolean;\n};\n\nfunction AlertListRow({incident, projectsLoaded, projects, organization}: Props) {\n  const slug = incident.projects[0];\n  const started = moment(incident.dateStarted);\n  const duration = moment\n    .duration(moment(incident.dateClosed || new Date()).diff(started))\n    .as('seconds');\n\n  const project = useMemo(() => projects.find(p => p.slug === slug), [slug, projects]);\n\n  const alertLink = {\n    pathname: alertDetailsLink(organization, incident),\n    query: {alert: incident.identifier},\n  };\n  const ownerId = incident.alertRule.owner?.split(':')[1];\n  let teamName = '';\n  if (ownerId) {\n    teamName = TeamStore.getById(ownerId)?.name ?? '';\n  }\n  const teamActor = ownerId\n    ? {type: 'team' as Actor['type'], id: ownerId, name: teamName}\n    : null;\n\n  return (\n    <ErrorBoundary>\n      <Title data-test-id=\"alert-title\">\n        <Link to={alertLink}>{incident.title}</Link>\n      </Title>\n\n      <NoWrapNumeric>\n        {getDynamicText({\n          value: <TimeSince date={incident.dateStarted} extraShort />,\n          fixed: '1w ago',\n        })}\n      </NoWrapNumeric>\n      <NoWrapNumeric>\n        {incident.status === IncidentStatus.CLOSED ? (\n          <Duration seconds={getDynamicText({value: duration, fixed: 1200})} />\n        ) : (\n          <Tag type=\"warning\">{t('Still Active')}</Tag>\n        )}\n      </NoWrapNumeric>\n\n      <ProjectBadge avatarSize={18} project={!projectsLoaded ? {slug} : project} />\n      <NoWrapNumeric>#{incident.id}</NoWrapNumeric>\n\n      <FlexCenter>\n        {teamActor ? (\n          <Fragment>\n            <StyledActorAvatar actor={teamActor} size={24} hasTooltip={false} />{' '}\n            <TeamWrapper>{teamActor.name}</TeamWrapper>\n          </Fragment>\n        ) : (\n          '-'\n        )}\n      </FlexCenter>\n    </ErrorBoundary>\n  );\n}\n\nconst Title = styled('div')`\n  ${p => p.theme.overflowEllipsis}\n  min-width: 130px;\n`;\n\nconst NoWrapNumeric = styled('div')`\n  white-space: nowrap;\n  font-variant-numeric: tabular-nums;\n`;\n\nconst ProjectBadge = styled(IdBadge)`\n  flex-shrink: 0;\n`;\n\nconst FlexCenter = styled('div')`\n  ${p => p.theme.overflowEllipsis}\n  display: flex;\n  align-items: center;\n`;\n\nconst TeamWrapper = styled('span')`\n  ${p => p.theme.overflowEllipsis}\n`;\n\nconst StyledActorAvatar = styled(ActorAvatar)`\n  margin-right: ${space(1)};\n`;\n\nexport default AlertListRow;\n","import {Fragment, useEffect} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {promptsCheck, promptsUpdate} from 'sentry/actionCreators/prompts';\nimport Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Button from 'sentry/components/button';\nimport CreateAlertButton from 'sentry/components/createAlertButton';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport Pagination from 'sentry/components/pagination';\nimport {PanelTable} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport Projects from 'sentry/utils/projects';\n\nimport FilterBar from '../../filterBar';\nimport {Incident} from '../../types';\nimport {getQueryStatus, getTeamParams} from '../../utils';\nimport AlertHeader from '../header';\nimport Onboarding from '../onboarding';\n\nimport AlertListRow from './row';\n\nconst DOCS_URL =\n  'https://docs.sentry.io/workflow/alerts-notifications/alerts/?_ga=2.21848383.580096147.1592364314-1444595810.1582160976';\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  organization: Organization;\n};\n\ntype State = {\n  incidentList: Incident[];\n  /**\n   * User has not yet seen the 'alert_stream' welcome prompt for this\n   * organization.\n   */\n  firstVisitShown?: boolean;\n  /**\n   * Is there at least one alert rule configured for the currently selected\n   * projects?\n   */\n  hasAlertRule?: boolean;\n};\n\nclass IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state']> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {params, location} = this.props;\n    const {query} = location;\n    const status = getQueryStatus(query.status);\n\n    return [\n      [\n        'incidentList',\n        `/organizations/${params?.orgId}/incidents/`,\n        {\n          query: {\n            ...query,\n            status: status === 'all' ? undefined : status,\n            team: getTeamParams(query.team),\n            expand: ['original_alert_rule'],\n          },\n        },\n      ],\n    ];\n  }\n\n  /**\n   * If our incidentList is empty, determine if we've configured alert rules or\n   * if the user has seen the welcome prompt.\n   */\n  async onLoadAllEndpointsSuccess() {\n    const {incidentList} = this.state;\n\n    if (!incidentList || incidentList.length !== 0) {\n      this.setState({hasAlertRule: true, firstVisitShown: false});\n      return;\n    }\n\n    this.setState({loading: true});\n\n    // Check if they have rules or not, to know which empty state message to\n    // display\n    const {params, location, organization} = this.props;\n\n    const alertRules = await this.api.requestPromise(\n      `/organizations/${params?.orgId}/alert-rules/`,\n      {\n        method: 'GET',\n        query: location.query,\n      }\n    );\n    const hasAlertRule = alertRules.length > 0;\n\n    // We've already configured alert rules, no need to check if we should show\n    // the \"first time welcome\" prompt\n    if (hasAlertRule) {\n      this.setState({hasAlertRule, firstVisitShown: false, loading: false});\n      return;\n    }\n\n    // Check if they have already seen the prompt for the alert stream\n    const prompt = await promptsCheck(this.api, {\n      organizationId: organization.id,\n      feature: 'alert_stream',\n    });\n\n    const firstVisitShown = !prompt?.dismissedTime;\n\n    if (firstVisitShown) {\n      // Prompt has not been seen, mark the prompt as seen immediately so they\n      // don't see it again\n      promptsUpdate(this.api, {\n        feature: 'alert_stream',\n        organizationId: organization.id,\n        status: 'dismissed',\n      });\n    }\n\n    this.setState({hasAlertRule, firstVisitShown, loading: false});\n  }\n\n  get projectsFromIncidents() {\n    const {incidentList} = this.state;\n\n    return [...new Set(incidentList?.map(({projects}) => projects).flat())];\n  }\n\n  handleChangeSearch = (title: string) => {\n    const {router, location} = this.props;\n    const {cursor: _cursor, page: _page, ...currentQuery} = location.query;\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...currentQuery,\n        title,\n      },\n    });\n  };\n\n  handleChangeFilter = (activeFilters: string[]) => {\n    const {router, location} = this.props;\n    const {cursor: _cursor, page: _page, ...currentQuery} = location.query;\n\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...currentQuery,\n        // Preserve empty team query parameter\n        team: activeFilters.length > 0 ? activeFilters : '',\n      },\n    });\n  };\n\n  handleChangeStatus = (value: string): void => {\n    const {router, location} = this.props;\n    const {cursor: _cursor, page: _page, ...currentQuery} = location.query;\n\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...currentQuery,\n        status: value === 'all' ? undefined : value,\n      },\n    });\n  };\n\n  tryRenderOnboarding() {\n    const {firstVisitShown} = this.state;\n    const {organization} = this.props;\n\n    if (!firstVisitShown) {\n      return null;\n    }\n\n    const actions = (\n      <Fragment>\n        <Button size=\"sm\" external href={DOCS_URL}>\n          {t('View Features')}\n        </Button>\n        <CreateAlertButton\n          organization={organization}\n          iconProps={{size: 'xs'}}\n          size=\"sm\"\n          priority=\"primary\"\n          referrer=\"alert_stream\"\n        >\n          {t('Create Alert')}\n        </CreateAlertButton>\n      </Fragment>\n    );\n\n    return <Onboarding actions={actions} />;\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderList() {\n    const {loading, incidentList, incidentListPageLinks, hasAlertRule} = this.state;\n    const {\n      params: {orgId},\n      organization,\n    } = this.props;\n\n    const checkingForAlertRules =\n      incidentList?.length === 0 && hasAlertRule === undefined;\n    const showLoadingIndicator = loading || checkingForAlertRules;\n\n    return (\n      <Fragment>\n        {this.tryRenderOnboarding() ?? (\n          <StyledPanelTable\n            isLoading={showLoadingIndicator}\n            isEmpty={incidentList?.length === 0}\n            emptyMessage={t('No incidents exist for the current query.')}\n            emptyAction={\n              <EmptyStateAction>\n                {tct('Learn more about [link:Metric Alerts]', {\n                  link: <ExternalLink href={DOCS_URL} />,\n                })}\n              </EmptyStateAction>\n            }\n            headers={[\n              t('Alert Rule'),\n              t('Triggered'),\n              t('Duration'),\n              t('Project'),\n              t('Alert ID'),\n              t('Team'),\n            ]}\n          >\n            <Projects orgId={orgId} slugs={this.projectsFromIncidents}>\n              {({initiallyLoaded, projects}) =>\n                incidentList.map(incident => (\n                  <AlertListRow\n                    key={incident.id}\n                    projectsLoaded={initiallyLoaded}\n                    projects={projects as Project[]}\n                    incident={incident}\n                    organization={organization}\n                  />\n                ))\n              }\n            </Projects>\n          </StyledPanelTable>\n        )}\n        <Pagination pageLinks={incidentListPageLinks} />\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {params, router, location} = this.props;\n    const {orgId} = params;\n\n    return (\n      <SentryDocumentTitle title={t('Alerts')} orgSlug={orgId}>\n        <PageFiltersContainer>\n          <AlertHeader router={router} activeTab=\"stream\" />\n          <Layout.Body>\n            <Layout.Main fullWidth>\n              {!this.tryRenderOnboarding() && (\n                <Fragment>\n                  <StyledAlert showIcon>\n                    {t('This page only shows metric alerts.')}\n                  </StyledAlert>\n                  <FilterBar\n                    location={location}\n                    onChangeFilter={this.handleChangeFilter}\n                    onChangeSearch={this.handleChangeSearch}\n                    onChangeStatus={this.handleChangeStatus}\n                    hasStatusFilters\n                  />\n                </Fragment>\n              )}\n              {this.renderList()}\n            </Layout.Main>\n          </Layout.Body>\n        </PageFiltersContainer>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nfunction IncidentsListContainer(props: Props) {\n  useEffect(() => {\n    trackAdvancedAnalyticsEvent('alert_stream.viewed', {\n      organization: props.organization,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const renderDisabled = () => (\n    <Layout.Body>\n      <Layout.Main fullWidth>\n        <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n      </Layout.Main>\n    </Layout.Body>\n  );\n\n  return (\n    <Feature\n      features={['incidents']}\n      hookName=\"feature-disabled:alerts-page\"\n      renderDisabled={renderDisabled}\n    >\n      <IncidentsList {...props} />\n    </Feature>\n  );\n}\n\nconst StyledPanelTable = styled(PanelTable)`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst StyledAlert = styled(Alert)`\n  margin-bottom: ${space(1.5)};\n`;\n\nconst EmptyStateAction = styled('p')`\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nexport default IncidentsListContainer;\n"],"names":["OnboardingPanel","className","image","children","Container","IlloBox","StyledBox","space","p","theme","breakpoints","small","medium","Onboarding","actions","AlertsImage","src","emptyStateImg","t","ButtonList","gap","large","xlarge","ButtonBar","AlertListRow","incident","projectsLoaded","projects","organization","slug","started","moment","dateStarted","duration","dateClosed","Date","diff","as","project","useMemo","find","alertLink","pathname","alertDetailsLink","query","alert","identifier","ownerId","alertRule","owner","split","teamName","TeamStore","name","teamActor","type","id","Title","to","title","NoWrapNumeric","getDynamicText","value","date","extraShort","fixed","status","IncidentStatus","seconds","ProjectBadge","avatarSize","FlexCenter","Fragment","StyledActorAvatar","actor","size","hasTooltip","TeamWrapper","overflowEllipsis","IdBadge","ActorAvatar","DOCS_URL","IncidentsList","AsyncComponent","router","location","this","props","cursor","_cursor","page","_page","currentQuery","push","activeFilters","team","length","undefined","getEndpoints","params","getQueryStatus","orgId","getTeamParams","expand","incidentList","state","setState","hasAlertRule","firstVisitShown","loading","api","requestPromise","method","prompt","promptsCheck","organizationId","feature","dismissedTime","promptsUpdate","projectsFromIncidents","Set","map","flat","tryRenderOnboarding","external","href","iconProps","priority","referrer","renderLoading","renderBody","renderList","incidentListPageLinks","checkingForAlertRules","showLoadingIndicator","StyledPanelTable","isLoading","isEmpty","emptyMessage","emptyAction","EmptyStateAction","tct","link","headers","slugs","initiallyLoaded","pageLinks","orgSlug","activeTab","fullWidth","StyledAlert","showIcon","onChangeFilter","handleChangeFilter","onChangeSearch","handleChangeSearch","onChangeStatus","handleChangeStatus","hasStatusFilters","IncidentsListContainer","useEffect","trackAdvancedAnalyticsEvent","features","hookName","renderDisabled","PanelTable","fontSizeMedium","Alert","fontSizeLarge"],"sourceRoot":""}