{"version":3,"file":"chunks/app_views_performance_transactionSummary_transactionSpans_index_tsx-node_modules_lodash__base-bd10c8.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/gridEditable/sortLink.tsx","webpack:///./app/utils/discover/discoverQuery.tsx","webpack:///./app/utils/performance/suspectSpans/suspectSpansQuery.tsx","webpack:///./app/utils/performance/suspectSpans/spanOpsQuery.tsx","webpack:///./app/views/performance/transactionSummary/transactionSpans/opsFilter.tsx","webpack:///./app/views/performance/transactionSummary/transactionSpans/content.tsx","webpack:///./app/views/performance/transactionSummary/transactionSpans/index.tsx","webpack:///./app/views/performance/transactionSummary/transactionSpans/spanDetails/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionSpans/suspectSpansTable.tsx","webpack:///../node_modules/lodash/_baseExtremum.js","webpack:///../node_modules/lodash/_baseGt.js"],"sourcesContent":["import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {LocationDescriptorObject} from 'history';\nimport omit from 'lodash/omit';\n\nimport Link from 'sentry/components/links/link';\nimport {IconArrow} from 'sentry/icons';\n\nexport type Alignments = 'left' | 'right' | undefined;\nexport type Directions = 'desc' | 'asc' | undefined;\n\ntype Props = {\n  align: Alignments;\n  canSort: boolean;\n  direction: Directions;\n  generateSortLink: () => LocationDescriptorObject | undefined;\n  title: React.ReactNode;\n  onClick?: (e: React.MouseEvent<HTMLAnchorElement>) => void;\n  replace?: boolean;\n};\n\nfunction SortLink({\n  align,\n  title,\n  canSort,\n  generateSortLink,\n  onClick,\n  direction,\n  replace,\n}: Props) {\n  const target = generateSortLink();\n\n  if (!target || !canSort) {\n    return <StyledNonLink align={align}>{title}</StyledNonLink>;\n  }\n\n  const arrow = !direction ? null : (\n    <StyledIconArrow size=\"xs\" direction={direction === 'desc' ? 'down' : 'up'} />\n  );\n\n  const handleOnClick: React.MouseEventHandler<HTMLAnchorElement> = e => {\n    if (replace) {\n      e.preventDefault();\n      browserHistory.replace(target);\n    }\n    onClick?.(e);\n  };\n\n  return (\n    <StyledLink align={align} to={target} onClick={handleOnClick}>\n      {title} {arrow}\n    </StyledLink>\n  );\n}\n\ntype LinkProps = React.ComponentPropsWithoutRef<typeof Link>;\ntype StyledLinkProps = LinkProps & {align: Alignments};\n\nconst StyledLink = styled((props: StyledLinkProps) => {\n  const forwardProps = omit(props, ['align', 'css']);\n  return <Link {...forwardProps} />;\n})`\n  display: block;\n  width: 100%;\n  white-space: nowrap;\n  color: inherit;\n\n  &:hover,\n  &:active,\n  &:focus,\n  &:visited {\n    color: inherit;\n  }\n\n  ${(p: StyledLinkProps) => (p.align ? `text-align: ${p.align};` : '')}\n`;\n\nconst StyledNonLink = styled('div')<{align: Alignments}>`\n  display: block;\n  width: 100%;\n  white-space: nowrap;\n  ${(p: {align: Alignments}) => (p.align ? `text-align: ${p.align};` : '')}\n`;\n\nconst StyledIconArrow = styled(IconArrow)`\n  vertical-align: top;\n`;\n\nexport default SortLink;\n","import {EventsMetaType, MetaType} from 'sentry/utils/discover/eventView';\nimport withApi from 'sentry/utils/withApi';\nimport {TransactionThresholdMetric} from 'sentry/views/performance/transactionSummary/transactionThresholdModal';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from './genericDiscoverQuery';\n\n/**\n * An individual row in a DiscoverQuery result\n */\nexport type TableDataRow = {\n  [key: string]: React.ReactText;\n  id: string;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata.\n */\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata from the events endpoint.\n */\nexport type EventsTableData = {\n  data: Array<TableDataRow>;\n  meta?: EventsMetaType;\n};\n\nexport type TableDataWithTitle = TableData & {title: string};\n\ntype DiscoverQueryPropsWithThresholds = DiscoverQueryProps & {\n  transactionName?: string;\n  transactionThreshold?: number;\n  transactionThresholdMetric?: TransactionThresholdMetric;\n};\n\ntype DiscoverQueryComponentProps = DiscoverQueryPropsWithThresholds & {\n  children: (props: GenericChildrenProps<TableData>) => React.ReactNode;\n  useEvents?: boolean;\n};\n\nfunction shouldRefetchData(\n  prevProps: DiscoverQueryPropsWithThresholds,\n  nextProps: DiscoverQueryPropsWithThresholds\n) {\n  return (\n    prevProps.transactionName !== nextProps.transactionName ||\n    prevProps.transactionThreshold !== nextProps.transactionThreshold ||\n    prevProps.transactionThresholdMetric !== nextProps.transactionThresholdMetric\n  );\n}\n\nfunction DiscoverQuery(props: DiscoverQueryComponentProps) {\n  const endpoint = props.useEvents ? 'events' : 'eventsv2';\n  const afterFetch = props.useEvents\n    ? (data, _) => {\n        const {fields, ...otherMeta} = data.meta ?? {};\n        return {\n          ...data,\n          meta: {...fields, ...otherMeta},\n        };\n      }\n    : undefined;\n  return (\n    <GenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>\n      route={endpoint}\n      shouldRefetchData={shouldRefetchData}\n      afterFetch={afterFetch}\n      {...props}\n    />\n  );\n}\n\nexport default withApi(DiscoverQuery);\n","import omit from 'lodash/omit';\n\nimport {defined} from 'sentry/utils';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport withApi from 'sentry/utils/withApi';\n\nimport {SuspectSpans} from './types';\n\ntype SuspectSpansProps = {\n  maxExclusiveTime?: string;\n  minExclusiveTime?: string;\n  perSuspect?: number;\n  spanGroups?: string[];\n  spanOps?: string[];\n};\n\ntype RequestProps = DiscoverQueryProps & SuspectSpansProps;\n\nexport type ChildrenProps = Omit<GenericChildrenProps<SuspectSpansProps>, 'tableData'> & {\n  suspectSpans: SuspectSpans | null;\n};\n\ntype Props = RequestProps & {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction getSuspectSpanPayload(props: RequestProps) {\n  const {perSuspect, spanOps, spanGroups, minExclusiveTime, maxExclusiveTime} = props;\n  const payload = {\n    perSuspect,\n    spanOp: spanOps,\n    spanGroup: spanGroups,\n    min_exclusive_time: minExclusiveTime,\n    max_exclusive_time: maxExclusiveTime,\n  };\n  if (!defined(payload.perSuspect)) {\n    delete payload.perSuspect;\n  }\n  if (!defined(payload.spanOp)) {\n    delete payload.spanOp;\n  }\n  if (!defined(payload.spanGroup)) {\n    delete payload.spanGroup;\n  }\n  const additionalPayload = props.eventView.getEventsAPIPayload(props.location);\n  return {\n    ...payload,\n    ...additionalPayload,\n  };\n}\n\nfunction SuspectSpansQuery(props: Props) {\n  return (\n    <GenericDiscoverQuery<SuspectSpans, SuspectSpansProps>\n      route=\"events-spans-performance\"\n      getRequestPayload={getSuspectSpanPayload}\n      {...omit(props, 'children')}\n    >\n      {({tableData, ...rest}) => {\n        return props.children({suspectSpans: tableData, ...rest});\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n\nexport default withApi(SuspectSpansQuery);\n","import omit from 'lodash/omit';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport withApi from 'sentry/utils/withApi';\n\nimport {SpanOps} from './types';\n\ntype SpanOpsProps = {};\n\ntype RequestProps = DiscoverQueryProps & SpanOpsProps;\n\ntype ChildrenProps = Omit<GenericChildrenProps<SpanOpsProps>, 'tableData'> & {\n  spanOps: SpanOps | null;\n};\n\ntype Props = RequestProps & {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction SpanOpsQuery(props: Props) {\n  return (\n    <GenericDiscoverQuery<SpanOps, SpanOpsProps>\n      route=\"events-span-ops\"\n      limit={20}\n      {...omit(props, 'children')}\n    >\n      {({tableData, ...rest}) => {\n        return props.children({spanOps: tableData, ...rest});\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n\nexport default withApi(SpanOpsQuery);\n","import styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport CompactSelect from 'sentry/components/forms/compactSelect';\nimport {pickBarColor} from 'sentry/components/performance/waterfall/utils';\nimport {IconFilter, IconWarning} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport SpanOpsQuery from 'sentry/utils/performance/suspectSpans/spanOpsQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\n\ntype Props = {\n  eventView: EventView;\n  handleOpChange: (op: string | undefined) => void;\n  location: Location;\n  organization: Organization;\n  transactionName: string;\n};\n\nfunction getMenuOptions({spanOps, isLoading, error}) {\n  if (isLoading) {\n    return [{key: 'isLoading', disabled: true, label: t('Loading…')}];\n  }\n\n  if (error) {\n    return [\n      {\n        key: 'error',\n        disabled: true,\n        label: t('Error loading operations'),\n        leadingItems: <IconWarning color=\"subText\" />,\n      },\n    ];\n  }\n\n  return spanOps.map(spanOp => ({\n    value: spanOp.op,\n    label: spanOp.op,\n    leadingItems: <OperationDot backgroundColor={pickBarColor(spanOp.op)} />,\n  }));\n}\n\nexport default function OpsFilter(props: Props) {\n  const {location, eventView, organization, handleOpChange, transactionName} = props;\n\n  // clear out the query string from the event view\n  // as we want to restrict queries to the op names\n  const conditions = new MutableSearch('');\n  conditions\n    .setFilterValues('event.type', ['transaction'])\n    .setFilterValues('transaction', [transactionName]);\n  const opsFilterEventView = eventView.clone();\n  opsFilterEventView.query = conditions.formatString();\n\n  const currentOp = decodeScalar(location.query.spanOp);\n\n  return (\n    <SpanOpsQuery\n      location={location}\n      orgSlug={organization.slug}\n      eventView={opsFilterEventView}\n      cursor=\"0:0:1\"\n      noPagination\n    >\n      {results => (\n        <CompactSelect\n          isClearable\n          maxMenuWidth=\"24rem\"\n          menuTitle={t('Filter by operation')}\n          options={getMenuOptions(results)}\n          onChange={opt => handleOpChange(opt?.value)}\n          value={currentOp}\n          triggerLabel={currentOp ?? t('Filter')}\n          triggerProps={{icon: <IconFilter />}}\n        />\n      )}\n    </SpanOpsQuery>\n  );\n}\n\nconst OperationDot = styled('div')<{backgroundColor: string}>`\n  display: block;\n  width: ${space(1)};\n  height: ${space(1)};\n  border-radius: 100%;\n  background-color: ${p => p.backgroundColor};\n`;\n","import {Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport omit from 'lodash/omit';\n\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport SearchBar from 'sentry/components/events/searchBar';\nimport CompactSelect from 'sentry/components/forms/compactSelect';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport Pagination from 'sentry/components/pagination';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport DiscoverQuery from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport SuspectSpansQuery from 'sentry/utils/performance/suspectSpans/suspectSpansQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport useProjects from 'sentry/utils/useProjects';\n\nimport {SetStateAction} from '../types';\n\nimport OpsFilter from './opsFilter';\nimport SuspectSpansTable from './suspectSpansTable';\nimport {SpanSort, SpansTotalValues} from './types';\nimport {\n  getSuspectSpanSortFromEventView,\n  getTotalsView,\n  SPAN_RELATIVE_PERIODS,\n  SPAN_RETENTION_DAYS,\n  SPAN_SORT_OPTIONS,\n  SPAN_SORT_TO_FIELDS,\n} from './utils';\n\nconst ANALYTICS_VALUES = {\n  spanOp: (organization: Organization, value: string | undefined) =>\n    trackAdvancedAnalyticsEvent('performance_views.spans.change_op', {\n      organization,\n      operation_name: value,\n    }),\n  sort: (organization: Organization, value: string | undefined) =>\n    trackAdvancedAnalyticsEvent('performance_views.spans.change_sort', {\n      organization,\n      sort_column: value,\n    }),\n};\n\ntype Props = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projectId: string;\n  setError: SetStateAction<string | undefined>;\n  transactionName: string;\n};\n\nfunction SpansContent(props: Props) {\n  const {location, organization, eventView, projectId, transactionName} = props;\n  const query = decodeScalar(location.query.query, '');\n\n  function handleChange(key: string) {\n    return function (value: string | undefined) {\n      ANALYTICS_VALUES[key]?.(organization, value);\n\n      const queryParams = normalizeDateTimeParams({\n        ...(location.query || {}),\n        [key]: value,\n      });\n\n      // do not propagate pagination when making a new search\n      const toOmit = ['cursor'];\n      if (!defined(value)) {\n        toOmit.push(key);\n      }\n      const searchQueryParams = omit(queryParams, toOmit);\n\n      browserHistory.push({\n        ...location,\n        query: searchQueryParams,\n      });\n    };\n  }\n\n  const spanOp = decodeScalar(location.query.spanOp);\n  const spanGroup = decodeScalar(location.query.spanGroup);\n  const sort = getSuspectSpanSortFromEventView(eventView);\n  const spansView = getSpansEventView(eventView, sort.field);\n  const totalsView = getTotalsView(eventView);\n\n  const {projects} = useProjects();\n\n  return (\n    <Layout.Main fullWidth>\n      <FilterActions>\n        <OpsFilter\n          location={location}\n          eventView={eventView}\n          organization={organization}\n          handleOpChange={handleChange('spanOp')}\n          transactionName={transactionName}\n        />\n        <PageFilterBar condensed>\n          <EnvironmentPageFilter />\n          <DatePageFilter\n            alignDropdown=\"left\"\n            maxPickableDays={SPAN_RETENTION_DAYS}\n            relativeOptions={SPAN_RELATIVE_PERIODS}\n          />\n        </PageFilterBar>\n        <StyledSearchBar\n          organization={organization}\n          projectIds={eventView.project}\n          query={query}\n          fields={eventView.fields}\n          onSearch={handleChange('query')}\n        />\n        <CompactSelect\n          value={sort.field}\n          options={SPAN_SORT_OPTIONS.map(opt => ({value: opt.field, label: opt.label}))}\n          onChange={opt => handleChange('sort')(opt.value)}\n          triggerProps={{prefix: sort.prefix}}\n          triggerLabel={sort.label}\n        />\n      </FilterActions>\n      <DiscoverQuery\n        eventView={totalsView}\n        orgSlug={organization.slug}\n        location={location}\n        referrer=\"api.performance.transaction-spans\"\n        cursor=\"0:0:1\"\n        noPagination\n        useEvents\n      >\n        {({tableData}) => {\n          const totals: SpansTotalValues | null =\n            (tableData?.data?.[0] as SpansTotalValues | undefined) ?? null;\n          return (\n            <SuspectSpansQuery\n              location={location}\n              orgSlug={organization.slug}\n              eventView={spansView}\n              limit={10}\n              perSuspect={0}\n              spanOps={defined(spanOp) ? [spanOp] : []}\n              spanGroups={defined(spanGroup) ? [spanGroup] : []}\n            >\n              {({suspectSpans, isLoading, pageLinks}) => (\n                <Fragment>\n                  <SuspectSpansTable\n                    location={location}\n                    organization={organization}\n                    transactionName={transactionName}\n                    project={projects.find(p => p.id === projectId)}\n                    isLoading={isLoading}\n                    suspectSpans={suspectSpans ?? []}\n                    totals={totals}\n                    sort={sort.field}\n                  />\n                  <Pagination pageLinks={pageLinks ?? null} />\n                </Fragment>\n              )}\n            </SuspectSpansQuery>\n          );\n        }}\n      </DiscoverQuery>\n    </Layout.Main>\n  );\n}\n\nfunction getSpansEventView(eventView: EventView, sort: SpanSort): EventView {\n  eventView = eventView.clone();\n  const fields = SPAN_SORT_TO_FIELDS[sort];\n  eventView.fields = fields ? fields.map(field => ({field})) : [];\n  return eventView;\n}\n\nconst FilterActions = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(3, min-content);\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    grid-template-columns: auto auto 1fr auto;\n  }\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    order: 1;\n    grid-column: 1/5;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    order: initial;\n    grid-column: auto;\n  }\n`;\n\nexport default SpansContent;\n","import {Location} from 'history';\n\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport PageLayout from '../pageLayout';\nimport Tab from '../tabs';\n\nimport SpansContent from './content';\nimport {generateSpansEventView} from './utils';\n\ntype Props = {\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n};\n\nfunction TransactionSpans(props: Props) {\n  const {location, organization, projects} = props;\n\n  return (\n    <PageLayout\n      location={location}\n      organization={organization}\n      projects={projects}\n      tab={Tab.Spans}\n      getDocumentTitle={getDocumentTitle}\n      generateEventView={generateSpansEventView}\n      childComponent={SpansContent}\n    />\n  );\n}\n\nfunction getDocumentTitle(transactionName: string): string {\n  const hasTransactionName =\n    typeof transactionName === 'string' && String(transactionName).trim().length > 0;\n\n  if (hasTransactionName) {\n    return [String(transactionName).trim(), t('Performance')].join(' - ');\n  }\n\n  return [t('Summary'), t('Performance')].join(' - ');\n}\n\nexport default withProjects(withOrganization(TransactionSpans));\n","import {Query} from 'history';\n\nimport {SpanSlug} from 'sentry/utils/performance/suspectSpans/types';\n\nexport function generateSpanDetailsRoute({\n  orgSlug,\n  spanSlug,\n}: {\n  orgSlug: string;\n  spanSlug: SpanSlug;\n}): string {\n  const spanComponent = `${encodeURIComponent(spanSlug.op)}:${spanSlug.group}`;\n  return `/organizations/${orgSlug}/performance/summary/spans/${spanComponent}/`;\n}\n\nexport function spanDetailsRouteWithQuery({\n  orgSlug,\n  transaction,\n  query,\n  spanSlug,\n  projectID,\n}: {\n  orgSlug: string;\n  query: Query;\n  spanSlug: SpanSlug;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = generateSpanDetailsRoute({\n    orgSlug,\n    spanSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nexport enum ZoomKeys {\n  MIN = 'min',\n  MAX = 'max',\n}\n","import {ReactNode} from 'react';\nimport {Location} from 'history';\n\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumnOrder,\n} from 'sentry/components/gridEditable';\nimport SortLink from 'sentry/components/gridEditable/sortLink';\nimport Link from 'sentry/components/links/link';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {getFieldRenderer} from 'sentry/utils/discover/fieldRenderers';\nimport {ColumnType, fieldAlignment} from 'sentry/utils/discover/fields';\nimport {Container as TableCellContainer} from 'sentry/utils/discover/styles';\nimport {SuspectSpans} from 'sentry/utils/performance/suspectSpans/types';\n\nimport {spanDetailsRouteWithQuery} from './spanDetails/utils';\nimport {SpanSort, SpanSortOthers, SpanSortPercentiles, SpansTotalValues} from './types';\n\ntype Props = {\n  isLoading: boolean;\n  location: Location;\n  organization: Organization;\n  sort: SpanSort;\n  suspectSpans: SuspectSpans;\n  totals: SpansTotalValues | null;\n  transactionName: string;\n  project?: Project;\n};\n\nexport default function SuspectSpansTable(props: Props) {\n  const {\n    location,\n    organization,\n    transactionName,\n    isLoading,\n    suspectSpans,\n    totals,\n    sort,\n    project,\n  } = props;\n\n  const data: TableDataRowWithExtras[] = suspectSpans.map(suspectSpan => ({\n    operation: suspectSpan.op,\n    group: suspectSpan.group,\n    description: suspectSpan.description,\n    totalCount: suspectSpan.count,\n    frequency:\n      // Frequency is computed using the `uniq` function in ClickHouse.\n      // Because it is an approximation, it can occasionally exceed the number of events.\n      defined(suspectSpan.frequency) && defined(totals?.['count()'])\n        ? Math.min(1, suspectSpan.frequency / totals!['count()'])\n        : null,\n    avgOccurrences: suspectSpan.avgOccurrences,\n    p50ExclusiveTime: suspectSpan.p50ExclusiveTime,\n    p75ExclusiveTime: suspectSpan.p75ExclusiveTime,\n    p95ExclusiveTime: suspectSpan.p95ExclusiveTime,\n    p99ExclusiveTime: suspectSpan.p99ExclusiveTime,\n    sumExclusiveTime: suspectSpan.sumExclusiveTime,\n  }));\n\n  return (\n    <GridEditable\n      isLoading={isLoading}\n      data={data}\n      columnOrder={COLUMN_ORDER[sort].map(column => COLUMNS[column])}\n      columnSortBy={[]}\n      grid={{\n        renderHeadCell,\n        renderBodyCell: renderBodyCellWithMeta(\n          location,\n          organization,\n          transactionName,\n          project\n        ),\n      }}\n      location={location}\n    />\n  );\n}\n\nfunction renderHeadCell(column: TableColumn, _index: number): ReactNode {\n  const align = fieldAlignment(column.key, COLUMN_TYPE[column.key]);\n  return (\n    <SortLink\n      title={column.name}\n      align={align}\n      direction={undefined}\n      canSort={false}\n      generateSortLink={() => undefined}\n    />\n  );\n}\n\nfunction renderBodyCellWithMeta(\n  location: Location,\n  organization: Organization,\n  transactionName: string,\n  project?: Project\n) {\n  return (column: TableColumn, dataRow: TableDataRowWithExtras): React.ReactNode => {\n    const fieldRenderer = getFieldRenderer(column.key, COLUMN_TYPE);\n\n    if (column.key === 'description') {\n      const target = spanDetailsRouteWithQuery({\n        orgSlug: organization.slug,\n        transaction: transactionName,\n        query: location.query,\n        spanSlug: {op: dataRow.operation, group: dataRow.group},\n        projectID: project?.id,\n      });\n      return (\n        <TableCellContainer>\n          <Link to={target}>{dataRow[column.key] ?? t('(unnamed span)')}</Link>\n        </TableCellContainer>\n      );\n    }\n\n    return fieldRenderer(dataRow, {location, organization});\n  };\n}\n\ntype TableColumnKey =\n  | 'operation'\n  | 'description'\n  | 'totalCount'\n  | 'frequency'\n  | 'avgOccurrences'\n  | 'p50ExclusiveTime'\n  | 'p75ExclusiveTime'\n  | 'p95ExclusiveTime'\n  | 'p99ExclusiveTime'\n  | 'sumExclusiveTime';\n\ntype TableColumn = GridColumnOrder<TableColumnKey>;\n\ntype TableDataRow = Record<TableColumnKey, any>;\n\ntype TableDataRowWithExtras = TableDataRow & {\n  group: string;\n};\n\nconst COLUMN_ORDER: Record<SpanSort, TableColumnKey[]> = {\n  [SpanSortOthers.COUNT]: [\n    'operation',\n    'description',\n    'totalCount',\n    'frequency',\n    'p75ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n  [SpanSortOthers.AVG_OCCURRENCE]: [\n    'operation',\n    'description',\n    'avgOccurrences',\n    'frequency',\n    'p75ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n  [SpanSortOthers.SUM_EXCLUSIVE_TIME]: [\n    'operation',\n    'description',\n    'totalCount',\n    'frequency',\n    'p75ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n  [SpanSortPercentiles.P50_EXCLUSIVE_TIME]: [\n    'operation',\n    'description',\n    'totalCount',\n    'frequency',\n    'p50ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n  [SpanSortPercentiles.P75_EXCLUSIVE_TIME]: [\n    'operation',\n    'description',\n    'totalCount',\n    'frequency',\n    'p75ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n  [SpanSortPercentiles.P95_EXCLUSIVE_TIME]: [\n    'operation',\n    'description',\n    'totalCount',\n    'frequency',\n    'p95ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n  [SpanSortPercentiles.P99_EXCLUSIVE_TIME]: [\n    'operation',\n    'description',\n    'totalCount',\n    'frequency',\n    'p99ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n};\n\nconst COLUMNS: Record<TableColumnKey, TableColumn> = {\n  operation: {\n    key: 'operation',\n    name: t('Span Operation'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  description: {\n    key: 'description',\n    name: t('Span Name'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  totalCount: {\n    key: 'totalCount',\n    name: t('Total Count'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  frequency: {\n    key: 'frequency',\n    name: t('Frequency'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  avgOccurrences: {\n    key: 'avgOccurrences',\n    name: t('Average Occurrences'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p50ExclusiveTime: {\n    key: 'p50ExclusiveTime',\n    name: t('P50 Self Time'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p75ExclusiveTime: {\n    key: 'p75ExclusiveTime',\n    name: t('P75 Self Time'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p95ExclusiveTime: {\n    key: 'p95ExclusiveTime',\n    name: t('P95 Self Time'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p99ExclusiveTime: {\n    key: 'p99ExclusiveTime',\n    name: t('P99 Self Time'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  sumExclusiveTime: {\n    key: 'sumExclusiveTime',\n    name: t('Total Self Time'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n};\n\nconst COLUMN_TYPE: Record<TableColumnKey, ColumnType> = {\n  operation: 'string',\n  description: 'string',\n  totalCount: 'integer',\n  frequency: 'percentage',\n  avgOccurrences: 'number',\n  p50ExclusiveTime: 'duration',\n  p75ExclusiveTime: 'duration',\n  p95ExclusiveTime: 'duration',\n  p99ExclusiveTime: 'duration',\n  sumExclusiveTime: 'duration',\n};\n","var isSymbol = require('./isSymbol');\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseExtremum;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nmodule.exports = baseGt;\n"],"names":["SortLink","align","title","canSort","generateSortLink","onClick","direction","replace","target","StyledNonLink","arrow","StyledIconArrow","size","StyledLink","to","e","preventDefault","browserHistory","props","forwardProps","omit","p","IconArrow","shouldRefetchData","prevProps","nextProps","transactionName","transactionThreshold","transactionThresholdMetric","DiscoverQuery","endpoint","useEvents","afterFetch","data","_","fields","otherMeta","meta","undefined","route","withApi","getSuspectSpanPayload","perSuspect","spanOps","spanGroups","minExclusiveTime","maxExclusiveTime","payload","spanOp","spanGroup","min_exclusive_time","max_exclusive_time","defined","additionalPayload","eventView","getEventsAPIPayload","location","SuspectSpansQuery","getRequestPayload","tableData","rest","children","suspectSpans","SpanOpsQuery","limit","getMenuOptions","isLoading","error","key","disabled","label","t","leadingItems","color","map","value","op","OperationDot","backgroundColor","pickBarColor","OpsFilter","organization","handleOpChange","conditions","MutableSearch","setFilterValues","opsFilterEventView","clone","query","formatString","currentOp","decodeScalar","orgSlug","slug","cursor","noPagination","results","isClearable","maxMenuWidth","menuTitle","options","onChange","opt","triggerLabel","triggerProps","icon","space","ANALYTICS_VALUES","trackAdvancedAnalyticsEvent","operation_name","sort","sort_column","SpansContent","projectId","handleChange","queryParams","normalizeDateTimeParams","toOmit","push","searchQueryParams","getSuspectSpanSortFromEventView","spansView","SPAN_SORT_TO_FIELDS","field","getSpansEventView","totalsView","getTotalsView","projects","useProjects","fullWidth","FilterActions","condensed","alignDropdown","maxPickableDays","SPAN_RETENTION_DAYS","relativeOptions","SPAN_RELATIVE_PERIODS","StyledSearchBar","projectIds","project","onSearch","SPAN_SORT_OPTIONS","prefix","referrer","totals","pageLinks","Fragment","find","id","theme","breakpoints","small","xlarge","SearchBar","TransactionSpans","tab","Tab","getDocumentTitle","generateEventView","generateSpansEventView","childComponent","String","trim","length","join","withProjects","withOrganization","spanDetailsRouteWithQuery","transaction","spanSlug","projectID","pathname","encodeURIComponent","group","generateSpanDetailsRoute","environment","statsPeriod","start","end","ZoomKeys","SuspectSpansTable","suspectSpan","operation","description","totalCount","count","frequency","Math","min","avgOccurrences","p50ExclusiveTime","p75ExclusiveTime","p95ExclusiveTime","p99ExclusiveTime","sumExclusiveTime","columnOrder","COLUMN_ORDER","column","COLUMNS","columnSortBy","grid","renderHeadCell","renderBodyCell","renderBodyCellWithMeta","_index","fieldAlignment","COLUMN_TYPE","name","dataRow","fieldRenderer","getFieldRenderer","SpanSortOthers","SpanSortPercentiles","width","COL_WIDTH_UNDEFINED","isSymbol","module","exports","array","iteratee","comparator","index","current","computed","result","other"],"sourceRoot":""}