{"version":3,"file":"chunks/app_views_integrationOrganizationLink_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/narrowLayout.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/integrationOrganizationLink.tsx","webpack:///./app/views/organizationIntegrations/addIntegration.tsx"],"sourcesContent":["import {useEffect} from 'react';\nimport styled from '@emotion/styled';\n\nimport {logout} from 'sentry/actionCreators/account';\nimport {IconSentry} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport useApi from 'sentry/utils/useApi';\n\ntype Props = {\n  children: React.ReactNode;\n  maxWidth?: string;\n  showLogout?: boolean;\n};\n\nfunction NarrowLayout({maxWidth, showLogout, children}: Props) {\n  const api = useApi();\n\n  useEffect(() => {\n    document.body.classList.add('narrow');\n\n    return () => document.body.classList.remove('narrow');\n  }, []);\n\n  async function handleLogout() {\n    await logout(api);\n    window.location.assign('/auth/login');\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"pattern-bg\" />\n      <div className=\"container\" style={{maxWidth}}>\n        <div className=\"box box-modal\">\n          <div className=\"box-header\">\n            <a href=\"/\">\n              <IconSentry size=\"lg\" />\n            </a>\n            {showLogout && (\n              <a className=\"logout pull-right\" onClick={handleLogout}>\n                <Logout>{t('Sign out')}</Logout>\n              </a>\n            )}\n          </div>\n          <div className=\"box-content with-padding\">{children}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst Logout = styled('span')`\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nexport default NarrowLayout;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport {components} from 'react-select';\nimport styled from '@emotion/styled';\nimport {urlEncode} from '@sentry/utils';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport Field from 'sentry/components/forms/field';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport IdBadge from 'sentry/components/idBadge';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport NarrowLayout from 'sentry/components/narrowLayout';\nimport {t, tct} from 'sentry/locale';\nimport {Integration, IntegrationProvider, Organization} from 'sentry/types';\nimport {IntegrationAnalyticsKey} from 'sentry/utils/analytics/integrations';\nimport {\n  getIntegrationFeatureGate,\n  trackIntegrationAnalytics,\n} from 'sentry/utils/integrationUtil';\nimport {singleLineRenderer} from 'sentry/utils/marked';\nimport AsyncView from 'sentry/views/asyncView';\nimport AddIntegration from 'sentry/views/organizationIntegrations/addIntegration';\n\n// installationId present for Github flow\ntype Props = RouteComponentProps<{integrationSlug: string; installationId?: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  organization?: Organization;\n  provider?: IntegrationProvider;\n  selectedOrgSlug?: string;\n};\n\nexport default class IntegrationOrganizationLink extends AsyncView<Props, State> {\n  disableErrorReport = false;\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['organizations', '/organizations/']];\n  }\n\n  getTitle() {\n    return t('Choose Installation Organization');\n  }\n\n  trackIntegrationAnalytics = (\n    eventName: IntegrationAnalyticsKey,\n    startSession?: boolean\n  ) => {\n    const {organization, provider} = this.state;\n    // should have these set but need to make TS happy\n    if (!organization || !provider) {\n      return;\n    }\n\n    trackIntegrationAnalytics(\n      eventName,\n      {\n        integration_type: 'first_party',\n        integration: provider.key,\n        // We actually don't know if it's installed but neither does the user in the view and multiple installs is possible\n        already_installed: false,\n        view: 'external_install',\n        organization,\n      },\n      {startSession: !!startSession}\n    );\n  };\n\n  trackOpened() {\n    this.trackIntegrationAnalytics('integrations.integration_viewed', true);\n  }\n\n  trackInstallationStart() {\n    this.trackIntegrationAnalytics('integrations.installation_start');\n  }\n\n  get integrationSlug() {\n    return this.props.params.integrationSlug;\n  }\n\n  get queryParams() {\n    return this.props.location.query;\n  }\n\n  getOrgBySlug = (orgSlug: string): Organization | undefined => {\n    return this.state.organizations.find((org: Organization) => org.slug === orgSlug);\n  };\n\n  onLoadAllEndpointsSuccess() {\n    // auto select the org if there is only one\n    const {organizations} = this.state;\n    if (organizations.length === 1) {\n      this.onSelectOrg({value: organizations[0].slug});\n    }\n  }\n\n  onSelectOrg = async ({value: orgSlug}: {value: string}) => {\n    this.setState({selectedOrgSlug: orgSlug, reloading: true, organization: undefined});\n\n    try {\n      const [organization, {providers}]: [\n        Organization,\n        {providers: IntegrationProvider[]}\n      ] = await Promise.all([\n        this.api.requestPromise(`/organizations/${orgSlug}/`),\n        this.api.requestPromise(\n          `/organizations/${orgSlug}/config/integrations/?provider_key=${this.integrationSlug}`\n        ),\n      ]);\n      // should never happen with a valid provider\n      if (providers.length === 0) {\n        throw new Error('Invalid provider');\n      }\n      this.setState(\n        {organization, reloading: false, provider: providers[0]},\n        this.trackOpened\n      );\n    } catch (_err) {\n      addErrorMessage(t('Failed to retrieve organization or integration details'));\n      this.setState({reloading: false});\n    }\n  };\n\n  hasAccess = () => {\n    const {organization} = this.state;\n    return organization?.access.includes('org:integrations');\n  };\n\n  // used with Github to redirect to the the integration detail\n  onInstallWithInstallationId = (data: Integration) => {\n    const {organization} = this.state;\n    const orgId = organization && organization.slug;\n    this.props.router.push(\n      `/settings/${orgId}/integrations/${data.provider.key}/${data.id}/`\n    );\n  };\n\n  // non-Github redirects to the extension view where the backend will finish the installation\n  finishInstallation = () => {\n    // add the selected org to the query parameters and then redirect back to configure\n    const {selectedOrgSlug} = this.state;\n    const query = {orgSlug: selectedOrgSlug, ...this.queryParams};\n    this.trackInstallationStart();\n    window.location.assign(\n      `/extensions/${this.integrationSlug}/configure/?${urlEncode(query)}`\n    );\n  };\n\n  renderAddButton() {\n    const {installationId} = this.props.params;\n    const {organization, provider} = this.state;\n    // should never happen but we need this check for TS\n    if (!provider || !organization) {\n      return null;\n    }\n    const {features} = provider.metadata;\n\n    // Prepare the features list\n    const featuresComponents = features.map(f => ({\n      featureGate: f.featureGate,\n      description: (\n        <FeatureListItem\n          dangerouslySetInnerHTML={{__html: singleLineRenderer(f.description)}}\n        />\n      ),\n    }));\n\n    const {IntegrationFeatures} = getIntegrationFeatureGate();\n\n    // Github uses a different installation flow with the installationId as a parameter\n    // We have to wrap our installation button with AddIntegration so we can get the\n    // addIntegrationWithInstallationId callback.\n    // if we don't hve an installationId, we need to use the finishInstallation callback.\n    return (\n      <IntegrationFeatures organization={organization} features={featuresComponents}>\n        {({disabled}) => (\n          <AddIntegration\n            provider={provider}\n            onInstall={this.onInstallWithInstallationId}\n            organization={organization}\n          >\n            {addIntegrationWithInstallationId => (\n              <ButtonWrapper>\n                <Button\n                  priority=\"primary\"\n                  disabled={!this.hasAccess() || disabled}\n                  onClick={() =>\n                    installationId\n                      ? addIntegrationWithInstallationId({\n                          installation_id: installationId,\n                        })\n                      : this.finishInstallation()\n                  }\n                >\n                  {t('Install %s', provider.name)}\n                </Button>\n              </ButtonWrapper>\n            )}\n          </AddIntegration>\n        )}\n      </IntegrationFeatures>\n    );\n  }\n\n  customOption = orgProps => {\n    const organization = this.getOrgBySlug(orgProps.value);\n    if (!organization) {\n      return null;\n    }\n    return (\n      <components.Option {...orgProps}>\n        <IdBadge\n          organization={organization}\n          avatarSize={20}\n          displayName={organization.name}\n          avatarProps={{consistentWidth: true}}\n        />\n      </components.Option>\n    );\n  };\n\n  customValueContainer = containerProps => {\n    const valueList = containerProps.getValue();\n    // if no value set, we want to return the default component that is rendered\n    if (valueList.length === 0) {\n      return <components.ValueContainer {...containerProps} />;\n    }\n    const orgSlug = valueList[0].value;\n    const organization = this.getOrgBySlug(orgSlug);\n    if (!organization) {\n      return <components.ValueContainer {...containerProps} />;\n    }\n    return (\n      <components.ValueContainer {...containerProps}>\n        <IdBadge\n          organization={organization}\n          avatarSize={20}\n          displayName={organization.name}\n          avatarProps={{consistentWidth: true}}\n        />\n      </components.ValueContainer>\n    );\n  };\n\n  renderBottom() {\n    const {organization, selectedOrgSlug, provider, reloading} = this.state;\n    const {FeatureList} = getIntegrationFeatureGate();\n    if (reloading) {\n      return <LoadingIndicator />;\n    }\n\n    return (\n      <Fragment>\n        {selectedOrgSlug && organization && !this.hasAccess() && (\n          <Alert type=\"error\" showIcon>\n            <p>\n              {tct(\n                `You do not have permission to install integrations in\n                [organization]. Ask an organization owner or manager to\n                visit this page to finish installing this integration.`,\n                {organization: <strong>{organization.slug}</strong>}\n              )}\n            </p>\n            <InstallLink>{window.location.href}</InstallLink>\n          </Alert>\n        )}\n\n        {provider && organization && this.hasAccess() && FeatureList && (\n          <Fragment>\n            <p>\n              {tct(\n                'The following features will be available for [organization] when installed.',\n                {organization: <strong>{organization.slug}</strong>}\n              )}\n            </p>\n            <FeatureList\n              organization={organization}\n              features={provider.metadata.features}\n              provider={provider}\n            />\n          </Fragment>\n        )}\n\n        <div className=\"form-actions\">{this.renderAddButton()}</div>\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {selectedOrgSlug} = this.state;\n    const options = this.state.organizations.map((org: Organization) => ({\n      value: org.slug,\n      label: org.name,\n    }));\n\n    return (\n      <NarrowLayout>\n        <h3>{t('Finish integration installation')}</h3>\n        <p>\n          {tct(\n            `Please pick a specific [organization:organization] to link with\n            your integration installation of [integation].`,\n            {\n              organization: <strong />,\n              integation: <strong>{this.integrationSlug}</strong>,\n            }\n          )}\n        </p>\n\n        <Field label={t('Organization')} inline={false} stacked required>\n          <SelectControl\n            onChange={this.onSelectOrg}\n            value={selectedOrgSlug}\n            placeholder={t('Select an organization')}\n            options={options}\n            components={{\n              Option: this.customOption,\n              ValueContainer: this.customValueContainer,\n            }}\n          />\n        </Field>\n        {this.renderBottom()}\n      </NarrowLayout>\n    );\n  }\n}\n\nconst InstallLink = styled('pre')`\n  margin-bottom: 0;\n  background: #fbe3e1;\n`;\n\nconst FeatureListItem = styled('span')`\n  line-height: 24px;\n`;\n\nconst ButtonWrapper = styled('div')`\n  margin-left: auto;\n  align-self: center;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","import {Component} from 'react';\nimport * as qs from 'query-string';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {t} from 'sentry/locale';\nimport {IntegrationProvider, IntegrationWithConfig, Organization} from 'sentry/types';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\n\ntype Props = {\n  children: (\n    openDialog: (urlParams?: {[key: string]: string}) => void\n  ) => React.ReactNode;\n  onInstall: (data: IntegrationWithConfig) => void;\n  organization: Organization;\n  provider: IntegrationProvider;\n  account?: string; // for analytics\n  analyticsParams?: {\n    already_installed: boolean;\n    view:\n      | 'integrations_directory_integration_detail'\n      | 'integrations_directory'\n      | 'onboarding'\n      | 'project_creation';\n  };\n  modalParams?: {[key: string]: string};\n};\n\nexport default class AddIntegration extends Component<Props> {\n  componentDidMount() {\n    window.addEventListener('message', this.didReceiveMessage);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('message', this.didReceiveMessage);\n    this.dialog?.close();\n  }\n\n  dialog: Window | null = null;\n\n  computeCenteredWindow(width: number, height: number) {\n    // Taken from: https://stackoverflow.com/questions/4068373/center-a-popup-window-on-screen\n    const screenLeft =\n      window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n\n    const screenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n    const innerWidth = window.innerWidth\n      ? window.innerWidth\n      : document.documentElement.clientWidth\n      ? document.documentElement.clientWidth\n      : screen.width;\n\n    const innerHeight = window.innerHeight\n      ? window.innerHeight\n      : document.documentElement.clientHeight\n      ? document.documentElement.clientHeight\n      : screen.height;\n\n    const left = innerWidth / 2 - width / 2 + screenLeft;\n    const top = innerHeight / 2 - height / 2 + screenTop;\n\n    return {left, top};\n  }\n\n  openDialog = (urlParams?: {[key: string]: string}) => {\n    const {account, analyticsParams, modalParams, organization, provider} = this.props;\n\n    trackIntegrationAnalytics('integrations.installation_start', {\n      integration: provider.key,\n      integration_type: 'first_party',\n      organization,\n      ...analyticsParams,\n    });\n    const name = 'sentryAddIntegration';\n    const {url, width, height} = provider.setupDialog;\n    const {left, top} = this.computeCenteredWindow(width, height);\n\n    let query: {[key: string]: string} = {...urlParams};\n\n    if (account) {\n      query.account = account;\n    }\n\n    if (modalParams) {\n      query = {...query, ...modalParams};\n    }\n\n    const installUrl = `${url}?${qs.stringify(query)}`;\n    const opts = `scrollbars=yes,width=${width},height=${height},top=${top},left=${left}`;\n\n    this.dialog = window.open(installUrl, name, opts);\n    this.dialog && this.dialog.focus();\n  };\n\n  didReceiveMessage = (message: MessageEvent) => {\n    const {analyticsParams, onInstall, organization, provider} = this.props;\n\n    if (message.origin !== document.location.origin) {\n      return;\n    }\n\n    if (message.source !== this.dialog) {\n      return;\n    }\n\n    const {success, data} = message.data;\n    this.dialog = null;\n\n    if (!success) {\n      addErrorMessage(data.error);\n      return;\n    }\n\n    if (!data) {\n      return;\n    }\n    trackIntegrationAnalytics('integrations.installation_complete', {\n      integration: provider.key,\n      integration_type: 'first_party',\n      organization,\n      ...analyticsParams,\n    });\n    addSuccessMessage(t('%s added', provider.name));\n    onInstall(data);\n  };\n\n  render() {\n    const {children} = this.props;\n\n    return children(this.openDialog);\n  }\n}\n"],"names":["NarrowLayout","maxWidth","showLogout","children","api","useApi","useEffect","document","body","classList","add","remove","className","style","href","size","onClick","async","logout","window","location","assign","Logout","t","p","theme","fontSizeLarge","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","IntegrationOrganizationLink","eventName","startSession","organization","provider","state","trackIntegrationAnalytics","integration_type","integration","key","already_installed","view","orgSlug","organizations","find","org","slug","value","setState","selectedOrgSlug","reloading","undefined","providers","Promise","all","requestPromise","integrationSlug","length","Error","trackOpened","_err","addErrorMessage","access","includes","data","orgId","props","router","push","id","query","queryParams","trackInstallationStart","urlEncode","orgProps","getOrgBySlug","avatarSize","displayName","name","avatarProps","consistentWidth","containerProps","valueList","getValue","getEndpoints","params","onLoadAllEndpointsSuccess","onSelectOrg","renderAddButton","installationId","features","metadata","featuresComponents","map","f","featureGate","description","FeatureListItem","dangerouslySetInnerHTML","__html","singleLineRenderer","IntegrationFeatures","getIntegrationFeatureGate","disabled","onInstall","onInstallWithInstallationId","addIntegrationWithInstallationId","ButtonWrapper","priority","hasAccess","installation_id","finishInstallation","renderBottom","FeatureList","Fragment","type","showIcon","tct","InstallLink","renderBody","options","label","integation","inline","stacked","required","onChange","placeholder","components","Option","customOption","ValueContainer","customValueContainer","AddIntegration","Component","urlParams","account","analyticsParams","modalParams","url","width","height","setupDialog","left","top","computeCenteredWindow","installUrl","qs","opts","dialog","open","focus","message","origin","source","success","addSuccessMessage","error","componentDidMount","addEventListener","didReceiveMessage","componentWillUnmount","removeEventListener","close","screenLeft","screenX","screenTop","screenY","innerWidth","documentElement","clientWidth","screen","innerHeight","clientHeight","openDialog"],"sourceRoot":""}