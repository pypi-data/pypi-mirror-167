[
    {
        "find": "[://]",
        "replace": "://"
    },
    {
        "find": "( *[\\[\\]\\(\\)\\{\\}\\\\]{1} *)[\\.\\,]([\\[\\]\\(\\)\\{\\}]{1} *)",
        "replace": ".",
        "regex": true,
        "comment": "Fang a period or comma preceeded and postceded by parenthesis or square brackets."
    },
    {
        "find": "( *[\\[\\]\\(\\)\\{\\}]{1} *):( *[\\[\\]\\(\\)\\{\\}]{1} *)",
        "replace": ":",
        "regex": true,
        "comment": "Fang a colon preceeded and postceded by parenthesis or square brackets."
    },
    {
        "find": "( *[\\[\\]\\(\\)\\{\\}]* *)DOT( *[\\[\\]\\(\\)\\{\\}]* *)",
        "replace": ".",
        "regex": true,
        "case_sensitive": true
    },
    {
        "find": "( *[\\[\\]\\(\\)\\{\\}-]+ *)(?:dot|punto|punkt)( *[\\[\\]\\(\\)\\{\\}-]* *)",
        "replace": ".",
        "regex": true
    },
    {
        "find": "( *[\\[\\]\\(\\)\\{\\}-]* *)(?:dot|punto|punkt)( *[\\[\\]\\(\\)\\{\\}-]+ *)",
        "replace": ".",
        "regex": true
    },
    {
        "find": "([\\[\\]\\(\\)\\{\\}]{1} *)www( *[\\[\\]\\(\\)\\{\\}]{1} *)",
        "replace": "www",
        "regex": true
    },
    {
        "find": "( *[\\[\\]\\(\\{\\}]+ *)(?:@|(?:at)|(?:et)|(?:arroba))( *[\\]\\(\\)\\{\\}]* *)",
        "replace": "@",
        "regex": true,
        "case_sensitive": true
    },
    {
        "find": "( *[\\[\\]\\(\\)\\{\\}]* *)(?:@|(?:at)|(?:et)|(?:arroba))( *[\\]\\(\\)\\{\\}]+ *)",
        "replace": "@",
        "regex": true,
        "case_sensitive": true
    },
    {
        "find": " +@ +",
        "replace": "@",
        "regex": true,
        "case_sensitive": true
    },
    {
        "find": "( *[\\[\\]\\(\\)\\{\\}]+ *)(?:(?:AT)|(?:ET)|(?:ARROBA))( *[\\[\\]\\(\\)\\{\\}]* *)",
        "replace": "@",
        "regex": true,
        "case_sensitive": true,
        "comment": "Fang 'AT', 'ET', or 'ARROBA' preceded by a parenthesis/square brackets and possibly postceded by the same."
    },
    {
        "find": "( *[\\[\\]\\(\\)\\{\\}]* *)(?:(?:AT)|(?:ET)|(?:ARROBA))( *[\\[\\]\\(\\)\\{\\}]+ *)",
        "replace": "@",
        "regex": true,
        "case_sensitive": true,
        "comment": "Fang 'AT', 'ET', or 'ARROBA' postceded by a parenthesis/square brackets and possibly preceded by the same."
    },
    {
        "find": "([a-z]) *(?:AT|ET|ARROBA) *([a-z])",
        "replace": "\\1@\\2",
        "regex": true,
        "case_sensitive": true,
        "comment": "Fang 'AT', 'ET', or 'ARROBA' preceded by a lower-cased character (and possibly spaces)."
    },
    {
        "find": "(?:[\\[\\(]+ ?)htt(ps?)(?: ?[\\[\\]\\(\\)]* ?)",
        "replace": "htt\\1",
        "regex": true
    },
    {
        "find": "(?:[\\[\\]\\(\\)]* ?)htt(ps?)(?: ?[\\[\\]\\(\\)]+ ?)",
        "replace": "htt\\1",
        "regex": true
    },
    {
        "find": ":\\/\\/\\/+",
        "replace": "://",
        "regex": true
    },
    {
        "find": ":\\/\\/ *",
        "replace": "://",
        "regex": true
    },
    {
        "find": ": +\\/\\/",
        "replace": "://",
        "regex": true
    },
    {
        "find": "(https?) *:",
        "replace": "\\1:",
        "regex": true
    },
    {
        "find": "h[xA-Z]{2}(ps?[^.])",
        "replace": "htt\\1",
        "regex": true,
        "comment": "The [^.] bit at the end of this regex makes sure that we are only replacing h\\S\\Sps? that are followed by something other than a period (so as not to change part of a domain name (see the `test_odd_hXXp_replacement` function in `test_ioc_fanger.py`))",
        "case_sensitive": true
    },
    {
        "find": "htt(ps?)\\/",
        "replace": "htt\\1:/",
        "regex": true
    },
    {
        "find": "(https?:\\/\\/) *",
        "replace": "\\1",
        "regex": true
    },
    {
        "find": "\\bx{4}:\/\/",
        "replace": "http://",
        "regex": true
    },
    {
        "find": "\\b(?:x{5}|x{4}s):\/\/",
        "replace": "https://",
        "regex": true
    },
    {
        "find": "[-]",
        "replace": "-"
    },
    {
        "find": "(?:^|(?<=\\s))([0-9]{1,3}),([0-9]{1,3}),([0-9]{1,3}),([0-9]{1,3})(?=\\s|$)",
        "replace": "\\1.\\2.\\3.\\4",
        "regex": true
    },
    {
        "find": "\\.",
        "replace": "."
    },
    {
        "find": "\\/",
        "replace": "/"
    },
    {
        "find": "^.",
        "replace": "."
    },
    {
        "find": "<.>",
        "replace": "."
    }
]
