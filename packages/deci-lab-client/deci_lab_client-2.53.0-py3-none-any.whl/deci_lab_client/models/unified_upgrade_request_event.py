# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from deci_lab_client.configuration import Configuration


class UnifiedUpgradeRequestEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'autonac': 'ModelSpecifier',
        'decinet': 'ModelSpecifier',
        'runtime_optimizations': 'bool',
        'freetext': 'str'
    }

    attribute_map = {
        'autonac': 'autonac',
        'decinet': 'decinet',
        'runtime_optimizations': 'runtimeOptimizations',
        'freetext': 'freetext'
    }

    def __init__(self, autonac=None, decinet=None, runtime_optimizations=None, freetext=None, local_vars_configuration=None):  # noqa: E501
        """UnifiedUpgradeRequestEvent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._autonac = None
        self._decinet = None
        self._runtime_optimizations = None
        self._freetext = None
        self.discriminator = None

        self.autonac = autonac
        self.decinet = decinet
        if runtime_optimizations is not None:
            self.runtime_optimizations = runtime_optimizations
        if freetext is not None:
            self.freetext = freetext

    @property
    def autonac(self):
        """Gets the autonac of this UnifiedUpgradeRequestEvent.  # noqa: E501


        :return: The autonac of this UnifiedUpgradeRequestEvent.  # noqa: E501
        :rtype: ModelSpecifier
        """
        return self._autonac

    @autonac.setter
    def autonac(self, autonac):
        """Sets the autonac of this UnifiedUpgradeRequestEvent.


        :param autonac: The autonac of this UnifiedUpgradeRequestEvent.  # noqa: E501
        :type: ModelSpecifier
        """
        if self.local_vars_configuration.client_side_validation and autonac is None:  # noqa: E501
            raise ValueError("Invalid value for `autonac`, must not be `None`")  # noqa: E501

        self._autonac = autonac

    @property
    def decinet(self):
        """Gets the decinet of this UnifiedUpgradeRequestEvent.  # noqa: E501


        :return: The decinet of this UnifiedUpgradeRequestEvent.  # noqa: E501
        :rtype: ModelSpecifier
        """
        return self._decinet

    @decinet.setter
    def decinet(self, decinet):
        """Sets the decinet of this UnifiedUpgradeRequestEvent.


        :param decinet: The decinet of this UnifiedUpgradeRequestEvent.  # noqa: E501
        :type: ModelSpecifier
        """
        if self.local_vars_configuration.client_side_validation and decinet is None:  # noqa: E501
            raise ValueError("Invalid value for `decinet`, must not be `None`")  # noqa: E501

        self._decinet = decinet

    @property
    def runtime_optimizations(self):
        """Gets the runtime_optimizations of this UnifiedUpgradeRequestEvent.  # noqa: E501


        :return: The runtime_optimizations of this UnifiedUpgradeRequestEvent.  # noqa: E501
        :rtype: bool
        """
        return self._runtime_optimizations

    @runtime_optimizations.setter
    def runtime_optimizations(self, runtime_optimizations):
        """Sets the runtime_optimizations of this UnifiedUpgradeRequestEvent.


        :param runtime_optimizations: The runtime_optimizations of this UnifiedUpgradeRequestEvent.  # noqa: E501
        :type: bool
        """

        self._runtime_optimizations = runtime_optimizations

    @property
    def freetext(self):
        """Gets the freetext of this UnifiedUpgradeRequestEvent.  # noqa: E501


        :return: The freetext of this UnifiedUpgradeRequestEvent.  # noqa: E501
        :rtype: str
        """
        return self._freetext

    @freetext.setter
    def freetext(self, freetext):
        """Sets the freetext of this UnifiedUpgradeRequestEvent.


        :param freetext: The freetext of this UnifiedUpgradeRequestEvent.  # noqa: E501
        :type: str
        """

        self._freetext = freetext

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UnifiedUpgradeRequestEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UnifiedUpgradeRequestEvent):
            return True

        return self.to_dict() != other.to_dict()
