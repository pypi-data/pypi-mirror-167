syntax = "proto3";

package koapy.backend.kiwoom_open_api_plus.grpc;

service KiwoomOpenApiPlusService {

  // 1. rpcs for general function calls

  rpc Call (CallRequest) returns (CallResponse) {
    // unary rpc for an arbitrary function call,
    // can invoke arbitrary function on the server side by giving its name and arguments,
    // currently only simple data types like str and int are supported for arguments and return values
  };

  // 2. rpcs for listening and handling events

  rpc Listen (ListenRequest) returns (stream ListenResponse) {
    // server streaming rpc usually for listening events,
    // server will simply send stream items to client whenever event that is being listened is triggered,
    // client can handle those events solely on its own on client side but there is no guarantee that it will be synced with the server,
    // which means that event handler on the server side will not wait for the client to finish handling each event
  };
  rpc BidirectionalListen (stream BidirectionalListenRequest) returns (stream ListenResponse) {
    // bidirectional streaming rpc usually for listening and handling events with proper callbacks,
    // server will send an stream item to client whenever an event is triggered and will wait for an client's ack,
    // so that following callbacks from the client can actually be processed inside the server's event handler context
  };

  // 3. rpcs for simple use cases that can be categorized into serveral distinct usage patterns

  rpc LoginCall (LoginRequest) returns (stream ListenResponse) {
    // server streaming rpc for login/connect scenario,
    // would invoke CommConnect() and wait for OnEventConnect() event to test its success
  };
  rpc TransactionCall (TransactionRequest) returns (stream ListenResponse) {
    // server streaming rpc for general transaction requests,
    // would invoke CommRqData() with several SetInputValue()s for a transaction request,
    // would wait for OnReceiveTrData() events,
    // would handle those events to gather results by invoking GetRepeatCnt() and GetCommData() inside,
    // might do additional CommRqData() and SetInputValue() inside event handler for possible consecutive lookups
  };
  rpc OrderCall (OrderRequest) returns (stream ListenResponse) {
    // server streaming rpc for making orders (buy/sell + update/cancel),
    // would invoke SendOrder() for submitting an order,
    // would wait for OnReceiveTrData() and OnReceiveChejanData() events to track its progress
  };
  rpc RealCall (RealRequest) returns (stream ListenResponse) {
    // server streaming rpc for listening realtime data events,
    // certain transaction requests would also register some realtime data to be sent,
    // but usually would just call SetRealReg() to register desired realtime data to listen explicitly,
    // and would call SetRealRemove() to unregister them after done using,
    // would wait for OnReceiveRealData() events
  };
  rpc LoadConditionCall (LoadConditionRequest) returns (stream ListenResponse) {
    // server streaming rpc for loading condition settings for conditioned search,
    // would call GetConditionLoad() and wait for OnReceiveConditionVer() event to test its success
  };
  rpc ConditionCall (ConditionRequest) returns (stream ListenResponse) {
    // server streaming rpc for conditioned search (serching stocks with serveral conditions),
    // would call SendCondition() and wait for OnReceiveTrCondition() or OnReceiveRealCondition() based on its requested type
  };

  // 4. rpcs for more complex use cases based on the previously categorized simple cases above

  rpc BidirectionalRealCall(stream BidirectionalRealRequest) returns (stream ListenResponse) {
    // bidirectional streaming rpc for listening realtime data events,
    // with capability of managing observation pool (what stocks, what fields to listen to) online,
    // those management requests would be sent over the client streaming line,
    // and ordinary realtime data events would be sent over the server streaming line
  };
  rpc OrderListen (ListenRequest) returns (stream ListenResponse) {
    // server streaming rpc for just listening order events (without submiting any order request compared to the simple case),
    // this is one-sided streaming rpc (server streaming rpc) like Listen() rpc,
    // so server would just send stream items with no consideration on coordination with its client
  };

  // 5. rpcs for customized usage scenario (when there is no proper predefined interface to utilize)

  rpc CustomListen (ListenRequest) returns (stream ListenResponse) {
    // pretty much similar to server streaming Listen() rpc,
    // but event handler would be instantiated dynamically based on the code given through the request
  };
  rpc CustomCallAndListen (CallAndListenRequest) returns (stream CallAndListenResponse) {
    // pretty much similar to server streaming XXXCall() rpcs (or even Call() rpc),
    // but event handler would be instantiated dynamically based on the code given through the request
  };

  // 6. rpcs for other mics scenarios

  rpc SetLogLevel (SetLogLevelRequest) returns (SetLogLevelResponse) {
    // would update log level of process that this grpc server lives
  };

}


message Argument {
  oneof value {
    string string_value = 1;
    int64 long_value = 2;
    bool bool_value = 3;
  }
}

message CallRequest {
  string name = 1;
  repeated Argument arguments = 2;
}

message ReturnValue {
  oneof value {
    string string_value = 1;
    int64 long_value = 2;
    bool bool_value = 3;
  }
}

message CallResponse {
  ReturnValue return_value = 1;
}


message ListenRequest {
  string id = 1;
  repeated string slots = 2;
  string code = 3;
  string class_name = 4;
}


message HandledRequest {
  float time = 1;
}

message StopListenRequest {
  float time = 1;
}

message BidirectionalListenRequest {
  oneof request {
    ListenRequest listen_request = 1;
    HandledRequest handled_request = 2;
    StopListenRequest stop_listen_request = 3;
  }
}


message SingleData {
  repeated string names = 1;
  repeated string values = 2;
}

message RepeatedString {
  repeated string values = 1;
}

message MultiData {
  repeated string names = 1;
  repeated RepeatedString values = 2;
}


message ListenResponse {
  string name = 1;
  repeated Argument arguments = 2;
  SingleData single_data = 3;
  MultiData multi_data = 4;
}


message CallAndListenRequest {
  CallRequest call_request = 1;
  ListenRequest listen_request = 2;
}

message CallAndListenResponse {
  oneof response {
    CallResponse call_response = 1;
    ListenResponse listen_response = 2;
  }
}


message LoginCredentials {
  string user_id = 1;
  string user_password = 2;
  string cert_password = 3;
  bool is_simulation = 4;
  map<string, string> account_passwords = 5;
}

message LoginRequest {
  LoginCredentials credentials = 1;
}


message RealRequestFlags {
  bool infer_fids = 1;
  bool readable_names = 2;
  bool fast_parse = 3;
}

message RealRequest {
  repeated string screen_no = 1;
  repeated string code_list = 2;
  repeated int32 fid_list = 3;
  string opt_type = 4;
  RealRequestFlags flags = 5;
}


enum TransactionStopConditionCompartor {
  LESS_THAN_OR_EQUAL_TO = 0;
  LESS_THAN = 1;
  GREATER_THAN_OR_EQUAL_TO = 2;
  GREATER_THAN = 3;
  EQUAL_TO = 4;
  NOT_EQUAL_TO = 5;
}

message TransactionStopCondition {
  string name = 1;
  string value = 2;
  TransactionStopConditionCompartor comparator = 3;
}

message TransactionRequest {
  string request_name = 1;
  string transaction_code = 2;
  string screen_no = 3;
  map<string, string> inputs = 4;
  TransactionStopCondition stop_condition = 5;
  RealRequestFlags flags = 6;
}


message OrderSubscriptionTarget {
  bool RET = 1;
  bool TR = 2;
  bool REAL = 3;
  bool MSG = 4;
  bool CHEJAN = 5;
}

message OrderRequest {
  string request_name = 1;
  string screen_no = 2;
  string account_no = 3;
  int64 order_type = 4;
  string code = 5;
  int64 quantity = 6;
  int64 price = 7;
  string quote_type = 8;
  string original_order_no = 9;
  OrderSubscriptionTarget target = 10;
}


message LoadConditionRequest {
}

message ConditionRequestFlags {
  bool with_info = 1;
  bool is_future_option = 2;
}

message ConditionRequest {
  string screen_no = 1;
  string condition_name = 2;
  int32 condition_index = 3;
  int32 search_type = 4;
  string request_name = 5;
  ConditionRequestFlags flags = 6;
}


message SetLogLevelRequest {
  int32 level = 1;
  string logger = 2;
}

message SetLogLevelResponse {
}


message BidirectionalRealInitializeRequest {
  repeated int32 fid_list = 1;
  RealRequestFlags flags = 2;
}

message BidirectionalRealRegisterRequest {
  repeated string code_list = 1;
  repeated int32 fid_list = 2;
}

message BidirectionalRealRemoveRequest {
  repeated string code_list = 1;
}

message BidirectionalRealStopRequest {
}

message BidirectionalRealRequest {
  oneof request {
    BidirectionalRealInitializeRequest initialize_request = 1;
    BidirectionalRealRegisterRequest register_request = 2;
    BidirectionalRealRemoveRequest remove_request = 3;
    BidirectionalRealStopRequest stop_request = 4;
  }
}
