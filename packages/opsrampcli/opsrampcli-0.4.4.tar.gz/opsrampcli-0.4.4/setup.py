# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['opsrampcli']

package_data = \
{'': ['*']}

install_requires = \
['DateTime>=4.4,<5.0',
 'PyYAML>=6.0,<7.0',
 'XlsxWriter>=3.0.3,<4.0.0',
 'json5>=0.9.8,<0.10.0',
 'pandas>=1.4.3,<2.0.0',
 'requests>=2.28.0,<3.0.0']

entry_points = \
{'console_scripts': ['opcli = opsrampcli.opsrampcli:main']}

setup_kwargs = {
    'name': 'opsrampcli',
    'version': '0.4.4',
    'description': '',
    'long_description': 'OpsRamp Command Line Interface\n==============================\n\nThis is a utility script that allows easy searching and manipulation of\nvarious OpsRamp items and configurations. Before trying out any of the\ncommands, you\'ll first need to `set up an environments\nfile <#credentials>`__ to contain the credentials you need to use.\n\nAvailable Commands\n------------------\n\nThe available commands are:\n\n+----------------------------------+----------------------------------+\n| opcli Command                    | Description                      |\n+==================================+==================================+\n| `getalerts <#getalerts>`__       | Search for and take action on    |\n|                                  | alerts                           |\n+----------------------------------+----------------------------------+\n| `postalerts <#postalerts>`__     | Post alerts to a Webhook         |\n|                                  | integration (using vtoken) or    |\n|                                  | directly to the API (using OAuth |\n|                                  | creds)                           |\n+----------------------------------+----------------------------------+\n| `getincidents <#getincidents>`__ | Search and take action on        |\n|                                  | Incidents                        |\n+----------------------------------+----------------------------------+\n| `getresources <#getresources>`__ | Search for and take action on    |\n|                                  | resources/devices                |\n+----------------------------------+----------------------------------+\n| `exportser                       | Export one or more full Service  |\n| vicemaps <#exportservicemaps>`__ | Map definitions to a file which  |\n|                                  | can be manipulated and           |\n|                                  | re-imported                      |\n+----------------------------------+----------------------------------+\n| `importser                       | Import (and optionally transform |\n| vicemaps <#importservicemaps>`__ | while doing so) from a Service   |\n|                                  | Map export file                  |\n+----------------------------------+----------------------------------+\n| `clonese                         | Copy an existing Service Map,    |\n| rvicemaps <#cloneservicemaps>`__ | with                             |\n|                                  | transformations/replacements     |\n|                                  | (useful when you have a template |\n|                                  | Service Map to re-use)           |\n+----------------------------------+----------------------------------+\n| `trans                           | Apply regex replacements to an   |\n| formsvcmap <#transformsvcmap>`__ | exported Service Map and create  |\n|                                  | a new transformed export file    |\n|                                  | with the changes                 |\n+----------------------------------+----------------------------------+\n| `get                             | Get Service Map definitions      |\n| servicemaps <#getservicemaps>`__ |                                  |\n+----------------------------------+----------------------------------+\n| `getchilds                       | Get child Service Groups of a    |\n| vcgroups <#getchildsvcgroups>`__ | parent Service                   |\n+----------------------------------+----------------------------------+\n| `getse                           | Get the full definition of a     |\n| rvicegroup <#getservicegroup>`__ | Service Group                    |\n+----------------------------------+----------------------------------+\n| `exportcusta                     | Generate an Excel or csv file    |\n| ttrfile <#exportcustattrfile>`__ | from existing custom attribute   |\n|                                  | values                           |\n+----------------------------------+----------------------------------+\n| `importcusta                     | Import an Excel file containing  |\n| ttrfile <#importcustattrfile>`__ | custom attribute values          |\n+----------------------------------+----------------------------------+\n| `get                             | Get custom attribute definitions |\n| customattrs <#getcustomattrs>`__ |                                  |\n+----------------------------------+----------------------------------+\n| `getdi                           | Get discovery profile definition |\n| scoprofile <#getdiscoprofile>`__ |                                  |\n+----------------------------------+----------------------------------+\n| `getalertesc <#getalertesc>`__   | Search and get Escalation Policy |\n|                                  | definitions                      |\n+----------------------------------+----------------------------------+\n| `migra                           | Migrate/copy Escalation Policies |\n| tealertesc <#migratealertesc>`__ | within same tenant or from one   |\n|                                  | tenant to another                |\n+----------------------------------+----------------------------------+\n\n\xa0 \xa0\n\nFor more detailed help on a specific command use the -h option with the\ncommand, for example to get help on the cloneservicemaps command:\n\n.. code:: shell\n\n   % opcli cloneservicemaps -h\n   usage: opcli cloneservicemaps [-h] --env ENV [--secure SECURE] [--envfile ENVFILE] --name NAME --replace REGEX REPLACEWITH [--parentlink] [--clobber]\n\n   optional arguments:\n     -h, --help            show this help message and exit\n     --env ENV             Name of environment to use, as defined in your environments.yml file (default: None)\n     --secure SECURE       Whether or not to verify SSL cert (default: True)\n     --envfile ENVFILE     Location of environments YAML file (default: environments.yml)\n     --name NAME           Name of Service Map to transform and clone (default: None)\n     --replace REGEX REPLACEWITH\n                           Transforming regex pattern and replacement string (option can be repeated) (default: None)\n     --parentlink          If root Service has a link to a parent, link the imported Service Map (default: False)\n     --clobber             Overwrite Service Map (i.e. with same name) if it already exists (default: False)\n\nCredentials\n-----------\n\nBy default, opcli requires an *environments.yml* file to be located in\nthe directory where you running it. Optionally you can specify an\nexplicit environments file path & name using the --envfile option. The\nfile must follow the following format, where the name is the value you\nwill specify to the --env option to define the URL and credentials you\nwill use:\n\n.. code:: yaml\n\n   - name: example1\n     url:  https://customer2name.api.opsramp.com\n     partner: msp_nnnnn\n     tenant: client_nnnnn\n     client_id: abcdefg1234567\n     client_secret: abcdefg1234567\n     vtoken: abcdefg1234567\n\n   - name: example2\n     url:  https://customer2name.api.opsramp.com\n     partner: msp_nnnnn\n     tenant: client_nnnnn\n     client_id: abcdefg1234567\n     client_secret: abcdefg1234567\n     vtoken: abcdefg1234567\n\nNote that you only need to provide the attributes needed for the kind of\nAPI calls you are making. Therefore:\n\n-  If you are making an API call that does not require a partner id\n   (which is not needed in most cases) you do not need to provide a\n   *partner* value.\n-  If you are not doing webhook alert posts, you would not need to\n   specify the *vtoken* value.\n-  If you are doing only webhook alert posts then you would not need\n   *client_id* and *client_secret*.\n-  If you are using the environment for a bunch of different scenarios,\n   there is no harm in having the extra values there for the cases where\n   they are not needed.\n\n\xa0 \xa0\n\nCommands\n========\n\ngetalerts\n---------\n\nSearch for and take action on alerts\n\n.. code:: shell\n\n   usage: opcli getalerts [-h] --env ENV [--secure SECURE] [--envfile ENVFILE] --query QUERY [--brief] [--descr] [--count] [--filter FILTER] [--action ACTION] [--heal]\n\n   optional arguments:\n     -h, --help         show this help message and exit\n     --env ENV          Name of environment to use, as defined in your environments.yml file (default: None)\n     --secure SECURE    Whether or not to verify SSL cert (default: True)\n     --envfile ENVFILE  Location of environments YAML file (default: environments.yml)\n     --query QUERY      Query String to filter alerts as per https://develop.opsramp.com/resource-management/tenants-tenantid-resources-search (default: None)\n     --brief            Include only key fields in output (default: False)\n     --descr            Include the description field in results (runs *much* slower as it requires a separate api call per alert) (default: False)\n     --count            Only show the count of matching alerts (default: False)\n     --filter FILTER    Post-query filter on alerts. Python expression that will evaluate to True or False such as alert["resource"]["name"].startswith("prod") (default: None)\n     --action ACTION    Perform an action on matching alerts (Heal, acknowledge, suppress, close, unsuppress, unAcknowledge) (default: None)\n     --heal             Heal the matching alerts (i.e. send a matching Ok) (default: False)\n\nAlert search criteria\n~~~~~~~~~~~~~~~~~~~~~\n\nAlert search --query option uses the syntax documented\n`here <https://web.archive.org/web/20211024221749/https://docs.opsramp.com/api/alerts/tenants-tenantid-alerts-search/>`__\n\n*Note: Above link is to an Internet Archive capture of an old doc page,\nas the latest doc no longer lists query variables*\n\nExamples\n~~~~~~~~\n\nSearch for all alerts with matching resource/device numeric id and\nmetric\n\n::\n\n   % opcli getalerts --env myenvname --query \'resourceIds:9798408+metrics:testmetric\' --brief\n\nSearch for all alerts last updated during given time range, and heal &\nclose them\n\n::\n\n   % opcli getalerts --env myenvname --query \'startDate:2000-01-01T00:00:00 0000+endDate:2020-12-01T00:00:00 0000+alertTimeBase:updated+states:Critical,Warning,Info\' --heal --action close\n\npostalerts\n----------\n\nPost alerts to a Webhook integration (using vtoken) or directly to the\nAPI (using OAuth creds)\n\n.. code:: shell\n\n   usage: opcli postalerts [-h] --env ENV [--secure SECURE] [--envfile ENVFILE] --infile INFILE [--range RANGE] [--auth AUTH]\n\n   optional arguments:\n     -h, --help         show this help message and exit\n     --env ENV          Name of environment to use, as defined in your environments.yml file (default: None)\n     --secure SECURE    Whether or not to verify SSL cert (default: True)\n     --envfile ENVFILE  Location of environments YAML file (default: environments.yml)\n     --infile INFILE    File containing an array of json alert payloads (default: None)\n     --range RANGE      An integer or range identifying which alert in the file to send (default: all)\n     --auth AUTH        Authentication method: vtoken or oauth (default: vtoken)\n\nExample\n~~~~~~~\n\nPost alert #5 from the specified json file (expected to contain an array\nof alerts), using vtoken authentication\n\n::\n\n   % opcli postalerts --env myenvname --infile myalertsamples.json --auth vtoken --range 5\n\ngetincidents\n------------\n\nSearch and take action on Incidents\n\n.. code:: shell\n\n   usage: opcli getincidents [-h] --env ENV [--secure SECURE] [--envfile ENVFILE] --query QUERY [--brief] [--count] [--filter FILTER] [--resolve]\n\n   optional arguments:\n     -h, --help         show this help message and exit\n     --env ENV          Name of environment to use, as defined in your environments.yml file (default: None)\n     --secure SECURE    Whether or not to verify SSL cert (default: True)\n     --envfile ENVFILE  Location of environments YAML file (default: environments.yml)\n     --query QUERY      Query String to filter incidents (default: None)\n     --brief            Include only key fields in output (default: False)\n     --count            Only show the count of matching incidents (default: False)\n     --filter FILTER    Post-query filter on incidents. Python expression that will evaluate to True or False such as incident["resource"]["name"].startswith("prod") (default: None)\n     --resolve          Resolve the matching incidents (default: False)\n\ngetresources\n------------\n\nSearch for and take action on resources/devices\n\n.. code:: shell\n\n   usage: opcli getresources [-h] --env ENV [--secure SECURE] [--envfile ENVFILE] [--query QUERY] [--search SEARCH] [--count] [--delete] [--manage] [--filter FILTER]\n\n   optional arguments:\n     -h, --help         show this help message and exit\n     --env ENV          Name of environment to use, as defined in your environments.yml file (default: None)\n     --secure SECURE    Whether or not to verify SSL cert (default: True)\n     --envfile ENVFILE  Location of environments YAML file (default: environments.yml)\n     --query QUERY      Query String to filter resources as per https://develop.opsramp.com/resource-management/tenants-tenantid-resources-search (default: None)\n     --search SEARCH    Search String to filter resources as it would be entered under Resources -> Search (default: None)\n     --count            Only show the count of matching resources (default: False)\n     --delete           Delete the matching resources (default: False)\n     --manage           Manage the matching resources (default: False)\n     --filter FILTER    Post-query filter on resources. Python expression that will evaluate to True or False such as alert["resource"]["name"].startswith("prod") (default: None)\n\nexportservicemaps\n-----------------\n\nExport one or more full Service Map definitions to a file which can be\nmanipulated and re-imported\\|\n\n.. code:: shell\n\n   usage: opcli exportservicemaps [-h] --env ENV [--secure SECURE] [--envfile ENVFILE] [--name NAME] [--outdir OUTDIR] [--clobber] [--timestamp]\n\n   optional arguments:\n     -h, --help         show this help message and exit\n     --env ENV          Name of environment to use, as defined in your environments.yml file (default: None)\n     --secure SECURE    Whether or not to verify SSL cert (default: True)\n     --envfile ENVFILE  Location of environments YAML file (default: environments.yml)\n     --name NAME        Name of the root level Service Map/Group (export all if not specified) (default: None)\n     --outdir OUTDIR    Directory path where export will be saved (default: .)\n     --clobber          Remove/overwrite prior exports of same maps (default: False)\n     --timestamp        Include a timestamp in the Service Map dir name (default: False)\n\nimportservicemaps\n-----------------\n\nImport (and optionally transform while doing so) from a Service Map\nexport file\\|\n\n.. code:: shell\n\n   usage: opcli importservicemaps [-h] --env ENV [--secure SECURE] [--envfile ENVFILE] --src SRC [--replace REGEX REPLACEWITH] [--parentlink] [--clobber]\n\n   optional arguments:\n     -h, --help            show this help message and exit\n     --env ENV             Name of environment to use, as defined in your environments.yml file (default: None)\n     --secure SECURE       Whether or not to verify SSL cert (default: True)\n     --envfile ENVFILE     Location of environments YAML file (default: environments.yml)\n     --src SRC             Source: Path to the export file of a Service Map (default: None)\n     --replace REGEX REPLACEWITH\n                           Transforming regex pattern and replacement string (option can be repeated) (default: None)\n     --parentlink          If root Service has a link to a parent, link the imported Service Map (default: False)\n     --clobber             Overwrite Service Map (i.e. with same name) if it already exists (default: False)\n\ncloneservicemaps\n----------------\n\nCopy an existing Service Map, with transformations/replacements (useful\nwhen you have a template Service Map to re-use)\\|\n\n.. code:: shell\n\n   usage: opcli cloneservicemaps [-h] --env ENV [--secure SECURE] [--envfile ENVFILE] --name NAME --replace REGEX REPLACEWITH [--parentlink] [--clobber]\n\n   optional arguments:\n     -h, --help            show this help message and exit\n     --env ENV             Name of environment to use, as defined in your environments.yml file (default: None)\n     --secure SECURE       Whether or not to verify SSL cert (default: True)\n     --envfile ENVFILE     Location of environments YAML file (default: environments.yml)\n     --name NAME           Name of Service Map to transform and clone (default: None)\n     --replace REGEX REPLACEWITH\n                           Transforming regex pattern and replacement string (option can be repeated) (default: None)\n     --parentlink          If root Service has a link to a parent, link the imported Service Map (default: False)\n     --clobber             Overwrite Service Map (i.e. with same name) if it already exists (default: False)\n\n.. _example-1:\n\nExample\n~~~~~~~\n\n.. code:: shell\n\n   % opcli cloneservicemaps --env myenv --name "HUB" --replace HUB HUBCOPY --parentlink\n\ntransformsvcmap\n---------------\n\nApply regex replacements to an exported Service Map and create a new\ntransformed export file with the changes\\|\n\n.. code:: shell\n\n   usage: opcli transformsvcmap [-h] src dest --replace REGEX REPLACEWITH [--clobber]\n\n   positional arguments:\n     src                   Source: File path where a Service Map was previously exported\n     dest                  Destination: File path where the transformed export will be saved\n\n   optional arguments:\n     -h, --help            show this help message and exit\n     --replace REGEX REPLACEWITH\n                           Transforming regex pattern and replacement string (option can be repeated) (default: None)\n     --clobber             Overwrite dest file if it already exists (default: False)\n\ngetservicemaps\n--------------\n\nGet Service Map definitions\\|\n\n.. code:: shell\n\n   usage: opcli getservicemaps [-h] --env ENV [--secure SECURE] [--envfile ENVFILE]\n\n   optional arguments:\n     -h, --help         show this help message and exit\n     --env ENV          Name of environment to use, as defined in your environments.yml file (default: None)\n     --secure SECURE    Whether or not to verify SSL cert (default: True)\n     --envfile ENVFILE  Location of environments YAML file (default: environments.yml)\n\ngetchildsvcgroups\n-----------------\n\nGet child Service Groups of a parent Service\\|\n\n.. code:: shell\n\n   usage: opcli getchildsvcgroups [-h] --env ENV [--secure SECURE] [--envfile ENVFILE] --parent PARENT\n\n   optional arguments:\n     -h, --help         show this help message and exit\n     --env ENV          Name of environment to use, as defined in your environments.yml file (default: None)\n     --secure SECURE    Whether or not to verify SSL cert (default: True)\n     --envfile ENVFILE  Location of environments YAML file (default: environments.yml)\n     --parent PARENT    ID of the parent Service Map/Group (default: None)\n\ngetservicegroup\n---------------\n\nGet the full definition of a Service Group\\|\n\n.. code:: shell\n\n   usage: opcli getservicegroup [-h] --env ENV [--secure SECURE] [--envfile ENVFILE] --id ID\n\n   optional arguments:\n     -h, --help         show this help message and exit\n     --env ENV          Name of environment to use, as defined in your environments.yml file (default: None)\n     --secure SECURE    Whether or not to verify SSL cert (default: True)\n     --envfile ENVFILE  Location of environments YAML file (default: environments.yml)\n     --id ID            ID of the Service Map/Group (default: None)\n\nexportcustattrfile\n------------------\n\nGenerate an Excel or csv file from existing custom attribute values\\|\n\n.. code:: shell\n\n   usage: opcli exportcustattrfile [-h] --env ENV [--secure SECURE] [--envfile ENVFILE] [--query QUERY] [--search SEARCH] [--filter FILTER] [--filename FILENAME]\n\n   optional arguments:\n     -h, --help           show this help message and exit\n     --env ENV            Name of environment to use, as defined in your environments.yml file (default: None)\n     --secure SECURE      Whether or not to verify SSL cert (default: True)\n     --envfile ENVFILE    Location of environments YAML file (default: environments.yml)\n     --query QUERY        Query String to filter resources as per https://develop.opsramp.com/resource-management/tenants-tenantid-resources-search (default: None)\n     --search SEARCH      Search String to filter resources as it would be entered under Resources -> Search (default: None)\n     --filter FILTER      Post-query filter on resources. Python expression that will evaluate to True or False such as alert["resource"]["name"].startswith("prod") (default: None)\n     --filename FILENAME  Name of excel file to generate (.xlsx extension will be added) (default: None)\n\nimportcustattrfile\n------------------\n\nImport an Excel file containing custom attribute values\\|\n\n.. code:: shell\n\n   usage: opcli importcustattrfile [-h] --env ENV [--secure SECURE] [--envfile ENVFILE] [--commit] [--writeblanks] [--filename FILENAME]\n\n   optional arguments:\n     -h, --help           show this help message and exit\n     --env ENV            Name of environment to use, as defined in your environments.yml file (default: None)\n     --secure SECURE      Whether or not to verify SSL cert (default: True)\n     --envfile ENVFILE    Location of environments YAML file (default: environments.yml)\n     --commit             Make the actual updates on the platform. If not specified, only error checking and import simulation will occur. (default: False)\n     --writeblanks        When no value is provided in the spreadsheet for a resource, remove any existing value for that resource on the platform. If not specified then no action is taken for empty values. (default: False)\n     --filename FILENAME  Name of excel file to import (.xlsx extension will be added if not specified.) (default: None)\n\ngetcustomattrs\n--------------\n\nGet custom attribute definitions\\|\n\n.. code:: shell\n\n   usage: opcli getcustomattrs [-h] --env ENV [--secure SECURE] [--envfile ENVFILE]\n\n   optional arguments:\n     -h, --help         show this help message and exit\n     --env ENV          Name of environment to use, as defined in your environments.yml file (default: None)\n     --secure SECURE    Whether or not to verify SSL cert (default: True)\n     --envfile ENVFILE  Location of environments YAML file (default: environments.yml)\n\ngetdiscoprofile\n---------------\n\nGet discovery profile definition\\|\n\n.. code:: shell\n\n   usage: opcli getdiscoprofile [-h] --env ENV [--secure SECURE] [--envfile ENVFILE] --id ID --tenantId TENANTID\n\n   optional arguments:\n     -h, --help           show this help message and exit\n     --env ENV            Name of environment to use, as defined in your environments.yml file (default: None)\n     --secure SECURE      Whether or not to verify SSL cert (default: True)\n     --envfile ENVFILE    Location of environments YAML file (default: environments.yml)\n     --id ID              Discovery profile ID (default: None)\n     --tenantId TENANTID  Client ID or MSP ID of the tenant (default: None)\n\ngetalertesc\n-----------\n\nSearch and get Escalation Policy definitions\\|\n\n.. code:: shell\n\n   usage: opcli getalertesc [-h] --env ENV [--secure SECURE] [--envfile ENVFILE] [--query QUERY] [--details] [--count] [--filter FILTER]\n\n   optional arguments:\n     -h, --help         show this help message and exit\n     --env ENV          Name of environment to use, as defined in your environments.yml file (default: None)\n     --secure SECURE    Whether or not to verify SSL cert (default: True)\n     --envfile ENVFILE  Location of environments YAML file (default: environments.yml)\n     --query QUERY      Query String to filter alerts (default: None)\n     --details          Get the full details for all matched policies (default: False)\n     --count            Only show the count of matching alerts (default: False)\n     --filter FILTER    Post-query filter on alerts. Python expression that will evaluate to True or False such as alert["resource"]["name"].startswith("prod") (default: None)\n\nmigratealertesc\n---------------\n\nMigrate/copy Escalation Policies within same tenant or from one tenant\nto another\\|\n\n.. code:: shell\n\n   usage: opcli migratealertesc [-h] --env ENV [--secure SECURE] [--envfile ENVFILE] [--query QUERY] [--filter FILTER] [--preexec PREEXEC] [--postexec POSTEXEC] --to_env TO_ENV [--test] [--update] [--setactive SETACTIVE]\n\n   optional arguments:\n     -h, --help            show this help message and exit\n     --env ENV             Name of environment to use, as defined in your environments.yml file (default: None)\n     --secure SECURE       Whether or not to verify SSL cert (default: True)\n     --envfile ENVFILE     Location of environments YAML file (default: environments.yml)\n     --query QUERY         Query string to filter policies from source/from instance (default: None)\n     --filter FILTER       Filter for which policies to migrate. Python expression that will evaluate to True or False such as alert["resource"]["name"].startswith("prod") (default: None)\n     --preexec PREEXEC     Pre-mapped exec command (default: None)\n     --postexec POSTEXEC   Post-mapped exec command (default: None)\n     --to_env TO_ENV       Target environment to which policy definitions will be migrated. (--env option defines the source/from environment) (default: None)\n     --test                Test run only. Will check object mappings for missing items and not actually change the target instance. (default: False)\n     --update              Used for bulk updates, will only work if --env and --to_env are the same. Try to update existing policies instead of creating new ones. (default: False)\n     --setactive SETACTIVE\n                           Specify ON or OFF. Will force all policies created on the target to be ON or OFF. Otherwise will be set the same as the source. (default: None)\n',
    'author': 'Michael Friedhoff',
    'author_email': 'michael.friedhoff@opsramp.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': None,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
