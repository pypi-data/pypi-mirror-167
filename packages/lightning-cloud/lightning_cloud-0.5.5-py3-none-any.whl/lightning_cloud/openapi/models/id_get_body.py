# coding: utf-8
"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set

    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING

import six

from lightning_cloud.openapi.configuration import Configuration

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_cloud.openapi.models import *


class IdGetBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'desired_state': 'V1LightningappInstanceState',
        'env': 'list[V1EnvVar]',
        'name': 'str'
    }

    attribute_map = {
        'cluster_id': 'clusterId',
        'desired_state': 'desiredState',
        'env': 'env',
        'name': 'name'
    }

    def __init__(self,
                 cluster_id: 'str' = None,
                 desired_state: 'V1LightningappInstanceState' = None,
                 env: 'list[V1EnvVar]' = None,
                 name: 'str' = None,
                 _configuration=None):  # noqa: E501
        """IdGetBody - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cluster_id = None
        self._desired_state = None
        self._env = None
        self._name = None
        self.discriminator = None

        if cluster_id is not None:
            self.cluster_id = cluster_id
        if desired_state is not None:
            self.desired_state = desired_state
        if env is not None:
            self.env = env
        if name is not None:
            self.name = name

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this IdGetBody.  # noqa: E501


        :return: The cluster_id of this IdGetBody.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this IdGetBody.


        :param cluster_id: The cluster_id of this IdGetBody.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def desired_state(self) -> 'V1LightningappInstanceState':
        """Gets the desired_state of this IdGetBody.  # noqa: E501


        :return: The desired_state of this IdGetBody.  # noqa: E501
        :rtype: V1LightningappInstanceState
        """
        return self._desired_state

    @desired_state.setter
    def desired_state(self, desired_state: 'V1LightningappInstanceState'):
        """Sets the desired_state of this IdGetBody.


        :param desired_state: The desired_state of this IdGetBody.  # noqa: E501
        :type: V1LightningappInstanceState
        """

        self._desired_state = desired_state

    @property
    def env(self) -> 'list[V1EnvVar]':
        """Gets the env of this IdGetBody.  # noqa: E501


        :return: The env of this IdGetBody.  # noqa: E501
        :rtype: list[V1EnvVar]
        """
        return self._env

    @env.setter
    def env(self, env: 'list[V1EnvVar]'):
        """Sets the env of this IdGetBody.


        :param env: The env of this IdGetBody.  # noqa: E501
        :type: list[V1EnvVar]
        """

        self._env = env

    @property
    def name(self) -> 'str':
        """Gets the name of this IdGetBody.  # noqa: E501


        :return: The name of this IdGetBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this IdGetBody.


        :param name: The name of this IdGetBody.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value
        if issubclass(IdGetBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'IdGetBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, IdGetBody):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other: 'IdGetBody') -> bool:
        """Returns true if both objects are not equal"""
        if not isinstance(other, IdGetBody):
            return True

        return self.to_dict() != other.to_dict()
