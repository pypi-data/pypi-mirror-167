# This file was generated by mettle.genes.db.GenPy3 [ver 2.2] on Fri Sep 16 12:08:12 2022
#

import copy
import datetime
import uuid
import time
import dataclasses
import typing
import mettle.io
import mettle.db

from .job_inst_key import tJobInstKey

@dataclasses.dataclass(slots=True)
class tJobInst(mettle.io.ISerializable, mettle.db.IPrimaryKey):

    id: int = dataclasses.field(default=0, compare=True, hash=True)
    parent_id: int = dataclasses.field(default=0, compare=False)
    job_id: int = dataclasses.field(default=0, compare=False)
    batchinst_id: int = dataclasses.field(default=0, compare=False)
    process_date: typing.Optional[datetime.datetime] = dataclasses.field(default=None, compare=False)
    priority: int = dataclasses.field(default=0, compare=False)
    status: str = dataclasses.field(default='', compare=False)
    extra_args: str = dataclasses.field(default='', compare=False)
    group_job: str = dataclasses.field(default='', compare=False)
    group_batch: str = dataclasses.field(default='', compare=False)
    stamp_by: str = dataclasses.field(default='', compare=False)
    stamp_tm: typing.Optional[datetime.datetime] = dataclasses.field(default=None, compare=False)

    def clear(self):
        """
        Clears all member variables for this database record.
        """
        self.id = 0
        self.parent_id = 0
        self.job_id = 0
        self.batchinst_id = 0
        self.process_date = None
        self.priority = 0
        self.status = ''
        self.extra_args = ''
        self.group_job = ''
        self.group_batch = ''
        self.stamp_by = ''
        self.stamp_tm = None

    def _name(self) -> str:
        """
        Name of the record.

        :return: The name.
        """
        return 'tJobInst'

    def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
        """
        Serialize record to a stream.

        :param _w:
        :param _oname:
        """
        if _oname == None:
            _oname = self._name()

        _w.write_start(_oname)
        _w.write_int64("id", self.id)
        _w.write_int64("parent_id", self.parent_id)
        _w.write_int64("job_id", self.job_id)
        _w.write_int64("batchinst_id", self.batchinst_id)
        _w.write_datetime("process_date", self.process_date)
        _w.write_int32("priority", self.priority)
        _w.write_char("status", self.status)
        _w.write_string("extra_args", self.extra_args)
        _w.write_string("group_job", self.group_job)
        _w.write_string("group_batch", self.group_batch)
        _w.write_string("stamp_by", self.stamp_by)
        _w.write_datetime("stamp_tm", self.stamp_tm)
        _w.write_end(_oname)

    def _deserialize(self, _r: mettle.io.IReader, _oname: str = None):
        """
        Deserialize record from a stream.

        :param _r:
        :param _oname:
        """
        if _oname == None:
            _oname = self._name()

        _r.read_start(_oname)
        self.id = _r.read_int64("id")
        self.parent_id = _r.read_int64("parent_id")
        self.job_id = _r.read_int64("job_id")
        self.batchinst_id = _r.read_int64("batchinst_id")
        self.process_date = _r.read_datetime("process_date")
        self.priority = _r.read_int32("priority")
        self.status = _r.read_char("status")
        self.extra_args = _r.read_string("extra_args")
        self.group_job = _r.read_string("group_job")
        self.group_batch = _r.read_string("group_batch")
        self.stamp_by = _r.read_string("stamp_by")
        self.stamp_tm = _r.read_datetime("stamp_tm")
        _r.read_end(_oname)

    def _copy_from(self, rec: "tJobInst"):
        """
        Copies the column from the rec into this record.

        :param rec: The source record.
        """
        self.id = rec.id
        self.parent_id = rec.parent_id
        self.job_id = rec.job_id
        self.batchinst_id = rec.batchinst_id
        self.process_date = rec.process_date
        self.priority = rec.priority
        self.status = rec.status
        self.extra_args = rec.extra_args
        self.group_job = rec.group_job
        self.group_batch = rec.group_batch
        self.stamp_by = rec.stamp_by
        self.stamp_tm = rec.stamp_tm

    def _write_pk(self, _key: "tJobInst"):
        """
        Write the primary key columns to the key object.

        :param _key:
        """
        self._write_key(_key)

    def _read_pk(self, _key: "tJobInst"):
        """
        Read the primary key columns from the key object.

        :param _key:
        """
        self._read_key(_key)

    def _serialize_key(self, _w: mettle.io.IWriter):
        """
        Serialize the primary key to a stream.

        :param _w:
        """
        _key = tJobInstKey()

        self._write_key(_key)
        _key._serialize(_w)

    def _deserialize_key(self, _r: mettle.io.IReader):
        """
        Deserialize the primary key from a stream.

        :param _r:
        """
        _key = tJobInstKey()

        _key._deserialize(_r)
        self._read_key(_key)

    @staticmethod
    def _cache_davs(dvc=None, for_ins: bool = False, key_only: bool = False):
        """
        Cache the DAV into the dav cache (or create one) and return it.

        :param dvc: (mettle.lib.DavCache), target cache, if None a new one is created and returned.
        :param for_ins: Davs for insert.
        :param key_only: Davs by key only, ie for delete/selectone.
        """
        if dvc is None:
            dvc = mettle.lib.DavCache()

        if not for_ins:
            dvc.add_targ("id", mettle.lib.Dav(mettle.lib.Dav.eDavType.Min, 1))
            dvc.add_targ("id", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))

        if key_only:
            return dvc

        dvc.add_targ("job_id", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("process_date", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("priority", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("status", mettle.lib.Dav(mettle.lib.Dav.eDavType.Min, 1))
        dvc.add_targ("status", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 1))
        dvc.add_targ("status", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("status", mettle.lib.Dav(mettle.lib.Dav.eDavType.In, ['P','W','R','C','N','F','O']))
        dvc.add_targ("extra_args", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 256))
        dvc.add_targ("group_job", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("group_job", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 128))
        dvc.add_targ("group_batch", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 128))
        dvc.add_targ("stamp_by", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("stamp_by", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 128))

        return dvc

    def _get_davs(self, dvc=None, for_ins: bool = False, key_only: bool = False):
        tJobInst._cache_davs(dvc, for_ins, key_only)

    def _write_key(self, _key: tJobInstKey):
        """
        Write primary key columns to _key.

        :param _key:
        """
        _key.id = self.id

    def _read_key(self, _key: tJobInstKey):
        """
        Read the primary key columns from _key.

        :param _key:
        """
        self.id = _key.id

    class Status_Couplet(dict):
        key_pending = "P"
        key_waiting = "W"
        key_running = "R"
        key_completed = "C"
        key_none = "N"
        key_failed = "F"
        key_forced_okay = "O"

        value_pending = "Pending"
        value_waiting = "Waiting"
        value_running = "Running"
        value_completed = "Completed"
        value_none = "None"
        value_failed = "Failed"
        value_forced_okay = "Forced Okay"

        def __init__(self):
            self[self.key_pending] = self.value_pending
            self[self.key_waiting] = self.value_waiting
            self[self.key_running] = self.value_running
            self[self.key_completed] = self.value_completed
            self[self.key_none] = self.value_none
            self[self.key_failed] = self.value_failed
            self[self.key_forced_okay] = self.value_forced_okay

        @staticmethod
        def get_value(key):
            if key == tJobInst.Status_Couplet.key_pending:
                return tJobInst.Status_Couplet.value_pending

            if key == tJobInst.Status_Couplet.key_waiting:
                return tJobInst.Status_Couplet.value_waiting

            if key == tJobInst.Status_Couplet.key_running:
                return tJobInst.Status_Couplet.value_running

            if key == tJobInst.Status_Couplet.key_completed:
                return tJobInst.Status_Couplet.value_completed

            if key == tJobInst.Status_Couplet.key_none:
                return tJobInst.Status_Couplet.value_none

            if key == tJobInst.Status_Couplet.key_failed:
                return tJobInst.Status_Couplet.value_failed

            if key == tJobInst.Status_Couplet.key_forced_okay:
                return tJobInst.Status_Couplet.value_forced_okay

            return ""

    @staticmethod
    def _pk_compare(x, y) -> int:
        """
        Compare function do primary key comparisons for list sorts and searches.

        :return: zero for x == y, negative for x < y, positive for x > y
        """
        return x.id - y.id

    def __lt__(self, other):
        return other and self._pk_compare(self, other) < 0

    def __gt__(self, other):
        return other and self._pk_compare(self, other) > 0

    def __eq__(self, other):
        return other and self._pk_compare(self, other) == 0

    def __le__(self, other):
        return other and self._pk_compare(self, other) <= 0

    def __ge__(self, other):
        return other and self._pk_compare(self, other) >= 0

    def __ne__(self, other):
        return other == None or self._pk_compare(self, other)


    class List(list, mettle.io.ISerializable):
        """
        List Class
        """

        def _name(self) -> str:
            """
            Name of the list.

            :return: The name
            """
            return 'tJobInst.List'

        def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
            """
            Serialize the list to a stream.

            :param _w:
            :param _oname:
            """
            if _oname == None:
                _oname = self._name()

            _w.write_start_list(_oname, len(self))

            for _rec in self:
                _rec._serialize(_w)

            _w.write_end(_oname)

        def _deserialize(self, _r: mettle.io.IReader, _oname: str = None):
            """
            Deserialize the list from a stream.

            :param _r:
            :param _oname:
            """
            if _oname == None:
                _oname = self._name()

            _cnt = _r.read_start_list(_oname)

            while _cnt >= 1:
                _rec  = tJobInst()
                _cnt -= 1
                _rec._deserialize(_r)
                self.append(_rec)

            _r.read_end(_oname)

        def _get_davs(self, dvc=None, for_ins: bool = False, key_only: bool = False):
            return tJobInst._cache_davs(dvc, for_ins, key_only)

