# This file was generated by mettle.genes.db.GenPy3 [ver 2.2] on Fri Sep 16 12:08:12 2022
#

import copy
import datetime
import uuid
import time
import dataclasses
import typing
import mettle.io
import mettle.db

@dataclasses.dataclass(slots=True)
class tJobInstMetric(mettle.io.ISerializable):

    jobinst_id: int = dataclasses.field(default=0, compare=False)
    stamp_tm: typing.Optional[datetime.datetime] = dataclasses.field(default=None, compare=False)
    mtype: str = dataclasses.field(default='', compare=False)
    msg: str = dataclasses.field(default='', compare=False)

    def clear(self):
        """
        Clears all member variables for this database record.
        """
        self.jobinst_id = 0
        self.stamp_tm = None
        self.mtype = ''
        self.msg = ''

    def _name(self) -> str:
        """
        Name of the record.

        :return: The name.
        """
        return 'tJobInstMetric'

    def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
        """
        Serialize record to a stream.

        :param _w:
        :param _oname:
        """
        if _oname == None:
            _oname = self._name()

        _w.write_start(_oname)
        _w.write_int64("jobinst_id", self.jobinst_id)
        _w.write_datetime("stamp_tm", self.stamp_tm)
        _w.write_char("mtype", self.mtype)
        _w.write_string("msg", self.msg)
        _w.write_end(_oname)

    def _deserialize(self, _r: mettle.io.IReader, _oname: str = None):
        """
        Deserialize record from a stream.

        :param _r:
        :param _oname:
        """
        if _oname == None:
            _oname = self._name()

        _r.read_start(_oname)
        self.jobinst_id = _r.read_int64("jobinst_id")
        self.stamp_tm = _r.read_datetime("stamp_tm")
        self.mtype = _r.read_char("mtype")
        self.msg = _r.read_string("msg")
        _r.read_end(_oname)

    def _copy_from(self, rec: "tJobInstMetric"):
        """
        Copies the column from the rec into this record.

        :param rec: The source record.
        """
        self.jobinst_id = rec.jobinst_id
        self.stamp_tm = rec.stamp_tm
        self.mtype = rec.mtype
        self.msg = rec.msg

    @staticmethod
    def _cache_davs(dvc=None, for_ins: bool = False, key_only: bool = False):
        """
        Cache the DAV into the dav cache (or create one) and return it.

        :param dvc: (mettle.lib.DavCache), target cache, if None a new one is created and returned.
        :param for_ins: Davs for insert.
        :param key_only: Davs by key only, ie for delete/selectone.
        """
        if dvc is None:
            dvc = mettle.lib.DavCache()

        dvc.add_targ("jobinst_id", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("mtype", mettle.lib.Dav(mettle.lib.Dav.eDavType.Min, 1))
        dvc.add_targ("mtype", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 1))
        dvc.add_targ("mtype", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("mtype", mettle.lib.Dav(mettle.lib.Dav.eDavType.In, ['S','C','M','X','E','T','F']))

        return dvc

    def _get_davs(self, dvc=None, for_ins: bool = False, key_only: bool = False):
        tJobInstMetric._cache_davs(dvc, for_ins, key_only)

    def _write_key(self, _key: None):
        """
        Write primary key columns to _key.

        :param _key:
        """

    def _read_key(self, _key: None):
        """
        Read the primary key columns from _key.

        :param _key:
        """

    class Mtype_Couplet(dict):
        key_start = "S"
        key_completed = "C"
        key_message = "M"
        key_cancelled = "X"
        key_error = "E"
        key_timer = "T"
        key_forced_okay = "F"

        value_start = "Start"
        value_completed = "Completed"
        value_message = "Message"
        value_cancelled = "Cancelled"
        value_error = "Error"
        value_timer = "Timer"
        value_forced_okay = "Forced Okay"

        def __init__(self):
            self[self.key_start] = self.value_start
            self[self.key_completed] = self.value_completed
            self[self.key_message] = self.value_message
            self[self.key_cancelled] = self.value_cancelled
            self[self.key_error] = self.value_error
            self[self.key_timer] = self.value_timer
            self[self.key_forced_okay] = self.value_forced_okay

        @staticmethod
        def get_value(key):
            if key == tJobInstMetric.Mtype_Couplet.key_start:
                return tJobInstMetric.Mtype_Couplet.value_start

            if key == tJobInstMetric.Mtype_Couplet.key_completed:
                return tJobInstMetric.Mtype_Couplet.value_completed

            if key == tJobInstMetric.Mtype_Couplet.key_message:
                return tJobInstMetric.Mtype_Couplet.value_message

            if key == tJobInstMetric.Mtype_Couplet.key_cancelled:
                return tJobInstMetric.Mtype_Couplet.value_cancelled

            if key == tJobInstMetric.Mtype_Couplet.key_error:
                return tJobInstMetric.Mtype_Couplet.value_error

            if key == tJobInstMetric.Mtype_Couplet.key_timer:
                return tJobInstMetric.Mtype_Couplet.value_timer

            if key == tJobInstMetric.Mtype_Couplet.key_forced_okay:
                return tJobInstMetric.Mtype_Couplet.value_forced_okay

            return ""


    class List(list, mettle.io.ISerializable):
        """
        List Class
        """

        def _name(self) -> str:
            """
            Name of the list.

            :return: The name
            """
            return 'tJobInstMetric.List'

        def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
            """
            Serialize the list to a stream.

            :param _w:
            :param _oname:
            """
            if _oname == None:
                _oname = self._name()

            _w.write_start_list(_oname, len(self))

            for _rec in self:
                _rec._serialize(_w)

            _w.write_end(_oname)

        def _deserialize(self, _r: mettle.io.IReader, _oname: str = None):
            """
            Deserialize the list from a stream.

            :param _r:
            :param _oname:
            """
            if _oname == None:
                _oname = self._name()

            _cnt = _r.read_start_list(_oname)

            while _cnt >= 1:
                _rec  = tJobInstMetric()
                _cnt -= 1
                _rec._deserialize(_r)
                self.append(_rec)

            _r.read_end(_oname)

        def _get_davs(self, dvc=None, for_ins: bool = False, key_only: bool = False):
            return tJobInstMetric._cache_davs(dvc, for_ins, key_only)

