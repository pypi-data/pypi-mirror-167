# This file was generated by mettle.genes.db.GenPy3 [ver 2.2] on Fri Sep 16 12:08:12 2022
#  Target Database = postgresql
#
import copy
import datetime
import uuid
import time
import mettle.lib
import mettle.io
import mettle.db

from bs_monitor.db.tables.batch_inst import tBatchInst

class dBatchInstUpdate:
    __slots__ = ("_dbcon", "_dbstmnt", "irec")

    def __init__(self, dbcon: mettle.db.IAConnect):
        """
        Constructor.

        :param dbcon: Mettle database connection object.
        """
        self._dbcon   = dbcon
        self._dbstmnt = None
        self.irec     = tBatchInst()

    async def __aenter__(self):
        """
        With statement enter.
        """
        return self

    async def __aexit__(self, type, value, traceback):
        """
        With statement exit.
        """
        await self._destroy()

    async def _destroy(self):
        if self._dbstmnt:
            await self._dbstmnt.destroy()
            self._dbstmnt = None

    async def exec_deft(self,
                        id: int,
                        parent_id: int,
                        batch_id: int,
                        status: str,
                        run_date: datetime.datetime,
                        start_date: datetime.datetime,
                        end_date: datetime.datetime) -> "dBatchInstUpdate":
        """
        Execute the query by setting all the inputs.

        :param id: int
        :param parent_id: int
        :param batch_id: int
        :param status: str
        :param run_date: datetime.datetime
        :param start_date: datetime.datetime
        :param end_date: datetime.datetime
        :return: Self for convenience.
        """
        self.irec.id = id
        self.irec.parent_id = parent_id
        self.irec.batch_id = batch_id
        self.irec.status = status
        self.irec.run_date = run_date
        self.irec.start_date = start_date
        self.irec.end_date = end_date

        return await self.exec()

    async def exec(self, irec: tBatchInst = None) -> "dBatchInstUpdate":
        """
        Execute the query, optionally passing in the input rec.

        :param irec:
        :return: Self for convenience.
        """
        if irec:
            self.irec._copy_from(irec)

        await self._destroy()

        self._dbstmnt = await self._dbcon.statement("BatchInstUpdate", self._dbcon.STMNT_TYPE_CUD)

        self._dbstmnt.sql("""update
  monitor.BatchInst
set
  parent_id = :parent_id,
  batch_id = :batch_id,
  status = :status,
  run_date = :run_date,
  start_date = :start_date,
  end_date = :end_date
where
  id = :id""")

        self._dbstmnt.bind_in("id", self.irec.id, int, 8)
        self._dbstmnt.bind_in("parent_id", self.irec.parent_id, int, 8)
        self._dbstmnt.bind_in("batch_id", self.irec.batch_id, int, 8)
        self._dbstmnt.bind_in("status", self.irec.status, str, 1)
        self._dbstmnt.bind_in("run_date", self.irec.run_date, datetime.datetime)
        self._dbstmnt.bind_in("start_date", self.irec.start_date, datetime.datetime)
        self._dbstmnt.bind_in("end_date", self.irec.end_date, datetime.datetime)

        await self._dbcon.execute(self._dbstmnt)

        if irec:
            irec._copy_from(self.irec)

        return self

