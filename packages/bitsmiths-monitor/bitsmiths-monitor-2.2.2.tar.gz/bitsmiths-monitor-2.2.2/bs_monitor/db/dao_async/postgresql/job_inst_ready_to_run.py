# This file was generated by mettle.genes.db.GenPy3 [ver 2.2] on Fri Sep 16 12:08:12 2022
#  Target Database = postgresql
#
import copy
import datetime
import uuid
import time
import mettle.lib
import mettle.io
import mettle.db

from bs_monitor.db.tables.job_inst import tJobInst

class dJobInstReadyToRun:
    __slots__ = ("_dbcon", "_dbstmnt", "orec")

    def __init__(self, dbcon: mettle.db.IAConnect):
        """
        Constructor.

        :param dbcon: Mettle database connection object.
        """
        self._dbcon   = dbcon
        self._dbstmnt = None
        self.orec     = tJobInst()

    async def __aenter__(self):
        """
        With statement enter.
        """
        return self

    async def __aexit__(self, type, value, traceback):
        """
        With statement exit.
        """
        await self._destroy()

    async def _destroy(self):
        if self._dbstmnt:
            await self._dbstmnt.destroy()
            self._dbstmnt = None

    async def exec(self) -> "dJobInstReadyToRun":
        """
        Execute the query.

        :return: Self for convenience.
        """
        await self._destroy()

        self._dbstmnt = await self._dbcon.statement("JobInstReadyToRun", self._dbcon.STMNT_TYPE_READ)

        self._dbstmnt.sql("""select
  m.*
from
  monitor.jobinst m,
  (
    select
      i.id,
      lpad(cast(i.priority as varchar), 3, '0') || '_' || to_char(i.process_date, 'YYYYMMDDHH24MISS') || '_' || lpad(cast(i.id as varchar), 64, '0') as key,
      i.group_job
    from
      monitor.jobinst i,
      (
        select
          group_job
        from
          monitor.jobinst
        where
          status = 'P'
        group by
          group_job
        except
        select
          group_job
        from
          monitor.jobinst
        where
          status in ('R', 'W')
        group by
          group_job
      ) g
    where
      i.group_job     = g.group_job        and
      i.status        = 'P'               and
      i.process_date <= current_timestamp and
      (
        (i.parent_id is null)
          or
        (i.parent_id in (select
                          xx.id
                        from
                          monitor.jobinst xx
                        where
                          xx.id = i.parent_id and
                          xx.status in ('C', 'O')))
      )
  ) x
where
  m.id = x.id
order by
  m.group_job,
  x.key
limit
  100""")

        self._dbstmnt.bind_out("id", int, 8)
        self._dbstmnt.bind_out("parent_id", int, 8)
        self._dbstmnt.bind_out("job_id", int, 8)
        self._dbstmnt.bind_out("batchinst_id", int, 8)
        self._dbstmnt.bind_out("process_date", datetime.datetime)
        self._dbstmnt.bind_out("priority", int, 4)
        self._dbstmnt.bind_out("status", str, 1)
        self._dbstmnt.bind_out("extra_args", str, 256)
        self._dbstmnt.bind_out("group_job", str, 128)
        self._dbstmnt.bind_out("group_batch", str, 128)
        self._dbstmnt.bind_out("stamp_by", str, 128)
        self._dbstmnt.bind_out("stamp_tm", datetime.datetime)

        await self._dbcon.execute(self._dbstmnt)

        return self

    async def fetch(self, must_exist: bool = False) -> bool:
        """
        Fetches the next row from the executed query.

        :param must_exist:
        :return: True if a row was fetched, else False.
        """
        if not await self._dbcon.fetch(self._dbstmnt):
            if must_exist:
                raise mettle.lib.xMettle(f"Record not found: [table:JobInst, proc:ReadyToRun]", err_code=mettle.lib.xMettle.eCode.DBNotFound)
            return False

        self.orec.id = self._dbstmnt.result[0]
        self.orec.parent_id = self._dbstmnt.result[1]
        self.orec.job_id = self._dbstmnt.result[2]
        self.orec.batchinst_id = self._dbstmnt.result[3]
        self.orec.process_date = self._dbstmnt.result[4]
        self.orec.priority = self._dbstmnt.result[5]
        self.orec.status = self._dbstmnt.result[6]
        self.orec.extra_args = self._dbstmnt.result[7]
        self.orec.group_job = self._dbstmnt.result[8]
        self.orec.group_batch = self._dbstmnt.result[9]
        self.orec.stamp_by = self._dbstmnt.result[10]
        self.orec.stamp_tm = self._dbstmnt.result[11]

        return True

    async def fetch_all(self, out_list: tJobInst.List, clear_list: bool = True) -> int:
        """
        Fetch all the rows into the specified list and return the list count.

        :param out_list:
        :param clear_list:
        :return: Number of rows fetched.
        """
        if clear_list:
            out_list.clear()

        while await self.fetch():
            out_list.append(copy.deepcopy(self.orec))

        return len(out_list)

