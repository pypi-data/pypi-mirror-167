# This file was generated by mettle.genes.db.GenPy3 [ver 2.2] on Fri Sep 16 12:08:12 2022
#  Target Database = postgresql
#
import asyncio
import copy
import datetime
import uuid
import time
import mettle.lib
import mettle.io
import mettle.db

from bs_monitor.db.tables.batch_item import tBatchItem
from bs_monitor.db.tables.batch_item_key import tBatchItemKey

from .batch_item_select_one import dBatchItemSelectOne
from .batch_item_update import dBatchItemUpdate
from .batch_item_insert import dBatchItemInsert
from .batch_item_delete_one import dBatchItemDeleteOne

class dBatchItem:
    __slots__ = ("_dbcon", "rec")

    def __init__(self, dbcon: mettle.db.IAConnect):
        """
        Constructor.

        :param dbcon: Mettle database connection object.
        """
        self.rec    = tBatchItem()
        self._dbcon = dbcon

    def __enter__(self):
        """
        DAO enter.
        """
        return self

    def __exit__(self, type, value, traceback):
        """
        DAO exit.
        """
        pass

    async def try_select_one(self) -> bool:
        """
        Attempt to select the record.

        :return: True if the record was found.
        """
        _key = tBatchItemKey()

        self.rec._write_key(_key)

        return await self.try_select_one_by_key(_key)

    async def try_select_one_with(self, _rec: tBatchItem) -> bool:
        """
        Attempt to select the record using a table rec.

        :param _rec: The table rec to select with and into.
        :return: True if the row as selectd.
        """
        _key = tBatchItemKey()
        _rec._write_key(_key)

        if not await self.try_select_one_by_key(_key):
            return False

        _rec._copy_from(self.rec)

        return True

    async def try_select_one_deft(self,
                                  id: int,
                                  batch_id: int) -> bool:
        """
        Attempt to select the record by it's primary key columns.

        :param id: int
        :param batch_id: int
        :return: True if the row as selectd.
        """
        _key = tBatchItemKey()

        _key.id = id
        _key.batch_id = batch_id

        return await self.try_select_one_by_key(_key)

    async def try_select_one_by_key(self, _key: tBatchItemKey) -> bool:
        """
        Attempt to select the record with it's primary key.

        :param _key: Primary key of the table record.
        :returns: True if row was selected.
        """
        async with dBatchItemSelectOne(self._dbcon) as _qry:
            await _qry.exec(_key)
            if not await _qry.fetch():
                return False

            self.rec = _qry.orec

        return True

    async def select_one(self) -> "dBatchItem":
        """
        Selects the record, raises and error if it does not exist.

        :return: Self for convenience.
        """
        if not await self.try_select_one():
            raise mettle.lib.xMettle(f"Not found: [table:dBatchItem, row:{self.rec}]", err_code=mettle.lib.xMettle.eCode.DBNotFound)

        return self

    async def select_one_with(self, _rec: tBatchItem) -> "dBatchItem":
        """
        Attempt to select the record with the table record.

        :param _rec: Table record.
        :returns: Self for convenience.
        """
        if not await self.try_select_one_with(_rec):
            raise mettle.lib.xMettle("SelectOne failed to return a record (dBatchItem)")

        return self

    async def select_one_deft(self,
                              id: int,
                              batch_id: int) -> "dBatchItem":
        """
        Selects the record by its primary key columns, raises and error if it does not exist.

        :param id: int
        :param batch_id: int
        """
        _key = tBatchItemKey()

        _key.id = id
        _key.batch_id = batch_id

        if not await self.try_select_one_by_key(_key):
            raise mettle.lib.xMettle(f"Not found: [table:dBatchItem, row:{_key}]", err_code=mettle.lib.xMettle.eCode.DBNotFound)

        return self

    async def select_one_by_key(self, _key: tBatchItemKey) -> "dBatchItem":
        """
        Attempt to select the record with it's primary key.

        :param _key: Primary key of the table record.
        :return: Self for convenience.
        """
        if not await self.try_select_one_by_key(_key):
            raise mettle.lib.xMettle(f"Not found: [table:dBatchItem, row:{self.irec}]", xMettle.eCode.DBNotFound)

        return self

    async def update_deft(self,
                          id: int,
                          batch_id: int,
                          job_id: int,
                          extra_args: str,
                          stamp_by: str):
        """
        Update the record by setting all column values.

        :param id: int
        :param batch_id: int
        :param job_id: int
        :param extra_args: str
        :param stamp_by: str
        :param stamp_tm: datetime.datetime
        """
        self.rec.id = id
        self.rec.batch_id = batch_id
        self.rec.job_id = job_id
        self.rec.extra_args = extra_args
        self.rec.stamp_by = stamp_by

        await self.update()

    async def update(self, irec: tBatchItem = None):
        """
        Update the record in the database with the record or irec if it is not None.

        :param irec: If not None use this record to update the database.
        """
        if irec:
            self.rec._copy_from(irec)

        async with dBatchItemUpdate(self._dbcon) as _qry:
            await _qry.exec(self.rec)

        if irec:
            irec._copy_from(self.rec)

    async def insert_deft(self,
                          id: int,
                          batch_id: int,
                          job_id: int,
                          extra_args: str,
                          stamp_by: str):
        """
        Insert the record setting all column values.

        :param id: int
        :param batch_id: int
        :param job_id: int
        :param extra_args: str
        :param stamp_by: str
        :param stamp_tm: datetime.datetime
        """
        self.rec.id = id
        self.rec.batch_id = batch_id
        self.rec.job_id = job_id
        self.rec.extra_args = extra_args
        self.rec.stamp_by = stamp_by

        await self.insert()

    async def insert(self, irec: tBatchItem = None):
        """
        Insert the record in the database with the record or irec if it is not None.

        :param irec: If not None use this record to insert into the database.
        """
        if irec:
            self.rec._copy_from(irec)

        async with dBatchItemInsert(self._dbcon) as _qry:
            await _qry.exec(self.rec)

        if irec:
            irec._copy_from(self.rec)

    async def delete_one_deft(self,
                              id: int,
                              batch_id: int):
        """
        Delete one record by it's primary key columns.

        :param id: int
        :param batch_id: int
        """
        _key = tBatchItemKey()

        _key.id = id
        _key.batch_id = batch_id

        await self.delete_one(_key)

    async def delete_one(self, irec: tBatchItemKey = None):
        """
        Delete the record by its primary key or irec if it is not None.

        :param irec: If not None use this record to delete record.
        """
        _key = tBatchItemKey()

        if irec:
            _key._copy_from(irec)
        else:
            self.rec._write_key(_key)

        async with dBatchItemDeleteOne(self._dbcon) as _qry:
            await _qry.exec(_key)

