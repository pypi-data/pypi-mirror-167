# This file was generated by mettle.genes.db.GenPy3 [ver 2.2] on Fri Sep 16 12:08:12 2022
#  Target Database = postgresql
#
import asyncio
import copy
import datetime
import uuid
import time
import mettle.lib
import mettle.io
import mettle.db

from bs_monitor.db.tables.job_inst_metric import tJobInstMetric

from .job_inst_metric_insert import dJobInstMetricInsert

class dJobInstMetric:
    __slots__ = ("_dbcon", "rec")

    def __init__(self, dbcon: mettle.db.IAConnect):
        """
        Constructor.

        :param dbcon: Mettle database connection object.
        """
        self.rec    = tJobInstMetric()
        self._dbcon = dbcon

    def __enter__(self):
        """
        DAO enter.
        """
        return self

    def __exit__(self, type, value, traceback):
        """
        DAO exit.
        """
        pass

    async def insert_deft(self,
                          jobinst_id: int,
                          mtype: str,
                          msg: str):
        """
        Insert the record setting all column values.

        :param jobinst_id: int
        :param stamp_tm: datetime.datetime
        :param mtype: str
        :param msg: str
        """
        self.rec.jobinst_id = jobinst_id
        self.rec.mtype = mtype
        self.rec.msg = msg

        await self.insert()

    async def insert(self, irec: tJobInstMetric = None):
        """
        Insert the record in the database with the record or irec if it is not None.

        :param irec: If not None use this record to insert into the database.
        """
        if irec:
            self.rec._copy_from(irec)

        async with dJobInstMetricInsert(self._dbcon) as _qry:
            await _qry.exec(self.rec)

        if irec:
            irec._copy_from(self.rec)

