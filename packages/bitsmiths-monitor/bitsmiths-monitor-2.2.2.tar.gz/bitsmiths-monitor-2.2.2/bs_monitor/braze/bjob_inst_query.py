# This file was generated by mettle.genes.braze.GenPy3 [ver 2.2] on Fri Sep 16 12:08:12 2022
#

import datetime
import uuid
import mettle.braze
import mettle.lib

from mettle.io.iserializable import ISerializable

class bJobInstQuery(ISerializable):
    __slots__ = ("date_from", "date_to", "job_id", "job_name", "jobinst_id", "jobinst_status", "group_job", "group_batch", "batch_id", "batchinst_id")

    def __init__(self,
                 date_from: datetime.datetime = None,
                 date_to: datetime.datetime = None,
                 job_id: int = 0,
                 job_name: str = '',
                 jobinst_id: mettle.braze.Int64List = None,
                 jobinst_status: mettle.braze.CharList = None,
                 group_job: str = '',
                 group_batch: str = '',
                 batch_id: int = 0,
                 batchinst_id: int = 0):
        """
        Constructor.

        :param date_from: Optinally specify a from date to search from
        :param date_to: Optinally specify a to date to search from
        :param job_id: Optionally limit results by job indentifier
        :param job_name: Limit results by job name. This can be a wild card
        :param jobinst_id: Limit the results a list of job instance identifiers
        :param jobinst_status: Limit the job instances by a status list
        :param group_job: Limit the results by group job. This can be a wild card
        :param group_batch: Limit the results by batch group. This can be a wild card
        :param batch_id: Limit the results by batch identifer
        :param batchinst_id: Limit the results by batch instance identifier
        """
        self.date_from = date_from
        self.date_to = date_to
        self.job_id = job_id
        self.job_name = job_name
        self.jobinst_id = mettle.braze.Int64List() if jobinst_id is None else jobinst_id
        self.jobinst_status = mettle.braze.CharList() if jobinst_status is None else jobinst_status
        self.group_job = group_job
        self.group_batch = group_batch
        self.batch_id = batch_id
        self.batchinst_id = batchinst_id

    def clear(self):
        self.date_from = None
        self.date_to = None
        self.job_id = 0
        self.job_name = ''
        self.jobinst_id.clear()
        self.jobinst_status.clear()
        self.group_job = ''
        self.group_batch = ''
        self.batch_id = 0
        self.batchinst_id = 0

    def _name(self) -> str:
        """
        Get the struct name.

        :return: Name of the struct
        """
        return 'bJobInstQuery'

    def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
        """
        Serialize this struct.

        :param _w:
        :param _oname:
        """
        if not _oname:
            _oname = self._name()

        _w.write_start(_oname)
        _w.write_datetime("dateFrom", self.date_from)
        _w.write_datetime("dateTo", self.date_to)
        _w.write_int64("jobId", self.job_id)
        _w.write_string("jobName", self.job_name)
        self.jobinst_id._serialize(_w, "jobinstId")
        self.jobinst_status._serialize(_w, "jobinstStatus")
        _w.write_string("groupJob", self.group_job)
        _w.write_string("groupBatch", self.group_batch)
        _w.write_int64("batchId", self.batch_id)
        _w.write_int64("batchinstId", self.batchinst_id)
        _w.write_end(_oname)

    def _deserialize(self, _r: mettle.io.IReader, _oname: str = None) -> int:
        """
        Deserialize this struct.

        :param _r:
        :param _oname:
        """
        if _oname == None:
            _oname = self._name()

        _r.read_start(_oname)
        self.date_from = _r.read_datetime("dateFrom")
        self.date_to = _r.read_datetime("dateTo")
        self.job_id = _r.read_int64("jobId")
        self.job_name = _r.read_string("jobName")
        self.jobinst_id._deserialize(_r, "jobinstId")
        self.jobinst_status._deserialize(_r, "jobinstStatus")
        self.group_job = _r.read_string("groupJob")
        self.group_batch = _r.read_string("groupBatch")
        self.batch_id = _r.read_int64("batchId")
        self.batchinst_id = _r.read_int64("batchinstId")
        _r.read_end(_oname)

    @staticmethod
    def _cache_davs(dvc: mettle.lib.DavCache = None):
        """
        Cache the DAV into the dav cache (or create one) and return it.

        :param dvc: Target cache, if None a new one is created and returned.
        """
        if not dvc:
            dvc = mettle.lib.DavCache()

        dvc.add_targ("job_name", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 256))

        return dvc

    def _get_davs(self, dvc=None):
        return self._cache_davs(dvc)

    def __repr__(self) -> str:
        return '<bJobInstQuery [date_from:%s, date_to:%s, job_id:%r, job_name:%.32s, jobinst_id:%r, jobinst_status:%r, group_job:%.32s, group_batch:%.32s, batch_id:%r, batchinst_id:%r]>' % (
            self.date_from, self.date_to, self.job_id, self.job_name, self.jobinst_id, self.jobinst_status, self.group_job, self.group_batch, self.batch_id, self.batchinst_id)

    # List class
    class List(list, ISerializable):

        def _name(self) -> str:
            """
            Get list name
            """
            return 'bJobInstQuery.List'

        def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
            """
            Serialize the list

            :param _w:
            :param _oname:
            """
            if _oname == None:
                _oname = self._name()

            _w.write_start_list(_oname, len(self))

            for _rec in self:
                _rec._serialize(_w)

            _w.write_end(_oname)

        def _deserialize(self, _r: mettle.io.IReader, _oname: str = None) -> int:
            """
            Deserialize the list

            :param _r:
            :param _oname:
            """
            if _oname == None:
                  _oname = self._name()

            _cnt = _r.read_start_list(_oname)

            while _cnt >= 1:
                _rec  = bJobInstQuery()
                _cnt -= 1
                _rec._deserialize(_r)
                self.append(_rec)

            _r.read_end(_oname)

        def _get_davs(self, dvc: mettle.lib.DavCache = None) -> int:
            """
            Cache the davs

            :param dvc:
            """
            return bJobInstQuery._cache_davs(dvc)

