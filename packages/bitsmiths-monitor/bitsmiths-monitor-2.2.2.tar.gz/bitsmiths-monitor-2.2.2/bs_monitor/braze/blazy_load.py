# This file was generated by mettle.genes.braze.GenPy3 [ver 2.2] on Fri Sep 16 12:08:12 2022
#

import datetime
import uuid
import mettle.braze
import mettle.lib

from mettle.io.iserializable import ISerializable

class bLazyLoad(ISerializable):
    __slots__ = ("offset", "limit")

    def __init__(self,
                 offset: int = 0,
                 limit: int = 0):
        """
        Constructor.

        :param offset:
        :param limit:
        """
        self.offset = offset
        self.limit = limit

    def clear(self):
        self.offset = 0
        self.limit = 0

    def _name(self) -> str:
        """
        Get the struct name.

        :return: Name of the struct
        """
        return 'bLazyLoad'

    def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
        """
        Serialize this struct.

        :param _w:
        :param _oname:
        """
        if not _oname:
            _oname = self._name()

        _w.write_start(_oname)
        _w.write_int64("offset", self.offset)
        _w.write_int64("limit", self.limit)
        _w.write_end(_oname)

    def _deserialize(self, _r: mettle.io.IReader, _oname: str = None) -> int:
        """
        Deserialize this struct.

        :param _r:
        :param _oname:
        """
        if _oname == None:
            _oname = self._name()

        _r.read_start(_oname)
        self.offset = _r.read_int64("offset")
        self.limit = _r.read_int64("limit")
        _r.read_end(_oname)

    @staticmethod
    def _cache_davs(dvc: mettle.lib.DavCache = None):
        """
        Cache the DAV into the dav cache (or create one) and return it.

        :param dvc: Target cache, if None a new one is created and returned.
        """
        if not dvc:
            dvc = mettle.lib.DavCache()

        dvc.add_targ("offset", mettle.lib.Dav(mettle.lib.Dav.eDavType.Min, 0))
        dvc.add_targ("limit", mettle.lib.Dav(mettle.lib.Dav.eDavType.Min, 0))

        return dvc

    def _get_davs(self, dvc=None):
        return self._cache_davs(dvc)

    def __repr__(self) -> str:
        return '<bLazyLoad [offset:%r, limit:%r]>' % (
            self.offset, self.limit)

    # List class
    class List(list, ISerializable):

        def _name(self) -> str:
            """
            Get list name
            """
            return 'bLazyLoad.List'

        def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
            """
            Serialize the list

            :param _w:
            :param _oname:
            """
            if _oname == None:
                _oname = self._name()

            _w.write_start_list(_oname, len(self))

            for _rec in self:
                _rec._serialize(_w)

            _w.write_end(_oname)

        def _deserialize(self, _r: mettle.io.IReader, _oname: str = None) -> int:
            """
            Deserialize the list

            :param _r:
            :param _oname:
            """
            if _oname == None:
                  _oname = self._name()

            _cnt = _r.read_start_list(_oname)

            while _cnt >= 1:
                _rec  = bLazyLoad()
                _cnt -= 1
                _rec._deserialize(_r)
                self.append(_rec)

            _r.read_end(_oname)

        def _get_davs(self, dvc: mettle.lib.DavCache = None) -> int:
            """
            Cache the davs

            :param dvc:
            """
            return bLazyLoad._cache_davs(dvc)

