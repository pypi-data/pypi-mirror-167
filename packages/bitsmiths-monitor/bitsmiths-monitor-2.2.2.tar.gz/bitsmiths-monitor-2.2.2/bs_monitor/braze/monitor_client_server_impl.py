# This file was generated by mettle.genes.braze.GenPy3 [ver 2.2] on Fri Sep 16 12:08:12 2022
#

import datetime
import uuid
import mettle.braze
import mettle.lib

from .monitor_client_interface import MonitorClientInterface
from .monitor_server_interface import MonitorServerInterface

from bs_monitor.db.tables import tBatch
from bs_monitor.db.tables import oBatchWithLatestInst
from bs_monitor.db.tables import tBatchInst
from bs_monitor.db.tables import tBatchItem
from bs_monitor.db.tables import tJob
from bs_monitor.db.tables import tJobInst
from bs_monitor.db.tables import oJobInstSearch
from bs_monitor.db.tables import tJobInstMetric
from bs_monitor.db.tables import tMondate

from .blazy_load import bLazyLoad
from .bbatch_query import bBatchQuery
from .bbatch_inst_query import bBatchInstQuery
from .bjob_inst_query import bJobInstQuery

class MonitorClientServerImpl(MonitorClientInterface):
    """
    A direct client to server client interface implementation (wrapper).
    """
    __slots__ = ("_impl")

    def __init__(self, serverInterface):
        """
        Constructor.

        :param serverInterface: MonitorServerInterface, the implemented server interface object.
        """
        self._impl = serverInterface

    def batch_create(self,
                     rec: tBatch) -> tBatch:
        return self._impl.batch_create(rec)

    def batch_read(self,
                   batch_id: int,
                   batch_name: str) -> tBatch:
        return self._impl.batch_read(batch_id, batch_name)

    def batch_update(self,
                     rec: tBatch) -> tBatch:
        return self._impl.batch_update(rec)

    def batch_delete(self,
                     batch_id: int):
        self._impl.batch_delete(batch_id)

    def batch_list(self,
                   lazy_load: bLazyLoad,
                   query: bBatchQuery) -> tBatch.List:
        return self._impl.batch_list(lazy_load, query)

    def batch_lastest_inst_list(self,
                                lazy_load: bLazyLoad,
                                query: bBatchQuery) -> oBatchWithLatestInst.List:
        return self._impl.batch_lastest_inst_list(lazy_load, query)

    def batchinst_read(self,
                       batchinst_id: int) -> tBatchInst:
        return self._impl.batchinst_read(batchinst_id)

    def batchinst_list(self,
                       lazy_load: bLazyLoad,
                       query: bBatchInstQuery) -> tBatchInst.List:
        return self._impl.batchinst_list(lazy_load, query)

    def batchitem_create(self,
                         rec: tBatchItem) -> tBatchItem:
        return self._impl.batchitem_create(rec)

    def batchitem_read(self,
                       batchitem_id: int,
                       batch_id: int) -> tBatchItem:
        return self._impl.batchitem_read(batchitem_id, batch_id)

    def batchitem_update(self,
                         rec: tBatchItem) -> tBatchItem:
        return self._impl.batchitem_update(rec)

    def batchitem_shift(self,
                        batchitem_id: int,
                        batch_id: int,
                        shift_idx: int) -> tBatchItem:
        return self._impl.batchitem_shift(batchitem_id, batch_id, shift_idx)

    def batchitem_delete(self,
                         batchitem_id: int,
                         batch_id: int):
        self._impl.batchitem_delete(batchitem_id, batch_id)

    def batchitem_list(self,
                       batch_id: int) -> tBatchItem.List:
        return self._impl.batchitem_list(batch_id)

    def job_create(self,
                   rec: tJob) -> tJob:
        return self._impl.job_create(rec)

    def job_read(self,
                 job_id: int,
                 job_name: str) -> tJob:
        return self._impl.job_read(job_id, job_name)

    def job_update(self,
                   rec: tJob) -> tJob:
        return self._impl.job_update(rec)

    def job_delete(self,
                   job_id: int):
        self._impl.job_delete(job_id)

    def job_list(self,
                 lazy_load: bLazyLoad,
                 wc_job_name: str,
                 wc_group: str) -> tJob.List:
        return self._impl.job_list(lazy_load, wc_job_name, wc_group)

    def job_schedule(self,
                     job_id: int,
                     job_name: str,
                     run_date: datetime.datetime,
                     extra_args: str,
                     priority: int,
                     parent_id: int) -> tJobInst:
        return self._impl.job_schedule(job_id, job_name, run_date, extra_args, priority, parent_id)

    def jobinst_read(self,
                     jobinst_id: int) -> tJobInst:
        return self._impl.jobinst_read(jobinst_id)

    def jobinst_rerun(self,
                      jobinst_id: int,
                      force_rerun: bool) -> tJobInst:
        return self._impl.jobinst_rerun(jobinst_id, force_rerun)

    def jobinst_force_ok(self,
                         jobinst_id: int,
                         reason: str) -> tJobInst:
        return self._impl.jobinst_force_ok(jobinst_id, reason)

    def jobinst_stop(self,
                     jobinst_id: int,
                     reason: str):
        self._impl.jobinst_stop(jobinst_id, reason)

    def jobinst_list(self,
                     lazy_load: bLazyLoad,
                     query: bJobInstQuery) -> oJobInstSearch.List:
        return self._impl.jobinst_list(lazy_load, query)

    def jobinst_metrics(self,
                        lazy_load: bLazyLoad,
                        jobinst_id: int) -> tJobInstMetric.List:
        return self._impl.jobinst_metrics(lazy_load, jobinst_id)

    def mondate_create(self,
                       rec: tMondate) -> tMondate:
        return self._impl.mondate_create(rec)

    def mondate_read(self,
                     mondate_id: str) -> tMondate:
        return self._impl.mondate_read(mondate_id)

    def mondate_update(self,
                       rec: tMondate) -> tMondate:
        return self._impl.mondate_update(rec)

    def mondate_delete(self,
                       mondate_id: str):
        self._impl.mondate_delete(mondate_id)

    def mondate_list(self,
                     lazy_load: bLazyLoad,
                     wc_mondate_id: str) -> tMondate.List:
        return self._impl.mondate_list(lazy_load, wc_mondate_id)

    def mondate_increment(self,
                          mondate_id: str,
                          days_value: int) -> tMondate:
        return self._impl.mondate_increment(mondate_id, days_value)

    def mondate_set_value(self,
                          mondate_id: str,
                          value: datetime.date) -> tMondate:
        return self._impl.mondate_set_value(mondate_id, value)

    def purge_history(self,
                      from_date: datetime.date):
        self._impl.purge_history(from_date)

    def server_date_time(self) -> datetime.datetime:
        return self._impl.server_date_time()

