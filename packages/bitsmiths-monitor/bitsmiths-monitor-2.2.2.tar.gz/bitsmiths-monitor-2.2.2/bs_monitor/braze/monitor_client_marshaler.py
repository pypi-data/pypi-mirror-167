# This file was generated by mettle.genes.braze.GenPy3 [ver 2.2] on Fri Sep 16 12:08:12 2022
#

import datetime
import uuid
import mettle.braze
import mettle.lib

from mettle.braze.iclient_marshaler import IClientMarshaler
from .monitor_client_interface import MonitorClientInterface

from bs_monitor.db.tables import tBatch
from bs_monitor.db.tables import oBatchWithLatestInst
from bs_monitor.db.tables import tBatchInst
from bs_monitor.db.tables import tBatchItem
from bs_monitor.db.tables import tJob
from bs_monitor.db.tables import tJobInst
from bs_monitor.db.tables import oJobInstSearch
from bs_monitor.db.tables import tJobInstMetric
from bs_monitor.db.tables import tMondate

from .blazy_load import bLazyLoad
from .bbatch_query import bBatchQuery
from .bbatch_inst_query import bBatchInstQuery
from .bjob_inst_query import bJobInstQuery

class MonitorClientMarshaler(IClientMarshaler, MonitorClientInterface):
    __slots__ = ("_client")

    def __init__(self, client):
        """
        Constructor.

        :param client: braze client object.
        """
        self._client = client

    def _signature(self) -> str:
        """
        Gets the client signature.

        :return: the signature of this client.
        """
        return 'Monitor'

    def batch_create(self,
                     rec: tBatch) -> tBatch:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("batchCreate_IN")
        rec._serialize(_w, "rec")
        _w.write_end("batchCreate_IN")

        self._client.send(self, 'batchCreate', _i)
        _o = self._client.receive(self, 'batchCreate')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("batchCreate_OUT")
        _x = tBatch()
        _x._deserialize(_r, "returns")
        _r.read_end("batchCreate_OUT")

        return _x

    def batch_read(self,
                   batch_id: int,
                   batch_name: str) -> tBatch:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("batchRead_IN")
        _w.write_int64("batchId", batch_id)
        _w.write_string("batchName", batch_name)
        _w.write_end("batchRead_IN")

        self._client.send(self, 'batchRead', _i)
        _o = self._client.receive(self, 'batchRead')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("batchRead_OUT")
        _x = tBatch()
        _x._deserialize(_r, "returns")
        _r.read_end("batchRead_OUT")

        return _x

    def batch_update(self,
                     rec: tBatch) -> tBatch:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("batchUpdate_IN")
        rec._serialize(_w, "rec")
        _w.write_end("batchUpdate_IN")

        self._client.send(self, 'batchUpdate', _i)
        _o = self._client.receive(self, 'batchUpdate')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("batchUpdate_OUT")
        _x = tBatch()
        _x._deserialize(_r, "returns")
        _r.read_end("batchUpdate_OUT")

        return _x

    def batch_delete(self,
                     batch_id: int):
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("batchDelete_IN")
        _w.write_int64("batchId", batch_id)
        _w.write_end("batchDelete_IN")

        self._client.send(self, 'batchDelete', _i)
        _o = self._client.receive(self, 'batchDelete')

    def batch_list(self,
                   lazy_load: bLazyLoad,
                   query: bBatchQuery) -> tBatch.List:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("batchList_IN")
        lazy_load._serialize(_w, "lazyLoad")
        query._serialize(_w, "query")
        _w.write_end("batchList_IN")

        self._client.send(self, 'batchList', _i)
        _o = self._client.receive(self, 'batchList')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("batchList_OUT")
        _x = tBatch.List()
        _x._deserialize(_r, None)
        _r.read_end("batchList_OUT")

        return _x

    def batch_lastest_inst_list(self,
                                lazy_load: bLazyLoad,
                                query: bBatchQuery) -> oBatchWithLatestInst.List:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("batchLastestInstList_IN")
        lazy_load._serialize(_w, "lazyLoad")
        query._serialize(_w, "query")
        _w.write_end("batchLastestInstList_IN")

        self._client.send(self, 'batchLastestInstList', _i)
        _o = self._client.receive(self, 'batchLastestInstList')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("batchLastestInstList_OUT")
        _x = oBatchWithLatestInst.List()
        _x._deserialize(_r, None)
        _r.read_end("batchLastestInstList_OUT")

        return _x

    def batchinst_read(self,
                       batchinst_id: int) -> tBatchInst:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("batchinstRead_IN")
        _w.write_int64("batchinstId", batchinst_id)
        _w.write_end("batchinstRead_IN")

        self._client.send(self, 'batchinstRead', _i)
        _o = self._client.receive(self, 'batchinstRead')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("batchinstRead_OUT")
        _x = tBatchInst()
        _x._deserialize(_r, "returns")
        _r.read_end("batchinstRead_OUT")

        return _x

    def batchinst_list(self,
                       lazy_load: bLazyLoad,
                       query: bBatchInstQuery) -> tBatchInst.List:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("batchinstList_IN")
        lazy_load._serialize(_w, "lazyLoad")
        query._serialize(_w, "query")
        _w.write_end("batchinstList_IN")

        self._client.send(self, 'batchinstList', _i)
        _o = self._client.receive(self, 'batchinstList')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("batchinstList_OUT")
        _x = tBatchInst.List()
        _x._deserialize(_r, None)
        _r.read_end("batchinstList_OUT")

        return _x

    def batchitem_create(self,
                         rec: tBatchItem) -> tBatchItem:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("batchitemCreate_IN")
        rec._serialize(_w, "rec")
        _w.write_end("batchitemCreate_IN")

        self._client.send(self, 'batchitemCreate', _i)
        _o = self._client.receive(self, 'batchitemCreate')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("batchitemCreate_OUT")
        _x = tBatchItem()
        _x._deserialize(_r, "returns")
        _r.read_end("batchitemCreate_OUT")

        return _x

    def batchitem_read(self,
                       batchitem_id: int,
                       batch_id: int) -> tBatchItem:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("batchitemRead_IN")
        _w.write_int64("batchitemId", batchitem_id)
        _w.write_int64("batchId", batch_id)
        _w.write_end("batchitemRead_IN")

        self._client.send(self, 'batchitemRead', _i)
        _o = self._client.receive(self, 'batchitemRead')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("batchitemRead_OUT")
        _x = tBatchItem()
        _x._deserialize(_r, "returns")
        _r.read_end("batchitemRead_OUT")

        return _x

    def batchitem_update(self,
                         rec: tBatchItem) -> tBatchItem:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("batchitemUpdate_IN")
        rec._serialize(_w, "rec")
        _w.write_end("batchitemUpdate_IN")

        self._client.send(self, 'batchitemUpdate', _i)
        _o = self._client.receive(self, 'batchitemUpdate')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("batchitemUpdate_OUT")
        _x = tBatchItem()
        _x._deserialize(_r, "returns")
        _r.read_end("batchitemUpdate_OUT")

        return _x

    def batchitem_shift(self,
                        batchitem_id: int,
                        batch_id: int,
                        shift_idx: int) -> tBatchItem:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("batchitemShift_IN")
        _w.write_int64("batchitemId", batchitem_id)
        _w.write_int64("batchId", batch_id)
        _w.write_int64("shiftIdx", shift_idx)
        _w.write_end("batchitemShift_IN")

        self._client.send(self, 'batchitemShift', _i)
        _o = self._client.receive(self, 'batchitemShift')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("batchitemShift_OUT")
        _x = tBatchItem()
        _x._deserialize(_r, "returns")
        _r.read_end("batchitemShift_OUT")

        return _x

    def batchitem_delete(self,
                         batchitem_id: int,
                         batch_id: int):
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("batchitemDelete_IN")
        _w.write_int64("batchitemId", batchitem_id)
        _w.write_int64("batchId", batch_id)
        _w.write_end("batchitemDelete_IN")

        self._client.send(self, 'batchitemDelete', _i)
        _o = self._client.receive(self, 'batchitemDelete')

    def batchitem_list(self,
                       batch_id: int) -> tBatchItem.List:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("batchitemList_IN")
        _w.write_int64("batchId", batch_id)
        _w.write_end("batchitemList_IN")

        self._client.send(self, 'batchitemList', _i)
        _o = self._client.receive(self, 'batchitemList')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("batchitemList_OUT")
        _x = tBatchItem.List()
        _x._deserialize(_r, None)
        _r.read_end("batchitemList_OUT")

        return _x

    def job_create(self,
                   rec: tJob) -> tJob:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("jobCreate_IN")
        rec._serialize(_w, "rec")
        _w.write_end("jobCreate_IN")

        self._client.send(self, 'jobCreate', _i)
        _o = self._client.receive(self, 'jobCreate')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("jobCreate_OUT")
        _x = tJob()
        _x._deserialize(_r, "returns")
        _r.read_end("jobCreate_OUT")

        return _x

    def job_read(self,
                 job_id: int,
                 job_name: str) -> tJob:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("jobRead_IN")
        _w.write_int64("jobId", job_id)
        _w.write_string("jobName", job_name)
        _w.write_end("jobRead_IN")

        self._client.send(self, 'jobRead', _i)
        _o = self._client.receive(self, 'jobRead')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("jobRead_OUT")
        _x = tJob()
        _x._deserialize(_r, "returns")
        _r.read_end("jobRead_OUT")

        return _x

    def job_update(self,
                   rec: tJob) -> tJob:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("jobUpdate_IN")
        rec._serialize(_w, "rec")
        _w.write_end("jobUpdate_IN")

        self._client.send(self, 'jobUpdate', _i)
        _o = self._client.receive(self, 'jobUpdate')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("jobUpdate_OUT")
        _x = tJob()
        _x._deserialize(_r, "returns")
        _r.read_end("jobUpdate_OUT")

        return _x

    def job_delete(self,
                   job_id: int):
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("jobDelete_IN")
        _w.write_int64("jobId", job_id)
        _w.write_end("jobDelete_IN")

        self._client.send(self, 'jobDelete', _i)
        _o = self._client.receive(self, 'jobDelete')

    def job_list(self,
                 lazy_load: bLazyLoad,
                 wc_job_name: str,
                 wc_group: str) -> tJob.List:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("jobList_IN")
        lazy_load._serialize(_w, "lazyLoad")
        _w.write_string("wcJobName", wc_job_name)
        _w.write_string("wcGroup", wc_group)
        _w.write_end("jobList_IN")

        self._client.send(self, 'jobList', _i)
        _o = self._client.receive(self, 'jobList')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("jobList_OUT")
        _x = tJob.List()
        _x._deserialize(_r, None)
        _r.read_end("jobList_OUT")

        return _x

    def job_schedule(self,
                     job_id: int,
                     job_name: str,
                     run_date: datetime.datetime,
                     extra_args: str,
                     priority: int,
                     parent_id: int) -> tJobInst:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("jobSchedule_IN")
        _w.write_int64("jobId", job_id)
        _w.write_string("jobName", job_name)
        _w.write_datetime("runDate", run_date)
        _w.write_string("extraArgs", extra_args)
        _w.write_int32("priority", priority)
        _w.write_int64("parentId", parent_id)
        _w.write_end("jobSchedule_IN")

        self._client.send(self, 'jobSchedule', _i)
        _o = self._client.receive(self, 'jobSchedule')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("jobSchedule_OUT")
        _x = tJobInst()
        _x._deserialize(_r, "returns")
        _r.read_end("jobSchedule_OUT")

        return _x

    def jobinst_read(self,
                     jobinst_id: int) -> tJobInst:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("jobinstRead_IN")
        _w.write_int64("jobinstId", jobinst_id)
        _w.write_end("jobinstRead_IN")

        self._client.send(self, 'jobinstRead', _i)
        _o = self._client.receive(self, 'jobinstRead')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("jobinstRead_OUT")
        _x = tJobInst()
        _x._deserialize(_r, "returns")
        _r.read_end("jobinstRead_OUT")

        return _x

    def jobinst_rerun(self,
                      jobinst_id: int,
                      force_rerun: bool) -> tJobInst:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("jobinstRerun_IN")
        _w.write_int64("jobinstId", jobinst_id)
        _w.write_bool("forceRerun", force_rerun)
        _w.write_end("jobinstRerun_IN")

        self._client.send(self, 'jobinstRerun', _i)
        _o = self._client.receive(self, 'jobinstRerun')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("jobinstRerun_OUT")
        _x = tJobInst()
        _x._deserialize(_r, "returns")
        _r.read_end("jobinstRerun_OUT")

        return _x

    def jobinst_force_ok(self,
                         jobinst_id: int,
                         reason: str) -> tJobInst:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("jobinstForceOk_IN")
        _w.write_int64("jobinstId", jobinst_id)
        _w.write_string("reason", reason)
        _w.write_end("jobinstForceOk_IN")

        self._client.send(self, 'jobinstForceOk', _i)
        _o = self._client.receive(self, 'jobinstForceOk')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("jobinstForceOk_OUT")
        _x = tJobInst()
        _x._deserialize(_r, "returns")
        _r.read_end("jobinstForceOk_OUT")

        return _x

    def jobinst_stop(self,
                     jobinst_id: int,
                     reason: str):
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("jobinstStop_IN")
        _w.write_int64("jobinstId", jobinst_id)
        _w.write_string("reason", reason)
        _w.write_end("jobinstStop_IN")

        self._client.send(self, 'jobinstStop', _i)
        _o = self._client.receive(self, 'jobinstStop')

    def jobinst_list(self,
                     lazy_load: bLazyLoad,
                     query: bJobInstQuery) -> oJobInstSearch.List:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("jobinstList_IN")
        lazy_load._serialize(_w, "lazyLoad")
        query._serialize(_w, "query")
        _w.write_end("jobinstList_IN")

        self._client.send(self, 'jobinstList', _i)
        _o = self._client.receive(self, 'jobinstList')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("jobinstList_OUT")
        _x = oJobInstSearch.List()
        _x._deserialize(_r, None)
        _r.read_end("jobinstList_OUT")

        return _x

    def jobinst_metrics(self,
                        lazy_load: bLazyLoad,
                        jobinst_id: int) -> tJobInstMetric.List:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("jobinstMetrics_IN")
        lazy_load._serialize(_w, "lazyLoad")
        _w.write_int64("jobinstId", jobinst_id)
        _w.write_end("jobinstMetrics_IN")

        self._client.send(self, 'jobinstMetrics', _i)
        _o = self._client.receive(self, 'jobinstMetrics')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("jobinstMetrics_OUT")
        _x = tJobInstMetric.List()
        _x._deserialize(_r, None)
        _r.read_end("jobinstMetrics_OUT")

        return _x

    def mondate_create(self,
                       rec: tMondate) -> tMondate:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("mondateCreate_IN")
        rec._serialize(_w, "rec")
        _w.write_end("mondateCreate_IN")

        self._client.send(self, 'mondateCreate', _i)
        _o = self._client.receive(self, 'mondateCreate')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("mondateCreate_OUT")
        _x = tMondate()
        _x._deserialize(_r, "returns")
        _r.read_end("mondateCreate_OUT")

        return _x

    def mondate_read(self,
                     mondate_id: str) -> tMondate:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("mondateRead_IN")
        _w.write_string("mondateId", mondate_id)
        _w.write_end("mondateRead_IN")

        self._client.send(self, 'mondateRead', _i)
        _o = self._client.receive(self, 'mondateRead')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("mondateRead_OUT")
        _x = tMondate()
        _x._deserialize(_r, "returns")
        _r.read_end("mondateRead_OUT")

        return _x

    def mondate_update(self,
                       rec: tMondate) -> tMondate:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("mondateUpdate_IN")
        rec._serialize(_w, "rec")
        _w.write_end("mondateUpdate_IN")

        self._client.send(self, 'mondateUpdate', _i)
        _o = self._client.receive(self, 'mondateUpdate')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("mondateUpdate_OUT")
        _x = tMondate()
        _x._deserialize(_r, "returns")
        _r.read_end("mondateUpdate_OUT")

        return _x

    def mondate_delete(self,
                       mondate_id: str):
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("mondateDelete_IN")
        _w.write_string("mondateId", mondate_id)
        _w.write_end("mondateDelete_IN")

        self._client.send(self, 'mondateDelete', _i)
        _o = self._client.receive(self, 'mondateDelete')

    def mondate_list(self,
                     lazy_load: bLazyLoad,
                     wc_mondate_id: str) -> tMondate.List:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("mondateList_IN")
        lazy_load._serialize(_w, "lazyLoad")
        _w.write_string("wcMondateId", wc_mondate_id)
        _w.write_end("mondateList_IN")

        self._client.send(self, 'mondateList', _i)
        _o = self._client.receive(self, 'mondateList')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("mondateList_OUT")
        _x = tMondate.List()
        _x._deserialize(_r, None)
        _r.read_end("mondateList_OUT")

        return _x

    def mondate_increment(self,
                          mondate_id: str,
                          days_value: int) -> tMondate:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("mondateIncrement_IN")
        _w.write_string("mondateId", mondate_id)
        _w.write_int64("daysValue", days_value)
        _w.write_end("mondateIncrement_IN")

        self._client.send(self, 'mondateIncrement', _i)
        _o = self._client.receive(self, 'mondateIncrement')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("mondateIncrement_OUT")
        _x = tMondate()
        _x._deserialize(_r, "returns")
        _r.read_end("mondateIncrement_OUT")

        return _x

    def mondate_set_value(self,
                          mondate_id: str,
                          value: datetime.date) -> tMondate:
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None
        _r = None
        _x = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("mondateSetValue_IN")
        _w.write_string("mondateId", mondate_id)
        _w.write_date("value", value)
        _w.write_end("mondateSetValue_IN")

        self._client.send(self, 'mondateSetValue', _i)
        _o = self._client.receive(self, 'mondateSetValue')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("mondateSetValue_OUT")
        _x = tMondate()
        _x._deserialize(_r, "returns")
        _r.read_end("mondateSetValue_OUT")

        return _x

    def purge_history(self,
                      from_date: datetime.date):
        _i = self._client.get_transport().new_stream()
        _o = None
        _w = None

        _w = self._client.get_transport().new_writer(_i)
        _w.write_start("purgeHistory_IN")
        _w.write_date("fromDate", from_date)
        _w.write_end("purgeHistory_IN")

        self._client.send(self, 'purgeHistory', _i)
        _o = self._client.receive(self, 'purgeHistory')

    def server_date_time(self) -> datetime.datetime:
        _i = self._client.get_transport().new_stream()
        _o = None
        _r = None
        _x = None

        self._client.send(self, 'serverDateTime', _i)
        _o = self._client.receive(self, 'serverDateTime')

        _r = self._client.get_transport().new_reader(_o)
        _r.read_start("serverDateTime_OUT")
        _x = _r.read_datetime("return")
        _r.read_end("serverDateTime_OUT")

        return _x

