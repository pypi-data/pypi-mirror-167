# This file was generated by mettle.genes.braze.GenPy3 [ver 2.2] on Fri Sep 16 12:08:12 2022
#

import datetime
import uuid
import mettle.braze
import mettle.lib

from mettle.braze.iserver_interface import IServerInterface

from bs_monitor.db.tables import tBatch
from bs_monitor.db.tables import oBatchWithLatestInst
from bs_monitor.db.tables import tBatchInst
from bs_monitor.db.tables import tBatchItem
from bs_monitor.db.tables import tJob
from bs_monitor.db.tables import tJobInst
from bs_monitor.db.tables import oJobInstSearch
from bs_monitor.db.tables import tJobInstMetric
from bs_monitor.db.tables import tMondate

from .blazy_load import bLazyLoad
from .bbatch_query import bBatchQuery
from .bbatch_inst_query import bBatchInstQuery
from .bjob_inst_query import bJobInstQuery

class MonitorAsyncServerInterface(IServerInterface):

    async def batch_create(self,
                           rec: tBatch) -> tBatch:
        """
        Create a new batch

        :param rec: input - The record to create
        :return: The created record
        """
        pass

    async def batch_read(self,
                         batch_id: int,
                         batch_name: str) -> tBatch:
        """
        Reads a batch by identifier or name

        :param batch_id: input - The batch identifier
        :param batch_name: input - Optionally read on the batch name instead
        :return: The read record
        """
        pass

    async def batch_update(self,
                           rec: tBatch) -> tBatch:
        """
        Updates a batch record

        :param rec: input - The record to update
        :return: The updated record
        """
        pass

    async def batch_delete(self,
                           batch_id: int):
        """
        Delete a batch record, note this will fail if there are batch instances still tied to it

        :param batch_id: input - The batch identifier to delete
        """
        pass

    async def batch_list(self,
                         lazy_load: bLazyLoad,
                         query: bBatchQuery) -> tBatch.List:
        """
        List batch records by query parameters

        :param lazy_load: input - Opitonally provide lazy loading values
        :param query: input - The query critiera to filter the results
        :return: The list of matching batch records
        """
        pass

    async def batch_lastest_inst_list(self,
                                      lazy_load: bLazyLoad,
                                      query: bBatchQuery) -> oBatchWithLatestInst.List:
        """
        List batch record with their latest batch instance records by query parameters

        :param lazy_load: input - Opitonally provide lazy loading values
        :param query: input - The query critiera to filter the results
        :return: The list of matching batch records with their latest instance records
        """
        pass

    async def batchinst_read(self,
                             batchinst_id: int) -> tBatchInst:
        """
        Reads a batch instance record by identifier.

        :param batchinst_id: input - The batch instance identifier to read
        :return: The read record
        """
        pass

    async def batchinst_list(self,
                             lazy_load: bLazyLoad,
                             query: bBatchInstQuery) -> tBatchInst.List:
        """
        List batch instance records by query parameters

        :param lazy_load: input - Opitonally provide lazy loading values
        :param query: input - The query critiera to filter the results
        :return: The list of matching batch instance records
        """
        pass

    async def batchitem_create(self,
                               rec: tBatchItem) -> tBatchItem:
        """
        Create a new batch item, not other items will be shifted later if dupe identifiers are found

        :param rec: input - The record to create
        :return: The created batch item
        """
        pass

    async def batchitem_read(self,
                             batchitem_id: int,
                             batch_id: int) -> tBatchItem:
        """
        Reads a batch item by item id and batch id

        :param batchitem_id: input - The batchitem identifier
        :param batch_id: input - The batch identifier
        :return: The read record
        """
        pass

    async def batchitem_update(self,
                               rec: tBatchItem) -> tBatchItem:
        """
        Updates an item, note you obviously cannot change the position of a batch item here. Use the shift call instead for that

        :param rec: input - The record to update
        :return: The updated batch item
        """
        pass

    async def batchitem_shift(self,
                              batchitem_id: int,
                              batch_id: int,
                              shift_idx: int) -> tBatchItem:
        """
        Shifts and item from its position to the shifted position. Note this will update the items it is shifted by

        :param batchitem_id: input - The batchitem identifier
        :param batch_id: input - The batch identifier
        :param shift_idx: input - The number of position to shift. This can be negative or positive
        :return: The updated batch item
        """
        pass

    async def batchitem_delete(self,
                               batchitem_id: int,
                               batch_id: int):
        """
        Deletes a batch item by key

        :param batchitem_id: input - The batchitem identifier
        :param batch_id: input - The batch identifier
        """
        pass

    async def batchitem_list(self,
                             batch_id: int) -> tBatchItem.List:
        """
        List batch items for a batch

        :param batch_id: input - The batch identifier go get the items for
        :return: The list of batch items for a batch
        """
        pass

    async def job_create(self,
                         rec: tJob) -> tJob:
        """
        Create a new job

        :param rec: input - The record to create
        :return: The created record
        """
        pass

    async def job_read(self,
                       job_id: int,
                       job_name: str) -> tJob:
        """
        Reads a job by identifier

        :param job_id: input - The job identifier
        :param job_name: input - Optionally read on the job name instead
        :return: The read record
        """
        pass

    async def job_update(self,
                         rec: tJob) -> tJob:
        """
        Updates a job record

        :param rec: input - The record to update
        :return: The updated record
        """
        pass

    async def job_delete(self,
                         job_id: int):
        """
        Deletes a job record

        :param job_id: input - The job identifier to delete. Note that this will not cascade any related records
        """
        pass

    async def job_list(self,
                       lazy_load: bLazyLoad,
                       wc_job_name: str,
                       wc_group: str) -> tJob.List:
        """
        List all the jobs matching the input criteria

        :param lazy_load: input - Opitonally provide lazy loading values
        :param wc_job_name: input - Opitonally provide a wildcard job name to search on
        :param wc_group: input - Opitonally provide a wildcard group to search on
        :return: The list of matching records
        """
        pass

    async def job_schedule(self,
                           job_id: int,
                           job_name: str,
                           run_date: datetime.datetime,
                           extra_args: str,
                           priority: int,
                           parent_id: int) -> tJobInst:
        """
        Schedule a job to be run at the specified rundate, can use the job identifier or name

        :param job_id: input - The job identifier
        :param job_name: input - Optionally specify the job name to run
        :param run_date: input - The run date/time the job be scheduled for
        :param extra_args: input - Optionally add additional arguments to the job
        :param priority: input - Optionally set the priority. Leave zero for default
        :param parent_id: input - Optionally specify the parent identifier to depend on. Leave zero if not required
        :return: The job instance that was created
        """
        pass

    async def jobinst_read(self,
                           jobinst_id: int) -> tJobInst:
        """
        Read a single job instance

        :param jobinst_id: input - The job instance identifier
        :return: The job instance that was read
        """
        pass

    async def jobinst_rerun(self,
                            jobinst_id: int,
                            force_rerun: bool) -> tJobInst:
        """
        Rerun a job instance job if it has failed

        :param jobinst_id: input - The job instance identifier to be rerun
        :param force_rerun: input - If the job in complete state this will force a rerun
        :return: The job instance that was rerun
        """
        pass

    async def jobinst_force_ok(self,
                               jobinst_id: int,
                               reason: str) -> tJobInst:
        """
        Sets a job instance as force ok if it is currently in error state

        :param jobinst_id: input - The job instance identifier to be force ok
        :param reason: input - The reason the job is being force ok
        :return: The job instance that was forced ok
        """
        pass

    async def jobinst_stop(self,
                           jobinst_id: int,
                           reason: str):
        """
        Notifies the monitor to cancel a running job. The job must be running for this call to succeed.

        :param jobinst_id: input - The job instance identifier to be force ok
        :param reason: input - The reason the job is being cancelled
        """
        pass

    async def jobinst_list(self,
                           lazy_load: bLazyLoad,
                           query: bJobInstQuery) -> oJobInstSearch.List:
        """
        List job instances by a query parameters

        :param lazy_load: input - Opitonally provide lazy loading values
        :param query: input - The query critiera to filter the results
        :return: The list of matching job instance records
        """
        pass

    async def jobinst_metrics(self,
                              lazy_load: bLazyLoad,
                              jobinst_id: int) -> tJobInstMetric.List:
        """
        List all the metrics for a job instance

        :param lazy_load: input - Opitonally provide lazy loading values
        :param jobinst_id: input - The job instance identifier to get the metrics for
        :return: The job instance metric records.
        """
        pass

    async def mondate_create(self,
                             rec: tMondate) -> tMondate:
        """
        Create a new monitor date

        :param rec: input - The record to create
        :return: The created record
        """
        pass

    async def mondate_read(self,
                           mondate_id: str) -> tMondate:
        """
        Reads a monitor date by identifier

        :param mondate_id: input - The monitor date identifier
        :return: The read record
        """
        pass

    async def mondate_update(self,
                             rec: tMondate) -> tMondate:
        """
        Updates a monitor date record

        :param rec: input - The record to update
        :return: The updated record
        """
        pass

    async def mondate_delete(self,
                             mondate_id: str):
        """
        Deletes a monitor date record

        :param mondate_id: input - The monitor date identifier to delete
        """
        pass

    async def mondate_list(self,
                           lazy_load: bLazyLoad,
                           wc_mondate_id: str) -> tMondate.List:
        """
        List all the monitor dates matching the input criteria

        :param lazy_load: input - Opitonally provide lazy loading values
        :param wc_mondate_id: input - Opitonally provide a wildcard identifier to search on
        :return: The list of matching records
        """
        pass

    async def mondate_increment(self,
                                mondate_id: str,
                                days_value: int) -> tMondate:
        """
        Increment the value of the monitor day by the days value

        :param mondate_id: input - The monitor date identifier
        :param days_value: input - The number of days to increment the date by (can be negative)
        :return: The updated record
        """
        pass

    async def mondate_set_value(self,
                                mondate_id: str,
                                value: datetime.date) -> tMondate:
        """
        Sets the monitor date value

        :param mondate_id: input - The monitor date identifier
        :param value: input - The value to set the monitor date to
        :return: The updated record
        """
        pass

    async def purge_history(self,
                            from_date: datetime.date):
        """
        This purges all history job and batch instance history. Be careful, this cannot be undone. The
purpose of this method is to remove the job running history for jobs that ran more than
X time ago. Typically I like to purge job history that is older than 3 years as it really is no
long relevent.  Also note this will only purge Completed and Forced OK jobs. These are to two
states a job has to finalize in. Jobs in Error state should not be ignore and always be dealt
with


        :param from_date: input - Purge data before this date and time
        """
        pass

    async def server_date_time(self) -> datetime.datetime:
        """
        Gets the server date & time

        :return: datetime.datetime
        """
        pass

