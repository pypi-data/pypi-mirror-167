# This file was generated by mettle.genes.braze.GenPy3 [ver 2.2] on Fri Sep 16 12:08:12 2022
#

import datetime
import uuid
import mettle.braze
import mettle.lib

from mettle.io.iserializable import ISerializable

class bBatchQuery(ISerializable):
    __slots__ = ("batch_id", "name", "status", "group")

    def __init__(self,
                 batch_id: mettle.braze.Int64List = None,
                 name: str = '',
                 status: mettle.braze.CharList = None,
                 group: str = ''):
        """
        Constructor.

        :param batch_id: Limit query to a list of batch identifiers
        :param name: Limit query to the batch name. This can be a wild card
        :param status: Limit query to a status list
        :param group: Limit query to a group. This can be a wild card
        """
        self.batch_id = mettle.braze.Int64List() if batch_id is None else batch_id
        self.name = name
        self.status = mettle.braze.CharList() if status is None else status
        self.group = group

    def clear(self):
        self.batch_id.clear()
        self.name = ''
        self.status.clear()
        self.group = ''

    def _name(self) -> str:
        """
        Get the struct name.

        :return: Name of the struct
        """
        return 'bBatchQuery'

    def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
        """
        Serialize this struct.

        :param _w:
        :param _oname:
        """
        if not _oname:
            _oname = self._name()

        _w.write_start(_oname)
        self.batch_id._serialize(_w, "batchId")
        _w.write_string("name", self.name)
        self.status._serialize(_w, "status")
        _w.write_string("group", self.group)
        _w.write_end(_oname)

    def _deserialize(self, _r: mettle.io.IReader, _oname: str = None) -> int:
        """
        Deserialize this struct.

        :param _r:
        :param _oname:
        """
        if _oname == None:
            _oname = self._name()

        _r.read_start(_oname)
        self.batch_id._deserialize(_r, "batchId")
        self.name = _r.read_string("name")
        self.status._deserialize(_r, "status")
        self.group = _r.read_string("group")
        _r.read_end(_oname)

    @staticmethod
    def _cache_davs(dvc: mettle.lib.DavCache = None):
        """
        Cache the DAV into the dav cache (or create one) and return it.

        :param dvc: Target cache, if None a new one is created and returned.
        """
        if not dvc:
            dvc = mettle.lib.DavCache()

        return dvc

    def _get_davs(self, dvc=None):
        return self._cache_davs(dvc)

    def __repr__(self) -> str:
        return '<bBatchQuery [batch_id:%r, name:%.32s, status:%r, group:%.32s]>' % (
            self.batch_id, self.name, self.status, self.group)

    # List class
    class List(list, ISerializable):

        def _name(self) -> str:
            """
            Get list name
            """
            return 'bBatchQuery.List'

        def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
            """
            Serialize the list

            :param _w:
            :param _oname:
            """
            if _oname == None:
                _oname = self._name()

            _w.write_start_list(_oname, len(self))

            for _rec in self:
                _rec._serialize(_w)

            _w.write_end(_oname)

        def _deserialize(self, _r: mettle.io.IReader, _oname: str = None) -> int:
            """
            Deserialize the list

            :param _r:
            :param _oname:
            """
            if _oname == None:
                  _oname = self._name()

            _cnt = _r.read_start_list(_oname)

            while _cnt >= 1:
                _rec  = bBatchQuery()
                _cnt -= 1
                _rec._deserialize(_r)
                self.append(_rec)

            _r.read_end(_oname)

        def _get_davs(self, dvc: mettle.lib.DavCache = None) -> int:
            """
            Cache the davs

            :param dvc:
            """
            return bBatchQuery._cache_davs(dvc)

