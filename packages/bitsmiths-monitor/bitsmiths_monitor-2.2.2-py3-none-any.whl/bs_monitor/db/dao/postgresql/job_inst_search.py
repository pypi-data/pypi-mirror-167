# This file was generated by mettle.genes.db.GenPy3 [ver 2.2] on Fri Sep 16 12:08:12 2022
#  Target Database = postgresql
#
import copy
import datetime
import uuid
import time
import mettle.lib
import mettle.io
import mettle.db

from bs_monitor.db.tables.ijob_inst_search import iJobInstSearch
from bs_monitor.db.tables.job_inst import tJobInst
from bs_monitor.db.tables.ojob_inst_search import oJobInstSearch

class dJobInstSearch:
    __slots__ = ("_dbcon", "_dbstmnt", "irec", "orec")

    def __init__(self, dbcon: mettle.db.IConnect):
        """
        Constructor.

        :param dbcon: Mettle database connection object.
        """
        self._dbcon   = dbcon
        self._dbstmnt = None
        self.irec     = iJobInstSearch()
        self.orec     = oJobInstSearch()

    def __enter__(self):
        """
        With statement enter.
        """
        return self

    def __exit__(self, type, value, traceback):
        """
        With statement exit.
        """
        self._destroy()

    def _destroy(self):
        if self._dbstmnt:
            self._dbstmnt.destroy()
            self._dbstmnt = None

    def exec_deft(self,
                  date_from: datetime.datetime,
                  date_to: datetime.datetime,
                  criteria: str,
                  limoff: str) -> "dJobInstSearch":
        """
        Execute the query by setting all the inputs.

        :param date_from: datetime.datetime
        :param date_to: datetime.datetime
        :param criteria: str
        :param limoff: str
        :return: Self for convenience.
        """
        self.irec.date_from = date_from
        self.irec.date_to = date_to
        self.irec.criteria = criteria
        self.irec.limoff = limoff

        return self.exec()

    def exec(self, irec: iJobInstSearch = None) -> "dJobInstSearch":
        """
        Execute the query, optionally passing in the input rec.

        :param irec:
        :return: Self for convenience.
        """
        if irec:
            self.irec._copy_from(irec)

        self._destroy()

        self._dbstmnt = self._dbcon.statement("JobInstSearch", self._dbcon.STMNT_TYPE_READ)

        self._dbstmnt.sql("""select
  i.*,
  j.id,
  j.name,
  b.id,
  b.name,
  b.cycle,
  b.run_interval,
  b.run_date,
  bi.id,
  bi.run_date,
  coalesce(bi.status, 'N')
from
  monitor.jobinst    i
     join
  monitor.job        j
     on j.id = i.job_id
     left join
  monitor.batchinst  bi
     on bi.id = i.batchinst_id
     left join
  monitor.batch b
     on b.id = bi.batch_id
where
  (cast(:dateFrom as timestamp) is null or i.process_date >= :dateFrom) and
  (cast(:dateTo as timestamp)   is null or i.process_date <= :dateTo)
  [criteria]
order by
  i.id desc
[limoff]""")

        self._dbstmnt.dynamic("[criteria]", self.irec.criteria)
        self._dbstmnt.dynamic("[limoff]", self.irec.limoff)

        self._dbstmnt.bind_in("dateFrom", self.irec.date_from, datetime.datetime)
        self._dbstmnt.bind_in("dateTo", self.irec.date_to, datetime.datetime)

        self._dbstmnt.bind_out("inst_rec_id", int, 8)
        self._dbstmnt.bind_out("inst_rec_parent_id", int, 8)
        self._dbstmnt.bind_out("inst_rec_job_id", int, 8)
        self._dbstmnt.bind_out("inst_rec_batchinst_id", int, 8)
        self._dbstmnt.bind_out("inst_rec_process_date", datetime.datetime)
        self._dbstmnt.bind_out("inst_rec_priority", int, 4)
        self._dbstmnt.bind_out("inst_rec_status", str, 1)
        self._dbstmnt.bind_out("inst_rec_extra_args", str, 256)
        self._dbstmnt.bind_out("inst_rec_group_job", str, 128)
        self._dbstmnt.bind_out("inst_rec_group_batch", str, 128)
        self._dbstmnt.bind_out("inst_rec_stamp_by", str, 128)
        self._dbstmnt.bind_out("inst_rec_stamp_tm", datetime.datetime)
        self._dbstmnt.bind_out("jobId", int, 8)
        self._dbstmnt.bind_out("jobName", str)
        self._dbstmnt.bind_out("batchId", int, 4)
        self._dbstmnt.bind_out("batchName", str)
        self._dbstmnt.bind_out("batchCycle", str)
        self._dbstmnt.bind_out("batchRunInterval", int, 4)
        self._dbstmnt.bind_out("batchRunDate", datetime.datetime)
        self._dbstmnt.bind_out("batchinstId", int, 8)
        self._dbstmnt.bind_out("batchinstRunDate", datetime.datetime)
        self._dbstmnt.bind_out("batchinstStatus", str, 1)

        self._dbcon.execute(self._dbstmnt)

        if irec:
            irec._copy_from(self.irec)

        return self

    def fetch(self, must_exist: bool = False) -> bool:
        """
        Fetches the next row from the executed query.

        :param must_exist:
        :return: True if a row was fetched, else False.
        """
        if not self._dbcon.fetch(self._dbstmnt):
            if must_exist:
                raise mettle.lib.xMettle(f"Record not found: [table:JobInst, proc:Search, row:{self.irec}]", err_code=mettle.lib.xMettle.eCode.DBNotFound)
            return False

        self.orec.inst_rec.id = self._dbstmnt.result[0]
        self.orec.inst_rec.parent_id = self._dbstmnt.result[1]
        self.orec.inst_rec.job_id = self._dbstmnt.result[2]
        self.orec.inst_rec.batchinst_id = self._dbstmnt.result[3]
        self.orec.inst_rec.process_date = self._dbstmnt.result[4]
        self.orec.inst_rec.priority = self._dbstmnt.result[5]
        self.orec.inst_rec.status = self._dbstmnt.result[6]
        self.orec.inst_rec.extra_args = self._dbstmnt.result[7]
        self.orec.inst_rec.group_job = self._dbstmnt.result[8]
        self.orec.inst_rec.group_batch = self._dbstmnt.result[9]
        self.orec.inst_rec.stamp_by = self._dbstmnt.result[10]
        self.orec.inst_rec.stamp_tm = self._dbstmnt.result[11]
        self.orec.job_id = self._dbstmnt.result[12]
        self.orec.job_name = self._dbstmnt.result[13]
        self.orec.batch_id = self._dbstmnt.result[14]
        self.orec.batch_name = self._dbstmnt.result[15]
        self.orec.batch_cycle = self._dbstmnt.result[16]
        self.orec.batch_run_interval = self._dbstmnt.result[17]
        self.orec.batch_run_date = self._dbstmnt.result[18]
        self.orec.batchinst_id = self._dbstmnt.result[19]
        self.orec.batchinst_run_date = self._dbstmnt.result[20]
        self.orec.batchinst_status = self._dbstmnt.result[21]

        return True

    def fetch_all(self, out_list: oJobInstSearch.List, clear_list: bool = True) -> int:
        """
        Fetch all the rows into the specified list and return the list count.

        :param out_list:
        :param clear_list:
        :return: Number of rows fetched.
        """
        if clear_list:
            out_list.clear()

        while self.fetch():
            out_list.append(copy.deepcopy(self.orec))

        return len(out_list)

