# This file was generated by mettle.genes.db.GenPy3 [ver 2.2] on Fri Sep 16 12:08:12 2022
#  Target Database = postgresql
#
import copy
import datetime
import uuid
import time
import mettle.lib
import mettle.io
import mettle.db

from bs_monitor.db.tables.ibatch_inst_purge import iBatchInstPurge

class dBatchInstPurge:
    __slots__ = ("_dbcon", "_dbstmnt", "irec")

    def __init__(self, dbcon: mettle.db.IAConnect):
        """
        Constructor.

        :param dbcon: Mettle database connection object.
        """
        self._dbcon   = dbcon
        self._dbstmnt = None
        self.irec     = iBatchInstPurge()

    async def __aenter__(self):
        """
        With statement enter.
        """
        return self

    async def __aexit__(self, type, value, traceback):
        """
        With statement exit.
        """
        await self._destroy()

    async def _destroy(self):
        if self._dbstmnt:
            await self._dbstmnt.destroy()
            self._dbstmnt = None

    async def exec_deft(self,
                        value_date: datetime.date) -> "dBatchInstPurge":
        """
        Execute the query by setting all the inputs.

        :param value_date: datetime.date
        :return: Self for convenience.
        """
        self.irec.value_date = value_date

        return await self.exec()

    async def exec(self, irec: iBatchInstPurge = None) -> "dBatchInstPurge":
        """
        Execute the query, optionally passing in the input rec.

        :param irec:
        :return: Self for convenience.
        """
        if irec:
            self.irec._copy_from(irec)

        await self._destroy()

        self._dbstmnt = await self._dbcon.statement("BatchInstPurge", self._dbcon.STMNT_TYPE_CUD)

        self._dbstmnt.sql("""delete from
  monitor.batchinst
where
  cast(run_date as date) < :valueDate""")

        self._dbstmnt.bind_in("valueDate", self.irec.value_date, datetime.date)

        await self._dbcon.execute(self._dbstmnt)

        if irec:
            irec._copy_from(self.irec)

        return self

