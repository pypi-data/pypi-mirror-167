# This file was generated by mettle.genes.db.GenPy3 [ver 2.2] on Fri Sep 16 12:08:12 2022
#  Target Database = postgresql
#
import copy
import datetime
import uuid
import time
import mettle.lib
import mettle.io
import mettle.db

from bs_monitor.db.tables.batch import tBatch

class dBatchInsert:
    __slots__ = ("_dbcon", "_dbstmnt", "irec")

    def __init__(self, dbcon: mettle.db.IAConnect):
        """
        Constructor.

        :param dbcon: Mettle database connection object.
        """
        self._dbcon   = dbcon
        self._dbstmnt = None
        self.irec     = tBatch()

    async def __aenter__(self):
        """
        With statement enter.
        """
        return self

    async def __aexit__(self, type, value, traceback):
        """
        With statement exit.
        """
        await self._destroy()

    async def _destroy(self):
        if self._dbstmnt:
            await self._dbstmnt.destroy()
            self._dbstmnt = None

    async def exec_deft(self,
                        id: int,
                        parent_id: int,
                        name: str,
                        group_id: str,
                        status: str,
                        cycle: str,
                        run_date: datetime.datetime,
                        run_interval: int,
                        run_time: str,
                        ext_data: dict,
                        stamp_by: str,
                        stamp_tm: datetime.datetime) -> "dBatchInsert":
        """
        Execute the query by setting all the inputs.

        :param id: int
        :param parent_id: int
        :param name: str
        :param group_id: str
        :param status: str
        :param cycle: str
        :param run_date: datetime.datetime
        :param run_interval: int
        :param run_time: str
        :param ext_data: dict
        :param stamp_by: str
        :param stamp_tm: datetime.datetime
        :return: Self for convenience.
        """
        self.irec.id = id
        self.irec.parent_id = parent_id
        self.irec.name = name
        self.irec.group_id = group_id
        self.irec.status = status
        self.irec.cycle = cycle
        self.irec.run_date = run_date
        self.irec.run_interval = run_interval
        self.irec.run_time = run_time
        self.irec.ext_data = ext_data
        self.irec.stamp_by = stamp_by
        self.irec.stamp_tm = stamp_tm

        return await self.exec()

    async def exec(self, irec: tBatch = None) -> "dBatchInsert":
        """
        Execute the query, optionally passing in the input rec.

        :param irec:
        :return: Self for convenience.
        """
        if irec:
            self.irec._copy_from(irec)

        await self._destroy()

        self._dbstmnt = await self._dbcon.statement("BatchInsert", self._dbcon.STMNT_TYPE_CUD)

        self._dbstmnt.sql("""insert into monitor.Batch (
  parent_id,
  name,
  group_id,
  status,
  cycle,
  run_date,
  run_interval,
  run_time,
  ext_data,
  stamp_by,
  stamp_tm
) values (
  :parent_id,
  :name,
  :group_id,
  :status,
  :cycle,
  :run_date,
  :run_interval,
  :run_time,
  :ext_data,
  :stamp_by,
  :stamp_tm
)""")

        self.irec.stamp_tm = await self._dbcon.get_timestamp()

        self._dbstmnt.bind_in("parent_id", self.irec.parent_id, int, 8)
        self._dbstmnt.bind_in("name", self.irec.name, str, 256)
        self._dbstmnt.bind_in("group_id", self.irec.group_id, str, 128)
        self._dbstmnt.bind_in("status", self.irec.status, str, 1)
        self._dbstmnt.bind_in("cycle", self.irec.cycle, str, 1)
        self._dbstmnt.bind_in("run_date", self.irec.run_date, datetime.datetime)
        self._dbstmnt.bind_in("run_interval", self.irec.run_interval, int, 4)
        self._dbstmnt.bind_in("run_time", self.irec.run_time, str, 6)
        self._dbstmnt.bind_in("ext_data", self.irec.ext_data, dict)
        self._dbstmnt.bind_in("stamp_by", self.irec.stamp_by, str, 128)
        self._dbstmnt.bind_in("stamp_tm", self.irec.stamp_tm, datetime.datetime)

        await self._dbcon.execute(self._dbstmnt)

        self.irec.id = await self._dbcon.post_get_sequence(self._dbstmnt, "monitor.Batch", "id", 8)

        if irec:
            irec._copy_from(self.irec)

        return self

