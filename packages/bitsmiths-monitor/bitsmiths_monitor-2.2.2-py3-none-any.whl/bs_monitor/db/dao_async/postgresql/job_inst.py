# This file was generated by mettle.genes.db.GenPy3 [ver 2.2] on Fri Sep 16 12:08:12 2022
#  Target Database = postgresql
#
import asyncio
import copy
import datetime
import uuid
import time
import mettle.lib
import mettle.io
import mettle.db

from bs_monitor.db.tables.job_inst import tJobInst
from bs_monitor.db.tables.job_inst_key import tJobInstKey

from .job_inst_lock_one import dJobInstLockOne
from .job_inst_select_one import dJobInstSelectOne
from .job_inst_update import dJobInstUpdate
from .job_inst_insert import dJobInstInsert
from .job_inst_delete_one import dJobInstDeleteOne

class dJobInst:
    __slots__ = ("_dbcon", "rec")

    def __init__(self, dbcon: mettle.db.IAConnect):
        """
        Constructor.

        :param dbcon: Mettle database connection object.
        """
        self.rec    = tJobInst()
        self._dbcon = dbcon

    def __enter__(self):
        """
        DAO enter.
        """
        return self

    def __exit__(self, type, value, traceback):
        """
        DAO exit.
        """
        pass

    async def lock_one(self, _lock4update: mettle.db.DBLock, _expected: bool = True) -> bool:
        """
        Lock and select the record.

        :param _lock4update: The db lock object to use.
        :param _expected: If set to false, will not raise if record is not found.
        :return: True if selected, False if not found and _expected is set to False
        """
        _key = tJobInstKey()

        self.rec._write_key(_key)

        return await self.lock_one_by_key(_key, _lock4update, _expected)

    async def lock_one_with(self, _rec: tJobInst, _lock4update: mettle.db.DBLock, _expected: bool = True) -> bool:
        """
        Lock and select the record using a record.

        :param _rec: The table rec to select with and into.
        :param _lock4update: The db lock object to use.
        :param _expected: If set to false, will not raise if record is not found.
        :return: True if selected, False if not found and _expected is set to False
        """
        _key = tJobInstKey()
        _rec._write_key(_key)

        await self.lock_one_by_key(_key, _lock4update, _expected)
        _rec._copy_from(self.rec)
        return True

    async def lock_one_deft(self,
                            id: int,
                            _lock4update: mettle.db.DBLock,
                            _expected: bool = True) -> bool:
        """
        Attempt to lock and select the record by it's primary key columns.

        :param id: int
        :param _lock4update:  The db lock object to use. 
        :param _expected: bool
        """
        _key = tJobInstKey()

        _key.id = id

        return await self.lock_one_by_key(_key, _lock4update, _expected)

    async def lock_one_by_key(self, _key: tJobInstKey, _lock4update: mettle.db.DBLock, _expected: bool = True) -> bool:
        """
        Attempt to lock and select the record with it's primary key.

        :param _key: Primary key of the table record.
        :param _lock4update: The db lock object to use.
        :param _expected: If set to false, will not raise if record is not found.
        :return: True if selected, False if not found and _expected is set to False
        """
        async with dJobInstLockOne(self._dbcon) as _qry:
            _dex = _lock4update.retrys - 1 if _lock4update.retrys > 0 else 0

            while _dex >= 0:
                try:
                    await _qry.exec(_key)
                    if not await _qry.fetch():
                        if not _expected:
                            return False

                        raise mettle.lib.xMettle(f"Lock not found: [table:dJobInst, row:{_key}]", err_code=mettle.lib.xMettle.eCode.DBNotFound)

                    break
                except mettle.lib.xMettle as _x:
                    if _x.get_error_code() != mettle.lib.xMettle.eCode.DBLockNoWaitFailed:
                        raise _x

                    if _dex == 0:
                        raise mettle.lib.xMettle("Could not lock JobInst record after %d attempt(s) at %d mili second intervals!" % (
_lock4update.retrys, _lock4update.mili_seconds), err_code = mettle.lib.xMettle.eCode.DBLockNoWaitFailed)

                    if _lock4update.mili_seconds > 0:
                        await asyncio.sleep(_lock4update.mili_seconds * 0.001)
                _dex -= 1

            self.rec = _qry.orec

            return True

    async def try_select_one(self) -> bool:
        """
        Attempt to select the record.

        :return: True if the record was found.
        """
        _key = tJobInstKey()

        self.rec._write_key(_key)

        return await self.try_select_one_by_key(_key)

    async def try_select_one_with(self, _rec: tJobInst) -> bool:
        """
        Attempt to select the record using a table rec.

        :param _rec: The table rec to select with and into.
        :return: True if the row as selectd.
        """
        _key = tJobInstKey()
        _rec._write_key(_key)

        if not await self.try_select_one_by_key(_key):
            return False

        _rec._copy_from(self.rec)

        return True

    async def try_select_one_deft(self,
                                  id: int) -> bool:
        """
        Attempt to select the record by it's primary key columns.

        :param id: int
        :return: True if the row as selectd.
        """
        _key = tJobInstKey()

        _key.id = id

        return await self.try_select_one_by_key(_key)

    async def try_select_one_by_key(self, _key: tJobInstKey) -> bool:
        """
        Attempt to select the record with it's primary key.

        :param _key: Primary key of the table record.
        :returns: True if row was selected.
        """
        async with dJobInstSelectOne(self._dbcon) as _qry:
            await _qry.exec(_key)
            if not await _qry.fetch():
                return False

            self.rec = _qry.orec

        return True

    async def select_one(self) -> "dJobInst":
        """
        Selects the record, raises and error if it does not exist.

        :return: Self for convenience.
        """
        if not await self.try_select_one():
            raise mettle.lib.xMettle(f"Not found: [table:dJobInst, row:{self.rec}]", err_code=mettle.lib.xMettle.eCode.DBNotFound)

        return self

    async def select_one_with(self, _rec: tJobInst) -> "dJobInst":
        """
        Attempt to select the record with the table record.

        :param _rec: Table record.
        :returns: Self for convenience.
        """
        if not await self.try_select_one_with(_rec):
            raise mettle.lib.xMettle("SelectOne failed to return a record (dJobInst)")

        return self

    async def select_one_deft(self,
                              id: int) -> "dJobInst":
        """
        Selects the record by its primary key columns, raises and error if it does not exist.

        :param id: int
        """
        _key = tJobInstKey()

        _key.id = id

        if not await self.try_select_one_by_key(_key):
            raise mettle.lib.xMettle(f"Not found: [table:dJobInst, row:{_key}]", err_code=mettle.lib.xMettle.eCode.DBNotFound)

        return self

    async def select_one_by_key(self, _key: tJobInstKey) -> "dJobInst":
        """
        Attempt to select the record with it's primary key.

        :param _key: Primary key of the table record.
        :return: Self for convenience.
        """
        if not await self.try_select_one_by_key(_key):
            raise mettle.lib.xMettle(f"Not found: [table:dJobInst, row:{self.irec}]", xMettle.eCode.DBNotFound)

        return self

    async def update_deft(self,
                          id: int,
                          parent_id: int,
                          job_id: int,
                          batchinst_id: int,
                          process_date: datetime.datetime,
                          priority: int,
                          status: str,
                          extra_args: str,
                          group_job: str,
                          group_batch: str,
                          stamp_by: str):
        """
        Update the record by setting all column values.

        :param id: int
        :param parent_id: int
        :param job_id: int
        :param batchinst_id: int
        :param process_date: datetime.datetime
        :param priority: int
        :param status: str
        :param extra_args: str
        :param group_job: str
        :param group_batch: str
        :param stamp_by: str
        :param stamp_tm: datetime.datetime
        """
        self.rec.id = id
        self.rec.parent_id = parent_id
        self.rec.job_id = job_id
        self.rec.batchinst_id = batchinst_id
        self.rec.process_date = process_date
        self.rec.priority = priority
        self.rec.status = status
        self.rec.extra_args = extra_args
        self.rec.group_job = group_job
        self.rec.group_batch = group_batch
        self.rec.stamp_by = stamp_by

        await self.update()

    async def update(self, irec: tJobInst = None):
        """
        Update the record in the database with the record or irec if it is not None.

        :param irec: If not None use this record to update the database.
        """
        if irec:
            self.rec._copy_from(irec)

        async with dJobInstUpdate(self._dbcon) as _qry:
            await _qry.exec(self.rec)

        if irec:
            irec._copy_from(self.rec)

    async def insert_deft(self,
                          parent_id: int,
                          job_id: int,
                          batchinst_id: int,
                          process_date: datetime.datetime,
                          priority: int,
                          status: str,
                          extra_args: str,
                          group_job: str,
                          group_batch: str,
                          stamp_by: str):
        """
        Insert the record setting all column values.

        :param id: int
        :param parent_id: int
        :param job_id: int
        :param batchinst_id: int
        :param process_date: datetime.datetime
        :param priority: int
        :param status: str
        :param extra_args: str
        :param group_job: str
        :param group_batch: str
        :param stamp_by: str
        :param stamp_tm: datetime.datetime
        """
        self.rec.parent_id = parent_id
        self.rec.job_id = job_id
        self.rec.batchinst_id = batchinst_id
        self.rec.process_date = process_date
        self.rec.priority = priority
        self.rec.status = status
        self.rec.extra_args = extra_args
        self.rec.group_job = group_job
        self.rec.group_batch = group_batch
        self.rec.stamp_by = stamp_by

        await self.insert()

    async def insert(self, irec: tJobInst = None):
        """
        Insert the record in the database with the record or irec if it is not None.

        :param irec: If not None use this record to insert into the database.
        """
        if irec:
            self.rec._copy_from(irec)

        async with dJobInstInsert(self._dbcon) as _qry:
            await _qry.exec(self.rec)

        if irec:
            irec._copy_from(self.rec)

    async def delete_one_deft(self,
                              id: int):
        """
        Delete one record by it's primary key columns.

        :param id: int
        """
        _key = tJobInstKey()

        _key.id = id

        await self.delete_one(_key)

    async def delete_one(self, irec: tJobInstKey = None):
        """
        Delete the record by its primary key or irec if it is not None.

        :param irec: If not None use this record to delete record.
        """
        _key = tJobInstKey()

        if irec:
            _key._copy_from(irec)
        else:
            self.rec._write_key(_key)

        async with dJobInstDeleteOne(self._dbcon) as _qry:
            await _qry.exec(_key)

