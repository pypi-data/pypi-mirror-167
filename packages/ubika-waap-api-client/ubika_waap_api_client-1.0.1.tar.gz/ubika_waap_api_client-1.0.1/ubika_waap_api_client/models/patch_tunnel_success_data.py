# coding: utf-8

"""
    UBIKA WAAP Gateway and Cloud API

    The UBIKA's WAAP management API provides a REST/JSON programming interface. It allows automation and scripting of WAAP administration tasks, such as management of reverse proxies and tunnels. The API documentation is shipped with the product itself. Once the product installed, you can access the documentation on the following URL https://ManagementWAAP:3001/api/v1/doc/  # noqa: E501

    The version of the OpenAPI document: 1.0.9
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubika_waap_api_client.configuration import Configuration


class PatchTunnelSuccessData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uid': 'str',
        'name': 'str',
        'type': 'str',
        'network': 'PatchTunnelSuccessDataNetwork',
        'workflow': 'CreateApplianceSysctlProfile',
        'workflow_parameters': 'list[object]',
        'reverse_proxy': 'CreateApplianceSysctlProfile',
        'advanced': 'CreateTunnelAdvanced',
        't_update': 'float'
    }

    attribute_map = {
        'uid': 'uid',
        'name': 'name',
        'type': 'type',
        'network': 'network',
        'workflow': 'workflow',
        'workflow_parameters': 'workflowParameters',
        'reverse_proxy': 'reverseProxy',
        'advanced': 'advanced',
        't_update': 'tUpdate'
    }

    def __init__(self, uid=None, name=None, type=None, network=None, workflow=None, workflow_parameters=None, reverse_proxy=None, advanced=None, t_update=None, local_vars_configuration=None):  # noqa: E501
        """PatchTunnelSuccessData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uid = None
        self._name = None
        self._type = None
        self._network = None
        self._workflow = None
        self._workflow_parameters = None
        self._reverse_proxy = None
        self._advanced = None
        self._t_update = None
        self.discriminator = None

        if uid is not None:
            self.uid = uid
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if network is not None:
            self.network = network
        if workflow is not None:
            self.workflow = workflow
        if workflow_parameters is not None:
            self.workflow_parameters = workflow_parameters
        if reverse_proxy is not None:
            self.reverse_proxy = reverse_proxy
        if advanced is not None:
            self.advanced = advanced
        if t_update is not None:
            self.t_update = t_update

    @property
    def uid(self):
        """Gets the uid of this PatchTunnelSuccessData.  # noqa: E501


        :return: The uid of this PatchTunnelSuccessData.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this PatchTunnelSuccessData.


        :param uid: The uid of this PatchTunnelSuccessData.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def name(self):
        """Gets the name of this PatchTunnelSuccessData.  # noqa: E501


        :return: The name of this PatchTunnelSuccessData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchTunnelSuccessData.


        :param name: The name of this PatchTunnelSuccessData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this PatchTunnelSuccessData.  # noqa: E501


        :return: The type of this PatchTunnelSuccessData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PatchTunnelSuccessData.


        :param type: The type of this PatchTunnelSuccessData.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def network(self):
        """Gets the network of this PatchTunnelSuccessData.  # noqa: E501


        :return: The network of this PatchTunnelSuccessData.  # noqa: E501
        :rtype: PatchTunnelSuccessDataNetwork
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this PatchTunnelSuccessData.


        :param network: The network of this PatchTunnelSuccessData.  # noqa: E501
        :type: PatchTunnelSuccessDataNetwork
        """

        self._network = network

    @property
    def workflow(self):
        """Gets the workflow of this PatchTunnelSuccessData.  # noqa: E501


        :return: The workflow of this PatchTunnelSuccessData.  # noqa: E501
        :rtype: CreateApplianceSysctlProfile
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this PatchTunnelSuccessData.


        :param workflow: The workflow of this PatchTunnelSuccessData.  # noqa: E501
        :type: CreateApplianceSysctlProfile
        """

        self._workflow = workflow

    @property
    def workflow_parameters(self):
        """Gets the workflow_parameters of this PatchTunnelSuccessData.  # noqa: E501


        :return: The workflow_parameters of this PatchTunnelSuccessData.  # noqa: E501
        :rtype: list[object]
        """
        return self._workflow_parameters

    @workflow_parameters.setter
    def workflow_parameters(self, workflow_parameters):
        """Sets the workflow_parameters of this PatchTunnelSuccessData.


        :param workflow_parameters: The workflow_parameters of this PatchTunnelSuccessData.  # noqa: E501
        :type: list[object]
        """

        self._workflow_parameters = workflow_parameters

    @property
    def reverse_proxy(self):
        """Gets the reverse_proxy of this PatchTunnelSuccessData.  # noqa: E501


        :return: The reverse_proxy of this PatchTunnelSuccessData.  # noqa: E501
        :rtype: CreateApplianceSysctlProfile
        """
        return self._reverse_proxy

    @reverse_proxy.setter
    def reverse_proxy(self, reverse_proxy):
        """Sets the reverse_proxy of this PatchTunnelSuccessData.


        :param reverse_proxy: The reverse_proxy of this PatchTunnelSuccessData.  # noqa: E501
        :type: CreateApplianceSysctlProfile
        """

        self._reverse_proxy = reverse_proxy

    @property
    def advanced(self):
        """Gets the advanced of this PatchTunnelSuccessData.  # noqa: E501


        :return: The advanced of this PatchTunnelSuccessData.  # noqa: E501
        :rtype: CreateTunnelAdvanced
        """
        return self._advanced

    @advanced.setter
    def advanced(self, advanced):
        """Sets the advanced of this PatchTunnelSuccessData.


        :param advanced: The advanced of this PatchTunnelSuccessData.  # noqa: E501
        :type: CreateTunnelAdvanced
        """

        self._advanced = advanced

    @property
    def t_update(self):
        """Gets the t_update of this PatchTunnelSuccessData.  # noqa: E501


        :return: The t_update of this PatchTunnelSuccessData.  # noqa: E501
        :rtype: float
        """
        return self._t_update

    @t_update.setter
    def t_update(self, t_update):
        """Sets the t_update of this PatchTunnelSuccessData.


        :param t_update: The t_update of this PatchTunnelSuccessData.  # noqa: E501
        :type: float
        """

        self._t_update = t_update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PatchTunnelSuccessData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PatchTunnelSuccessData):
            return True

        return self.to_dict() != other.to_dict()
