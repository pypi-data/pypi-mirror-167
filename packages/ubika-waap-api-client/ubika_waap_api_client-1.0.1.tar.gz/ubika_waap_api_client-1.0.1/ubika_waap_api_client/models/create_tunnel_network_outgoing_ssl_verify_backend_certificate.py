# coding: utf-8

"""
    UBIKA WAAP Gateway and Cloud API

    The UBIKA's WAAP management API provides a REST/JSON programming interface. It allows automation and scripting of WAAP administration tasks, such as management of reverse proxies and tunnels. The API documentation is shipped with the product itself. Once the product installed, you can access the documentation on the following URL https://ManagementWAAP:3001/api/v1/doc/  # noqa: E501

    The version of the OpenAPI document: 1.0.9
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubika_waap_api_client.configuration import Configuration


class CreateTunnelNetworkOutgoingSslVerifyBackendCertificate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bundle': 'ApplySSLKeyUid',
        'type': 'str',
        'depth': 'int',
        'proxy_check_peer_cn': 'bool',
        'proxy_check_peer_name': 'bool',
        'proxy_check_peer_expire': 'bool'
    }

    attribute_map = {
        'bundle': 'bundle',
        'type': 'type',
        'depth': 'depth',
        'proxy_check_peer_cn': 'proxyCheckPeerCN',
        'proxy_check_peer_name': 'proxyCheckPeerName',
        'proxy_check_peer_expire': 'proxyCheckPeerExpire'
    }

    def __init__(self, bundle=None, type=None, depth=None, proxy_check_peer_cn=None, proxy_check_peer_name=None, proxy_check_peer_expire=None, local_vars_configuration=None):  # noqa: E501
        """CreateTunnelNetworkOutgoingSslVerifyBackendCertificate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bundle = None
        self._type = None
        self._depth = None
        self._proxy_check_peer_cn = None
        self._proxy_check_peer_name = None
        self._proxy_check_peer_expire = None
        self.discriminator = None

        if bundle is not None:
            self.bundle = bundle
        if type is not None:
            self.type = type
        if depth is not None:
            self.depth = depth
        if proxy_check_peer_cn is not None:
            self.proxy_check_peer_cn = proxy_check_peer_cn
        if proxy_check_peer_name is not None:
            self.proxy_check_peer_name = proxy_check_peer_name
        if proxy_check_peer_expire is not None:
            self.proxy_check_peer_expire = proxy_check_peer_expire

    @property
    def bundle(self):
        """Gets the bundle of this CreateTunnelNetworkOutgoingSslVerifyBackendCertificate.  # noqa: E501


        :return: The bundle of this CreateTunnelNetworkOutgoingSslVerifyBackendCertificate.  # noqa: E501
        :rtype: ApplySSLKeyUid
        """
        return self._bundle

    @bundle.setter
    def bundle(self, bundle):
        """Sets the bundle of this CreateTunnelNetworkOutgoingSslVerifyBackendCertificate.


        :param bundle: The bundle of this CreateTunnelNetworkOutgoingSslVerifyBackendCertificate.  # noqa: E501
        :type: ApplySSLKeyUid
        """

        self._bundle = bundle

    @property
    def type(self):
        """Gets the type of this CreateTunnelNetworkOutgoingSslVerifyBackendCertificate.  # noqa: E501


        :return: The type of this CreateTunnelNetworkOutgoingSslVerifyBackendCertificate.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateTunnelNetworkOutgoingSslVerifyBackendCertificate.


        :param type: The type of this CreateTunnelNetworkOutgoingSslVerifyBackendCertificate.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def depth(self):
        """Gets the depth of this CreateTunnelNetworkOutgoingSslVerifyBackendCertificate.  # noqa: E501


        :return: The depth of this CreateTunnelNetworkOutgoingSslVerifyBackendCertificate.  # noqa: E501
        :rtype: int
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this CreateTunnelNetworkOutgoingSslVerifyBackendCertificate.


        :param depth: The depth of this CreateTunnelNetworkOutgoingSslVerifyBackendCertificate.  # noqa: E501
        :type: int
        """

        self._depth = depth

    @property
    def proxy_check_peer_cn(self):
        """Gets the proxy_check_peer_cn of this CreateTunnelNetworkOutgoingSslVerifyBackendCertificate.  # noqa: E501


        :return: The proxy_check_peer_cn of this CreateTunnelNetworkOutgoingSslVerifyBackendCertificate.  # noqa: E501
        :rtype: bool
        """
        return self._proxy_check_peer_cn

    @proxy_check_peer_cn.setter
    def proxy_check_peer_cn(self, proxy_check_peer_cn):
        """Sets the proxy_check_peer_cn of this CreateTunnelNetworkOutgoingSslVerifyBackendCertificate.


        :param proxy_check_peer_cn: The proxy_check_peer_cn of this CreateTunnelNetworkOutgoingSslVerifyBackendCertificate.  # noqa: E501
        :type: bool
        """

        self._proxy_check_peer_cn = proxy_check_peer_cn

    @property
    def proxy_check_peer_name(self):
        """Gets the proxy_check_peer_name of this CreateTunnelNetworkOutgoingSslVerifyBackendCertificate.  # noqa: E501


        :return: The proxy_check_peer_name of this CreateTunnelNetworkOutgoingSslVerifyBackendCertificate.  # noqa: E501
        :rtype: bool
        """
        return self._proxy_check_peer_name

    @proxy_check_peer_name.setter
    def proxy_check_peer_name(self, proxy_check_peer_name):
        """Sets the proxy_check_peer_name of this CreateTunnelNetworkOutgoingSslVerifyBackendCertificate.


        :param proxy_check_peer_name: The proxy_check_peer_name of this CreateTunnelNetworkOutgoingSslVerifyBackendCertificate.  # noqa: E501
        :type: bool
        """

        self._proxy_check_peer_name = proxy_check_peer_name

    @property
    def proxy_check_peer_expire(self):
        """Gets the proxy_check_peer_expire of this CreateTunnelNetworkOutgoingSslVerifyBackendCertificate.  # noqa: E501


        :return: The proxy_check_peer_expire of this CreateTunnelNetworkOutgoingSslVerifyBackendCertificate.  # noqa: E501
        :rtype: bool
        """
        return self._proxy_check_peer_expire

    @proxy_check_peer_expire.setter
    def proxy_check_peer_expire(self, proxy_check_peer_expire):
        """Sets the proxy_check_peer_expire of this CreateTunnelNetworkOutgoingSslVerifyBackendCertificate.


        :param proxy_check_peer_expire: The proxy_check_peer_expire of this CreateTunnelNetworkOutgoingSslVerifyBackendCertificate.  # noqa: E501
        :type: bool
        """

        self._proxy_check_peer_expire = proxy_check_peer_expire

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTunnelNetworkOutgoingSslVerifyBackendCertificate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateTunnelNetworkOutgoingSslVerifyBackendCertificate):
            return True

        return self.to_dict() != other.to_dict()
