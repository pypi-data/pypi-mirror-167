# coding: utf-8

"""
    UBIKA WAAP Gateway and Cloud API

    The UBIKA's WAAP management API provides a REST/JSON programming interface. It allows automation and scripting of WAAP administration tasks, such as management of reverse proxies and tunnels. The API documentation is shipped with the product itself. Once the product installed, you can access the documentation on the following URL https://ManagementWAAP:3001/api/v1/doc/  # noqa: E501

    The version of the OpenAPI document: 1.0.9
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubika_waap_api_client.configuration import Configuration


class CreateTunnelAdvanced(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'advanced_parameters': 'ApplySSLKeyUid',
        'workflow_body': 'bool',
        'workflow_url_decode_body_plus_as_space': 'bool',
        'geo_ip_enabled': 'bool',
        'limit_request_body': 'int',
        'priority': 'int'
    }

    attribute_map = {
        'advanced_parameters': 'advancedParameters',
        'workflow_body': 'workflowBody',
        'workflow_url_decode_body_plus_as_space': 'workflowUrlDecodeBodyPlusAsSpace',
        'geo_ip_enabled': 'geoIpEnabled',
        'limit_request_body': 'limitRequestBody',
        'priority': 'priority'
    }

    def __init__(self, advanced_parameters=None, workflow_body=None, workflow_url_decode_body_plus_as_space=None, geo_ip_enabled=None, limit_request_body=None, priority=None, local_vars_configuration=None):  # noqa: E501
        """CreateTunnelAdvanced - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._advanced_parameters = None
        self._workflow_body = None
        self._workflow_url_decode_body_plus_as_space = None
        self._geo_ip_enabled = None
        self._limit_request_body = None
        self._priority = None
        self.discriminator = None

        if advanced_parameters is not None:
            self.advanced_parameters = advanced_parameters
        if workflow_body is not None:
            self.workflow_body = workflow_body
        if workflow_url_decode_body_plus_as_space is not None:
            self.workflow_url_decode_body_plus_as_space = workflow_url_decode_body_plus_as_space
        if geo_ip_enabled is not None:
            self.geo_ip_enabled = geo_ip_enabled
        if limit_request_body is not None:
            self.limit_request_body = limit_request_body
        if priority is not None:
            self.priority = priority

    @property
    def advanced_parameters(self):
        """Gets the advanced_parameters of this CreateTunnelAdvanced.  # noqa: E501


        :return: The advanced_parameters of this CreateTunnelAdvanced.  # noqa: E501
        :rtype: ApplySSLKeyUid
        """
        return self._advanced_parameters

    @advanced_parameters.setter
    def advanced_parameters(self, advanced_parameters):
        """Sets the advanced_parameters of this CreateTunnelAdvanced.


        :param advanced_parameters: The advanced_parameters of this CreateTunnelAdvanced.  # noqa: E501
        :type: ApplySSLKeyUid
        """

        self._advanced_parameters = advanced_parameters

    @property
    def workflow_body(self):
        """Gets the workflow_body of this CreateTunnelAdvanced.  # noqa: E501


        :return: The workflow_body of this CreateTunnelAdvanced.  # noqa: E501
        :rtype: bool
        """
        return self._workflow_body

    @workflow_body.setter
    def workflow_body(self, workflow_body):
        """Sets the workflow_body of this CreateTunnelAdvanced.


        :param workflow_body: The workflow_body of this CreateTunnelAdvanced.  # noqa: E501
        :type: bool
        """

        self._workflow_body = workflow_body

    @property
    def workflow_url_decode_body_plus_as_space(self):
        """Gets the workflow_url_decode_body_plus_as_space of this CreateTunnelAdvanced.  # noqa: E501


        :return: The workflow_url_decode_body_plus_as_space of this CreateTunnelAdvanced.  # noqa: E501
        :rtype: bool
        """
        return self._workflow_url_decode_body_plus_as_space

    @workflow_url_decode_body_plus_as_space.setter
    def workflow_url_decode_body_plus_as_space(self, workflow_url_decode_body_plus_as_space):
        """Sets the workflow_url_decode_body_plus_as_space of this CreateTunnelAdvanced.


        :param workflow_url_decode_body_plus_as_space: The workflow_url_decode_body_plus_as_space of this CreateTunnelAdvanced.  # noqa: E501
        :type: bool
        """

        self._workflow_url_decode_body_plus_as_space = workflow_url_decode_body_plus_as_space

    @property
    def geo_ip_enabled(self):
        """Gets the geo_ip_enabled of this CreateTunnelAdvanced.  # noqa: E501


        :return: The geo_ip_enabled of this CreateTunnelAdvanced.  # noqa: E501
        :rtype: bool
        """
        return self._geo_ip_enabled

    @geo_ip_enabled.setter
    def geo_ip_enabled(self, geo_ip_enabled):
        """Sets the geo_ip_enabled of this CreateTunnelAdvanced.


        :param geo_ip_enabled: The geo_ip_enabled of this CreateTunnelAdvanced.  # noqa: E501
        :type: bool
        """

        self._geo_ip_enabled = geo_ip_enabled

    @property
    def limit_request_body(self):
        """Gets the limit_request_body of this CreateTunnelAdvanced.  # noqa: E501


        :return: The limit_request_body of this CreateTunnelAdvanced.  # noqa: E501
        :rtype: int
        """
        return self._limit_request_body

    @limit_request_body.setter
    def limit_request_body(self, limit_request_body):
        """Sets the limit_request_body of this CreateTunnelAdvanced.


        :param limit_request_body: The limit_request_body of this CreateTunnelAdvanced.  # noqa: E501
        :type: int
        """

        self._limit_request_body = limit_request_body

    @property
    def priority(self):
        """Gets the priority of this CreateTunnelAdvanced.  # noqa: E501


        :return: The priority of this CreateTunnelAdvanced.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this CreateTunnelAdvanced.


        :param priority: The priority of this CreateTunnelAdvanced.  # noqa: E501
        :type: int
        """

        self._priority = priority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTunnelAdvanced):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateTunnelAdvanced):
            return True

        return self.to_dict() != other.to_dict()
