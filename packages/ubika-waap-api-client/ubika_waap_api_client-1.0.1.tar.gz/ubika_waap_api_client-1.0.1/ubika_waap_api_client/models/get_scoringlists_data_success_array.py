# coding: utf-8

"""
    UBIKA WAAP Gateway and Cloud API

    The UBIKA's WAAP management API provides a REST/JSON programming interface. It allows automation and scripting of WAAP administration tasks, such as management of reverse proxies and tunnels. The API documentation is shipped with the product itself. Once the product installed, you can access the documentation on the following URL https://ManagementWAAP:3001/api/v1/doc/  # noqa: E501

    The version of the OpenAPI document: 1.0.9
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubika_waap_api_client.configuration import Configuration


class GetScoringlistsDataSuccessArray(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uid': 'str',
        'name': 'str',
        'description': 'str',
        'editable': 'bool',
        'static_scoringlist': 'CreateApplianceSysctlProfile',
        'xss': 'str',
        'sqli': 'str',
        'fi': 'str',
        'cmdi': 'str',
        'otheri': 'str',
        'exceptions': 'list[GetScoringlistsExceptionsSuccessArray]',
        't_update': 'float',
        't_create': 'float'
    }

    attribute_map = {
        'uid': 'uid',
        'name': 'name',
        'description': 'description',
        'editable': 'editable',
        'static_scoringlist': 'staticScoringlist',
        'xss': 'xss',
        'sqli': 'sqli',
        'fi': 'fi',
        'cmdi': 'cmdi',
        'otheri': 'otheri',
        'exceptions': 'exceptions',
        't_update': 'tUpdate',
        't_create': 'tCreate'
    }

    def __init__(self, uid=None, name=None, description=None, editable=None, static_scoringlist=None, xss=None, sqli=None, fi=None, cmdi=None, otheri=None, exceptions=None, t_update=None, t_create=None, local_vars_configuration=None):  # noqa: E501
        """GetScoringlistsDataSuccessArray - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uid = None
        self._name = None
        self._description = None
        self._editable = None
        self._static_scoringlist = None
        self._xss = None
        self._sqli = None
        self._fi = None
        self._cmdi = None
        self._otheri = None
        self._exceptions = None
        self._t_update = None
        self._t_create = None
        self.discriminator = None

        if uid is not None:
            self.uid = uid
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if editable is not None:
            self.editable = editable
        if static_scoringlist is not None:
            self.static_scoringlist = static_scoringlist
        if xss is not None:
            self.xss = xss
        if sqli is not None:
            self.sqli = sqli
        if fi is not None:
            self.fi = fi
        if cmdi is not None:
            self.cmdi = cmdi
        if otheri is not None:
            self.otheri = otheri
        if exceptions is not None:
            self.exceptions = exceptions
        if t_update is not None:
            self.t_update = t_update
        if t_create is not None:
            self.t_create = t_create

    @property
    def uid(self):
        """Gets the uid of this GetScoringlistsDataSuccessArray.  # noqa: E501


        :return: The uid of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this GetScoringlistsDataSuccessArray.


        :param uid: The uid of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def name(self):
        """Gets the name of this GetScoringlistsDataSuccessArray.  # noqa: E501


        :return: The name of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetScoringlistsDataSuccessArray.


        :param name: The name of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this GetScoringlistsDataSuccessArray.  # noqa: E501


        :return: The description of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetScoringlistsDataSuccessArray.


        :param description: The description of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def editable(self):
        """Gets the editable of this GetScoringlistsDataSuccessArray.  # noqa: E501


        :return: The editable of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this GetScoringlistsDataSuccessArray.


        :param editable: The editable of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :type: bool
        """

        self._editable = editable

    @property
    def static_scoringlist(self):
        """Gets the static_scoringlist of this GetScoringlistsDataSuccessArray.  # noqa: E501


        :return: The static_scoringlist of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :rtype: CreateApplianceSysctlProfile
        """
        return self._static_scoringlist

    @static_scoringlist.setter
    def static_scoringlist(self, static_scoringlist):
        """Sets the static_scoringlist of this GetScoringlistsDataSuccessArray.


        :param static_scoringlist: The static_scoringlist of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :type: CreateApplianceSysctlProfile
        """

        self._static_scoringlist = static_scoringlist

    @property
    def xss(self):
        """Gets the xss of this GetScoringlistsDataSuccessArray.  # noqa: E501


        :return: The xss of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :rtype: str
        """
        return self._xss

    @xss.setter
    def xss(self, xss):
        """Sets the xss of this GetScoringlistsDataSuccessArray.


        :param xss: The xss of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :type: str
        """

        self._xss = xss

    @property
    def sqli(self):
        """Gets the sqli of this GetScoringlistsDataSuccessArray.  # noqa: E501


        :return: The sqli of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :rtype: str
        """
        return self._sqli

    @sqli.setter
    def sqli(self, sqli):
        """Sets the sqli of this GetScoringlistsDataSuccessArray.


        :param sqli: The sqli of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :type: str
        """

        self._sqli = sqli

    @property
    def fi(self):
        """Gets the fi of this GetScoringlistsDataSuccessArray.  # noqa: E501


        :return: The fi of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :rtype: str
        """
        return self._fi

    @fi.setter
    def fi(self, fi):
        """Sets the fi of this GetScoringlistsDataSuccessArray.


        :param fi: The fi of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :type: str
        """

        self._fi = fi

    @property
    def cmdi(self):
        """Gets the cmdi of this GetScoringlistsDataSuccessArray.  # noqa: E501


        :return: The cmdi of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :rtype: str
        """
        return self._cmdi

    @cmdi.setter
    def cmdi(self, cmdi):
        """Sets the cmdi of this GetScoringlistsDataSuccessArray.


        :param cmdi: The cmdi of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :type: str
        """

        self._cmdi = cmdi

    @property
    def otheri(self):
        """Gets the otheri of this GetScoringlistsDataSuccessArray.  # noqa: E501


        :return: The otheri of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :rtype: str
        """
        return self._otheri

    @otheri.setter
    def otheri(self, otheri):
        """Sets the otheri of this GetScoringlistsDataSuccessArray.


        :param otheri: The otheri of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :type: str
        """

        self._otheri = otheri

    @property
    def exceptions(self):
        """Gets the exceptions of this GetScoringlistsDataSuccessArray.  # noqa: E501


        :return: The exceptions of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :rtype: list[GetScoringlistsExceptionsSuccessArray]
        """
        return self._exceptions

    @exceptions.setter
    def exceptions(self, exceptions):
        """Sets the exceptions of this GetScoringlistsDataSuccessArray.


        :param exceptions: The exceptions of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :type: list[GetScoringlistsExceptionsSuccessArray]
        """

        self._exceptions = exceptions

    @property
    def t_update(self):
        """Gets the t_update of this GetScoringlistsDataSuccessArray.  # noqa: E501


        :return: The t_update of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :rtype: float
        """
        return self._t_update

    @t_update.setter
    def t_update(self, t_update):
        """Sets the t_update of this GetScoringlistsDataSuccessArray.


        :param t_update: The t_update of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :type: float
        """

        self._t_update = t_update

    @property
    def t_create(self):
        """Gets the t_create of this GetScoringlistsDataSuccessArray.  # noqa: E501


        :return: The t_create of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :rtype: float
        """
        return self._t_create

    @t_create.setter
    def t_create(self, t_create):
        """Sets the t_create of this GetScoringlistsDataSuccessArray.


        :param t_create: The t_create of this GetScoringlistsDataSuccessArray.  # noqa: E501
        :type: float
        """

        self._t_create = t_create

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetScoringlistsDataSuccessArray):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetScoringlistsDataSuccessArray):
            return True

        return self.to_dict() != other.to_dict()
