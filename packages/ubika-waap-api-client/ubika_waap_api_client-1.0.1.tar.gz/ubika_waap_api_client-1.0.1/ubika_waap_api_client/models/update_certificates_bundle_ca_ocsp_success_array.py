# coding: utf-8

"""
    UBIKA WAAP Gateway and Cloud API

    The UBIKA's WAAP management API provides a REST/JSON programming interface. It allows automation and scripting of WAAP administration tasks, such as management of reverse proxies and tunnels. The API documentation is shipped with the product itself. Once the product installed, you can access the documentation on the following URL https://ManagementWAAP:3001/api/v1/doc/  # noqa: E501

    The version of the OpenAPI document: 1.0.9
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubika_waap_api_client.configuration import Configuration


class UpdateCertificatesBundleCaOCSPSuccessArray(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uid': 'str',
        'name': 'str',
        'expiration': 'str',
        'dn': 'str'
    }

    attribute_map = {
        'uid': 'uid',
        'name': 'name',
        'expiration': 'expiration',
        'dn': 'dn'
    }

    def __init__(self, uid=None, name=None, expiration=None, dn=None, local_vars_configuration=None):  # noqa: E501
        """UpdateCertificatesBundleCaOCSPSuccessArray - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uid = None
        self._name = None
        self._expiration = None
        self._dn = None
        self.discriminator = None

        if uid is not None:
            self.uid = uid
        if name is not None:
            self.name = name
        if expiration is not None:
            self.expiration = expiration
        if dn is not None:
            self.dn = dn

    @property
    def uid(self):
        """Gets the uid of this UpdateCertificatesBundleCaOCSPSuccessArray.  # noqa: E501


        :return: The uid of this UpdateCertificatesBundleCaOCSPSuccessArray.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this UpdateCertificatesBundleCaOCSPSuccessArray.


        :param uid: The uid of this UpdateCertificatesBundleCaOCSPSuccessArray.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def name(self):
        """Gets the name of this UpdateCertificatesBundleCaOCSPSuccessArray.  # noqa: E501


        :return: The name of this UpdateCertificatesBundleCaOCSPSuccessArray.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateCertificatesBundleCaOCSPSuccessArray.


        :param name: The name of this UpdateCertificatesBundleCaOCSPSuccessArray.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def expiration(self):
        """Gets the expiration of this UpdateCertificatesBundleCaOCSPSuccessArray.  # noqa: E501


        :return: The expiration of this UpdateCertificatesBundleCaOCSPSuccessArray.  # noqa: E501
        :rtype: str
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this UpdateCertificatesBundleCaOCSPSuccessArray.


        :param expiration: The expiration of this UpdateCertificatesBundleCaOCSPSuccessArray.  # noqa: E501
        :type: str
        """

        self._expiration = expiration

    @property
    def dn(self):
        """Gets the dn of this UpdateCertificatesBundleCaOCSPSuccessArray.  # noqa: E501


        :return: The dn of this UpdateCertificatesBundleCaOCSPSuccessArray.  # noqa: E501
        :rtype: str
        """
        return self._dn

    @dn.setter
    def dn(self, dn):
        """Sets the dn of this UpdateCertificatesBundleCaOCSPSuccessArray.


        :param dn: The dn of this UpdateCertificatesBundleCaOCSPSuccessArray.  # noqa: E501
        :type: str
        """

        self._dn = dn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateCertificatesBundleCaOCSPSuccessArray):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateCertificatesBundleCaOCSPSuccessArray):
            return True

        return self.to_dict() != other.to_dict()
