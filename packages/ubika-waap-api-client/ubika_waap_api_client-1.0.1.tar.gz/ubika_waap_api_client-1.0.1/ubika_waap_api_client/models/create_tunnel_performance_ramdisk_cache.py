# coding: utf-8

"""
    UBIKA WAAP Gateway and Cloud API

    The UBIKA's WAAP management API provides a REST/JSON programming interface. It allows automation and scripting of WAAP administration tasks, such as management of reverse proxies and tunnels. The API documentation is shipped with the product itself. Once the product installed, you can access the documentation on the following URL https://ManagementWAAP:3001/api/v1/doc/  # noqa: E501

    The version of the OpenAPI document: 1.0.9
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubika_waap_api_client.configuration import Configuration


class CreateTunnelPerformanceRamdiskCache(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'profile': 'ApplySSLKeyUid',
        'enabled_urls': 'ApplySSLKeyUid',
        'disabled_urls': 'ApplySSLKeyUid'
    }

    attribute_map = {
        'profile': 'profile',
        'enabled_urls': 'enabledUrls',
        'disabled_urls': 'disabledUrls'
    }

    def __init__(self, profile=None, enabled_urls=None, disabled_urls=None, local_vars_configuration=None):  # noqa: E501
        """CreateTunnelPerformanceRamdiskCache - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._profile = None
        self._enabled_urls = None
        self._disabled_urls = None
        self.discriminator = None

        if profile is not None:
            self.profile = profile
        if enabled_urls is not None:
            self.enabled_urls = enabled_urls
        if disabled_urls is not None:
            self.disabled_urls = disabled_urls

    @property
    def profile(self):
        """Gets the profile of this CreateTunnelPerformanceRamdiskCache.  # noqa: E501


        :return: The profile of this CreateTunnelPerformanceRamdiskCache.  # noqa: E501
        :rtype: ApplySSLKeyUid
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this CreateTunnelPerformanceRamdiskCache.


        :param profile: The profile of this CreateTunnelPerformanceRamdiskCache.  # noqa: E501
        :type: ApplySSLKeyUid
        """

        self._profile = profile

    @property
    def enabled_urls(self):
        """Gets the enabled_urls of this CreateTunnelPerformanceRamdiskCache.  # noqa: E501


        :return: The enabled_urls of this CreateTunnelPerformanceRamdiskCache.  # noqa: E501
        :rtype: ApplySSLKeyUid
        """
        return self._enabled_urls

    @enabled_urls.setter
    def enabled_urls(self, enabled_urls):
        """Sets the enabled_urls of this CreateTunnelPerformanceRamdiskCache.


        :param enabled_urls: The enabled_urls of this CreateTunnelPerformanceRamdiskCache.  # noqa: E501
        :type: ApplySSLKeyUid
        """

        self._enabled_urls = enabled_urls

    @property
    def disabled_urls(self):
        """Gets the disabled_urls of this CreateTunnelPerformanceRamdiskCache.  # noqa: E501


        :return: The disabled_urls of this CreateTunnelPerformanceRamdiskCache.  # noqa: E501
        :rtype: ApplySSLKeyUid
        """
        return self._disabled_urls

    @disabled_urls.setter
    def disabled_urls(self, disabled_urls):
        """Sets the disabled_urls of this CreateTunnelPerformanceRamdiskCache.


        :param disabled_urls: The disabled_urls of this CreateTunnelPerformanceRamdiskCache.  # noqa: E501
        :type: ApplySSLKeyUid
        """

        self._disabled_urls = disabled_urls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTunnelPerformanceRamdiskCache):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateTunnelPerformanceRamdiskCache):
            return True

        return self.to_dict() != other.to_dict()
