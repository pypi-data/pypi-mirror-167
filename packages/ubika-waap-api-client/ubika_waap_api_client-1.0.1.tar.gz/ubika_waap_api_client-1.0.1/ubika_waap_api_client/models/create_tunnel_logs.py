# coding: utf-8

"""
    UBIKA WAAP Gateway and Cloud API

    The UBIKA's WAAP management API provides a REST/JSON programming interface. It allows automation and scripting of WAAP administration tasks, such as management of reverse proxies and tunnels. The API documentation is shipped with the product itself. Once the product installed, you can access the documentation on the following URL https://ManagementWAAP:3001/api/v1/doc/  # noqa: E501

    The version of the OpenAPI document: 1.0.9
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubika_waap_api_client.configuration import Configuration


class CreateTunnelLogs(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access': 'CreateTunnelLogsAccess',
        'debug': 'bool',
        'filter': 'str',
        'realtime': 'CreateTunnelLogsRealtime'
    }

    attribute_map = {
        'access': 'access',
        'debug': 'debug',
        'filter': 'filter',
        'realtime': 'realtime'
    }

    def __init__(self, access=None, debug=None, filter=None, realtime=None, local_vars_configuration=None):  # noqa: E501
        """CreateTunnelLogs - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access = None
        self._debug = None
        self._filter = None
        self._realtime = None
        self.discriminator = None

        if access is not None:
            self.access = access
        if debug is not None:
            self.debug = debug
        if filter is not None:
            self.filter = filter
        if realtime is not None:
            self.realtime = realtime

    @property
    def access(self):
        """Gets the access of this CreateTunnelLogs.  # noqa: E501


        :return: The access of this CreateTunnelLogs.  # noqa: E501
        :rtype: CreateTunnelLogsAccess
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this CreateTunnelLogs.


        :param access: The access of this CreateTunnelLogs.  # noqa: E501
        :type: CreateTunnelLogsAccess
        """

        self._access = access

    @property
    def debug(self):
        """Gets the debug of this CreateTunnelLogs.  # noqa: E501


        :return: The debug of this CreateTunnelLogs.  # noqa: E501
        :rtype: bool
        """
        return self._debug

    @debug.setter
    def debug(self, debug):
        """Sets the debug of this CreateTunnelLogs.


        :param debug: The debug of this CreateTunnelLogs.  # noqa: E501
        :type: bool
        """

        self._debug = debug

    @property
    def filter(self):
        """Gets the filter of this CreateTunnelLogs.  # noqa: E501


        :return: The filter of this CreateTunnelLogs.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this CreateTunnelLogs.


        :param filter: The filter of this CreateTunnelLogs.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def realtime(self):
        """Gets the realtime of this CreateTunnelLogs.  # noqa: E501


        :return: The realtime of this CreateTunnelLogs.  # noqa: E501
        :rtype: CreateTunnelLogsRealtime
        """
        return self._realtime

    @realtime.setter
    def realtime(self, realtime):
        """Sets the realtime of this CreateTunnelLogs.


        :param realtime: The realtime of this CreateTunnelLogs.  # noqa: E501
        :type: CreateTunnelLogsRealtime
        """

        self._realtime = realtime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTunnelLogs):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateTunnelLogs):
            return True

        return self.to_dict() != other.to_dict()
