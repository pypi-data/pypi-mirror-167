# coding: utf-8

"""
    UBIKA WAAP Gateway and Cloud API

    The UBIKA's WAAP management API provides a REST/JSON programming interface. It allows automation and scripting of WAAP administration tasks, such as management of reverse proxies and tunnels. The API documentation is shipped with the product itself. Once the product installed, you can access the documentation on the following URL https://ManagementWAAP:3001/api/v1/doc/  # noqa: E501

    The version of the OpenAPI document: 1.0.9
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubika_waap_api_client.configuration import Configuration


class CreateTunnelNetworkIncomingSsl(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'profile': 'CreateApplianceSysctlProfile',
        'certificate': 'CreateApplianceSysctlProfile',
        'sni_vhost_check': 'bool',
        'sslhsts_enable': 'bool',
        'verify_client_certificate': 'CreateTunnelNetworkIncomingSslVerifyClientCertificate'
    }

    attribute_map = {
        'profile': 'profile',
        'certificate': 'certificate',
        'sni_vhost_check': 'sniVhostCheck',
        'sslhsts_enable': 'SSLHSTSEnable',
        'verify_client_certificate': 'verifyClientCertificate'
    }

    def __init__(self, profile=None, certificate=None, sni_vhost_check=None, sslhsts_enable=None, verify_client_certificate=None, local_vars_configuration=None):  # noqa: E501
        """CreateTunnelNetworkIncomingSsl - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._profile = None
        self._certificate = None
        self._sni_vhost_check = None
        self._sslhsts_enable = None
        self._verify_client_certificate = None
        self.discriminator = None

        if profile is not None:
            self.profile = profile
        if certificate is not None:
            self.certificate = certificate
        if sni_vhost_check is not None:
            self.sni_vhost_check = sni_vhost_check
        if sslhsts_enable is not None:
            self.sslhsts_enable = sslhsts_enable
        if verify_client_certificate is not None:
            self.verify_client_certificate = verify_client_certificate

    @property
    def profile(self):
        """Gets the profile of this CreateTunnelNetworkIncomingSsl.  # noqa: E501


        :return: The profile of this CreateTunnelNetworkIncomingSsl.  # noqa: E501
        :rtype: CreateApplianceSysctlProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this CreateTunnelNetworkIncomingSsl.


        :param profile: The profile of this CreateTunnelNetworkIncomingSsl.  # noqa: E501
        :type: CreateApplianceSysctlProfile
        """

        self._profile = profile

    @property
    def certificate(self):
        """Gets the certificate of this CreateTunnelNetworkIncomingSsl.  # noqa: E501


        :return: The certificate of this CreateTunnelNetworkIncomingSsl.  # noqa: E501
        :rtype: CreateApplianceSysctlProfile
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this CreateTunnelNetworkIncomingSsl.


        :param certificate: The certificate of this CreateTunnelNetworkIncomingSsl.  # noqa: E501
        :type: CreateApplianceSysctlProfile
        """

        self._certificate = certificate

    @property
    def sni_vhost_check(self):
        """Gets the sni_vhost_check of this CreateTunnelNetworkIncomingSsl.  # noqa: E501


        :return: The sni_vhost_check of this CreateTunnelNetworkIncomingSsl.  # noqa: E501
        :rtype: bool
        """
        return self._sni_vhost_check

    @sni_vhost_check.setter
    def sni_vhost_check(self, sni_vhost_check):
        """Sets the sni_vhost_check of this CreateTunnelNetworkIncomingSsl.


        :param sni_vhost_check: The sni_vhost_check of this CreateTunnelNetworkIncomingSsl.  # noqa: E501
        :type: bool
        """

        self._sni_vhost_check = sni_vhost_check

    @property
    def sslhsts_enable(self):
        """Gets the sslhsts_enable of this CreateTunnelNetworkIncomingSsl.  # noqa: E501


        :return: The sslhsts_enable of this CreateTunnelNetworkIncomingSsl.  # noqa: E501
        :rtype: bool
        """
        return self._sslhsts_enable

    @sslhsts_enable.setter
    def sslhsts_enable(self, sslhsts_enable):
        """Sets the sslhsts_enable of this CreateTunnelNetworkIncomingSsl.


        :param sslhsts_enable: The sslhsts_enable of this CreateTunnelNetworkIncomingSsl.  # noqa: E501
        :type: bool
        """

        self._sslhsts_enable = sslhsts_enable

    @property
    def verify_client_certificate(self):
        """Gets the verify_client_certificate of this CreateTunnelNetworkIncomingSsl.  # noqa: E501


        :return: The verify_client_certificate of this CreateTunnelNetworkIncomingSsl.  # noqa: E501
        :rtype: CreateTunnelNetworkIncomingSslVerifyClientCertificate
        """
        return self._verify_client_certificate

    @verify_client_certificate.setter
    def verify_client_certificate(self, verify_client_certificate):
        """Sets the verify_client_certificate of this CreateTunnelNetworkIncomingSsl.


        :param verify_client_certificate: The verify_client_certificate of this CreateTunnelNetworkIncomingSsl.  # noqa: E501
        :type: CreateTunnelNetworkIncomingSslVerifyClientCertificate
        """

        self._verify_client_certificate = verify_client_certificate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTunnelNetworkIncomingSsl):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateTunnelNetworkIncomingSsl):
            return True

        return self.to_dict() != other.to_dict()
