# coding: utf-8

"""
    UBIKA WAAP Gateway and Cloud API

    The UBIKA's WAAP management API provides a REST/JSON programming interface. It allows automation and scripting of WAAP administration tasks, such as management of reverse proxies and tunnels. The API documentation is shipped with the product itself. Once the product installed, you can access the documentation on the following URL https://ManagementWAAP:3001/api/v1/doc/  # noqa: E501

    The version of the OpenAPI document: 1.0.9
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubika_waap_api_client.configuration import Configuration


class GetTunnelsDataSuccessArrayNetworkIncoming(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'incoming_type': 'str',
        'ip': 'str',
        'port': 'int',
        'vip': 'CreateTunnelSuccessDataNetworkIncomingInterface',
        'interface': 'CreateTunnelSuccessDataNetworkIncomingInterface',
        'pooler_tunnel': 'CreateApplianceSysctlProfile',
        'server_name': 'str',
        'server_alias': 'list[object]',
        'ssl': 'CreateTunnelNetworkIncomingSsl',
        'http2_enabled': 'bool'
    }

    attribute_map = {
        'incoming_type': 'incomingType',
        'ip': 'ip',
        'port': 'port',
        'vip': 'vip',
        'interface': 'interface',
        'pooler_tunnel': 'poolerTunnel',
        'server_name': 'serverName',
        'server_alias': 'serverAlias',
        'ssl': 'ssl',
        'http2_enabled': 'http2Enabled'
    }

    def __init__(self, incoming_type=None, ip=None, port=None, vip=None, interface=None, pooler_tunnel=None, server_name=None, server_alias=None, ssl=None, http2_enabled=None, local_vars_configuration=None):  # noqa: E501
        """GetTunnelsDataSuccessArrayNetworkIncoming - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._incoming_type = None
        self._ip = None
        self._port = None
        self._vip = None
        self._interface = None
        self._pooler_tunnel = None
        self._server_name = None
        self._server_alias = None
        self._ssl = None
        self._http2_enabled = None
        self.discriminator = None

        if incoming_type is not None:
            self.incoming_type = incoming_type
        if ip is not None:
            self.ip = ip
        if port is not None:
            self.port = port
        if vip is not None:
            self.vip = vip
        if interface is not None:
            self.interface = interface
        if pooler_tunnel is not None:
            self.pooler_tunnel = pooler_tunnel
        if server_name is not None:
            self.server_name = server_name
        if server_alias is not None:
            self.server_alias = server_alias
        if ssl is not None:
            self.ssl = ssl
        if http2_enabled is not None:
            self.http2_enabled = http2_enabled

    @property
    def incoming_type(self):
        """Gets the incoming_type of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501


        :return: The incoming_type of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501
        :rtype: str
        """
        return self._incoming_type

    @incoming_type.setter
    def incoming_type(self, incoming_type):
        """Sets the incoming_type of this GetTunnelsDataSuccessArrayNetworkIncoming.


        :param incoming_type: The incoming_type of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501
        :type: str
        """

        self._incoming_type = incoming_type

    @property
    def ip(self):
        """Gets the ip of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501


        :return: The ip of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this GetTunnelsDataSuccessArrayNetworkIncoming.


        :param ip: The ip of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def port(self):
        """Gets the port of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501


        :return: The port of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this GetTunnelsDataSuccessArrayNetworkIncoming.


        :param port: The port of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def vip(self):
        """Gets the vip of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501


        :return: The vip of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501
        :rtype: CreateTunnelSuccessDataNetworkIncomingInterface
        """
        return self._vip

    @vip.setter
    def vip(self, vip):
        """Sets the vip of this GetTunnelsDataSuccessArrayNetworkIncoming.


        :param vip: The vip of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501
        :type: CreateTunnelSuccessDataNetworkIncomingInterface
        """

        self._vip = vip

    @property
    def interface(self):
        """Gets the interface of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501


        :return: The interface of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501
        :rtype: CreateTunnelSuccessDataNetworkIncomingInterface
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this GetTunnelsDataSuccessArrayNetworkIncoming.


        :param interface: The interface of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501
        :type: CreateTunnelSuccessDataNetworkIncomingInterface
        """

        self._interface = interface

    @property
    def pooler_tunnel(self):
        """Gets the pooler_tunnel of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501


        :return: The pooler_tunnel of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501
        :rtype: CreateApplianceSysctlProfile
        """
        return self._pooler_tunnel

    @pooler_tunnel.setter
    def pooler_tunnel(self, pooler_tunnel):
        """Sets the pooler_tunnel of this GetTunnelsDataSuccessArrayNetworkIncoming.


        :param pooler_tunnel: The pooler_tunnel of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501
        :type: CreateApplianceSysctlProfile
        """

        self._pooler_tunnel = pooler_tunnel

    @property
    def server_name(self):
        """Gets the server_name of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501


        :return: The server_name of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this GetTunnelsDataSuccessArrayNetworkIncoming.


        :param server_name: The server_name of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501
        :type: str
        """

        self._server_name = server_name

    @property
    def server_alias(self):
        """Gets the server_alias of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501


        :return: The server_alias of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501
        :rtype: list[object]
        """
        return self._server_alias

    @server_alias.setter
    def server_alias(self, server_alias):
        """Sets the server_alias of this GetTunnelsDataSuccessArrayNetworkIncoming.


        :param server_alias: The server_alias of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501
        :type: list[object]
        """

        self._server_alias = server_alias

    @property
    def ssl(self):
        """Gets the ssl of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501


        :return: The ssl of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501
        :rtype: CreateTunnelNetworkIncomingSsl
        """
        return self._ssl

    @ssl.setter
    def ssl(self, ssl):
        """Sets the ssl of this GetTunnelsDataSuccessArrayNetworkIncoming.


        :param ssl: The ssl of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501
        :type: CreateTunnelNetworkIncomingSsl
        """

        self._ssl = ssl

    @property
    def http2_enabled(self):
        """Gets the http2_enabled of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501


        :return: The http2_enabled of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501
        :rtype: bool
        """
        return self._http2_enabled

    @http2_enabled.setter
    def http2_enabled(self, http2_enabled):
        """Sets the http2_enabled of this GetTunnelsDataSuccessArrayNetworkIncoming.


        :param http2_enabled: The http2_enabled of this GetTunnelsDataSuccessArrayNetworkIncoming.  # noqa: E501
        :type: bool
        """

        self._http2_enabled = http2_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetTunnelsDataSuccessArrayNetworkIncoming):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetTunnelsDataSuccessArrayNetworkIncoming):
            return True

        return self.to_dict() != other.to_dict()
