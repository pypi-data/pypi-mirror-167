# coding: utf-8

"""
    UBIKA WAAP Gateway and Cloud API

    The UBIKA's WAAP management API provides a REST/JSON programming interface. It allows automation and scripting of WAAP administration tasks, such as management of reverse proxies and tunnels. The API documentation is shipped with the product itself. Once the product installed, you can access the documentation on the following URL https://ManagementWAAP:3001/api/v1/doc/  # noqa: E501

    The version of the OpenAPI document: 1.0.9
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import ubika_waap_api_client
from ubika_waap_api_client.models.patch_tunnel import PatchTunnel  # noqa: E501
from ubika_waap_api_client.rest import ApiException

class TestPatchTunnel(unittest.TestCase):
    """PatchTunnel unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test PatchTunnel
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = ubika_waap_api_client.models.patch_tunnel.PatchTunnel()  # noqa: E501
        if include_optional :
            return PatchTunnel(
                name = '0', 
                reverse_proxy = ubika_waap_api_client.models.apply_ssl_key_uid.Apply_SSLKeyUid(
                    uid = '0', ), 
                workflow = ubika_waap_api_client.models.create_appliance_sysctl_profile.CreateAppliance_sysctlProfile(
                    uid = '0', 
                    name = '0', ), 
                workflow_parameters = [
                    ubika_waap_api_client.models.patch_tunnel_workflow_parameters_array.PatchTunnelWorkflowParametersArray()
                    ], 
                application_template = '0', 
                enabled = True, 
                labels = [
                    ubika_waap_api_client.models.patch_tunnel_labels_array.PatchTunnelLabelsArray(
                        uid = '0', 
                        name = '0', )
                    ], 
                network = ubika_waap_api_client.models.patch_tunnel_network.PatchTunnel_network(
                    incoming = ubika_waap_api_client.models.patch_tunnel_network_incoming.PatchTunnel_network_incoming(
                        incoming_type = '0', 
                        ip = '0', 
                        vip = ubika_waap_api_client.models.apply_ssl_key_uid.Apply_SSLKeyUid(
                            uid = '0', ), 
                        interface = ubika_waap_api_client.models.apply_ssl_key_uid.Apply_SSLKeyUid(
                            uid = '0', ), 
                        pooler_tunnel = ubika_waap_api_client.models.apply_ssl_key_uid.Apply_SSLKeyUid(
                            uid = '0', ), 
                        port = 56, 
                        server_name = '0', 
                        server_alias = [
                            ubika_waap_api_client.models.patch_tunnel_server_alias_array.PatchTunnelServerAliasArray()
                            ], 
                        ssl = ubika_waap_api_client.models.create_tunnel_network_incoming_ssl.CreateTunnel_network_incoming_ssl(
                            profile = ubika_waap_api_client.models.create_appliance_sysctl_profile.CreateAppliance_sysctlProfile(
                                uid = '0', 
                                name = '0', ), 
                            certificate = ubika_waap_api_client.models.create_appliance_sysctl_profile.CreateAppliance_sysctlProfile(
                                uid = '0', 
                                name = '0', ), 
                            sni_vhost_check = True, 
                            sslhsts_enable = True, 
                            verify_client_certificate = ubika_waap_api_client.models.create_tunnel_network_incoming_ssl_verify_client_certificate.CreateTunnel_network_incoming_ssl_verifyClientCertificate(
                                bundle = ubika_waap_api_client.models.create_appliance_sysctl_profile.CreateAppliance_sysctlProfile(
                                    uid = '0', 
                                    name = '0', ), 
                                ca = ubika_waap_api_client.models.create_appliance_sysctl_profile.CreateAppliance_sysctlProfile(
                                    uid = '0', 
                                    name = '0', ), 
                                type = '0', 
                                depth = 56, 
                                ocsp = ubika_waap_api_client.models.create_appliance_sysctl_profile.CreateAppliance_sysctlProfile(
                                    uid = '0', 
                                    name = '0', ), 
                                catch_errors = True, 
                                legacy_dn_string_format = True, 
                                ssl_redirect_enable = True, 
                                ssl_redirect_port_in = 56, ), ), 
                        http2_enabled = True, ), 
                    outgoing = ubika_waap_api_client.models.patch_tunnel_network_outgoing.PatchTunnel_network_outgoing(
                        address = '0', 
                        port = 56, 
                        load_balancer = ubika_waap_api_client.models.apply_ssl_key_uid.Apply_SSLKeyUid(
                            uid = '0', ), 
                        pooling_interface = ubika_waap_api_client.models.apply_ssl_key_uid.Apply_SSLKeyUid(
                            uid = '0', ), 
                        pooling_port = 56, ), ), 
                network_incoming_server_alias = [
                    ubika_waap_api_client.models.patch_tunnel_server_alias_array.PatchTunnelServerAliasArray()
                    ], 
                performance = ubika_waap_api_client.models.create_tunnel_performance.CreateTunnel_performance(
                    timeout = 56, 
                    proxy_timeout = 56, 
                    keep_alive_timeout = 56, 
                    ramdisk_cache = ubika_waap_api_client.models.create_tunnel_performance_ramdisk_cache.CreateTunnel_performance_ramdiskCache(
                        profile = ubika_waap_api_client.models.apply_ssl_key_uid.Apply_SSLKeyUid(
                            uid = '0', ), 
                        enabled_urls = ubika_waap_api_client.models.apply_ssl_key_uid.Apply_SSLKeyUid(
                            uid = '0', ), 
                        disabled_urls = ubika_waap_api_client.models.apply_ssl_key_uid.Apply_SSLKeyUid(
                            uid = '0', ), ), 
                    request_timeout_profile = ubika_waap_api_client.models.apply_ssl_key_uid.Apply_SSLKeyUid(
                        uid = '0', ), 
                    compression_profile = ubika_waap_api_client.models.apply_ssl_key_uid.Apply_SSLKeyUid(
                        uid = '0', ), 
                    workflow_preserve_deflate = True, ), 
                logs = ubika_waap_api_client.models.patch_tunnel_logs.PatchTunnel_logs(
                    access = ubika_waap_api_client.models.create_tunnel_logs_access.CreateTunnel_logs_access(
                        file = True, 
                        file_format_profile = '0', 
                        database = True, ), 
                    debug = True, 
                    filter = '0', 
                    realtime = ubika_waap_api_client.models.patch_tunnel_logs_realtime.PatchTunnel_logs_realtime(
                        security = True, 
                        security_format = '0', 
                        wam_format = '0', 
                        wam = True, 
                        error = True, 
                        access_log_database = True, 
                        syslog_destination_profiles = [
                            ubika_waap_api_client.models.patch_tunnel_syslog_destination_profiles_array.PatchTunnelSyslogDestinationProfilesArray(
                                uid = '0', 
                                name = '0', )
                            ], ), ), 
                logs_realtime_syslog_destination_profiles = [
                    ubika_waap_api_client.models.patch_tunnel_syslog_destination_profiles_array.PatchTunnelSyslogDestinationProfilesArray(
                        uid = '0', 
                        name = '0', )
                    ], 
                monitor = ubika_waap_api_client.models.create_tunnel_monitor.CreateTunnel_monitor(
                    enabled = True, 
                    backend = ubika_waap_api_client.models.create_tunnel_monitor_backend.CreateTunnel_monitor_backend(
                        enabled = True, 
                        method = '0', 
                        url = '0', 
                        http_host = '0', 
                        frequency = 56, 
                        timeout = 56, 
                        return_code = '0', 
                        match = '0', ), ), 
                advanced = ubika_waap_api_client.models.create_tunnel_advanced.CreateTunnel_advanced(
                    advanced_parameters = ubika_waap_api_client.models.apply_ssl_key_uid.Apply_SSLKeyUid(
                        uid = '0', ), 
                    workflow_body = True, 
                    workflow_url_decode_body_plus_as_space = True, 
                    geo_ip_enabled = True, 
                    limit_request_body = 56, 
                    priority = 56, )
            )
        else :
            return PatchTunnel(
        )

    def testPatchTunnel(self):
        """Test PatchTunnel"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
