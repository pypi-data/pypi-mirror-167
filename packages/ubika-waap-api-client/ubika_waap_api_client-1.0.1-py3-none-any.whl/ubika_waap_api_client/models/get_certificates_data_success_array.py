# coding: utf-8

"""
    UBIKA WAAP Gateway and Cloud API

    The UBIKA's WAAP management API provides a REST/JSON programming interface. It allows automation and scripting of WAAP administration tasks, such as management of reverse proxies and tunnels. The API documentation is shipped with the product itself. Once the product installed, you can access the documentation on the following URL https://ManagementWAAP:3001/api/v1/doc/  # noqa: E501

    The version of the OpenAPI document: 1.0.9
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubika_waap_api_client.configuration import Configuration


class GetCertificatesDataSuccessArray(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uid': 'str',
        'name': 'str',
        'private_key_name': 'str',
        'certificate_name': 'str',
        'chain_name': 'str',
        'csr_name': 'str',
        'expiration_date': 'int',
        'labels': 'list[GetCertificatesLabelsSuccessArray]',
        't_update': 'float',
        't_create': 'float'
    }

    attribute_map = {
        'uid': 'uid',
        'name': 'name',
        'private_key_name': 'privateKeyName',
        'certificate_name': 'certificateName',
        'chain_name': 'chainName',
        'csr_name': 'csrName',
        'expiration_date': 'expirationDate',
        'labels': 'labels',
        't_update': 'tUpdate',
        't_create': 'tCreate'
    }

    def __init__(self, uid=None, name=None, private_key_name=None, certificate_name=None, chain_name=None, csr_name=None, expiration_date=None, labels=None, t_update=None, t_create=None, local_vars_configuration=None):  # noqa: E501
        """GetCertificatesDataSuccessArray - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uid = None
        self._name = None
        self._private_key_name = None
        self._certificate_name = None
        self._chain_name = None
        self._csr_name = None
        self._expiration_date = None
        self._labels = None
        self._t_update = None
        self._t_create = None
        self.discriminator = None

        if uid is not None:
            self.uid = uid
        if name is not None:
            self.name = name
        if private_key_name is not None:
            self.private_key_name = private_key_name
        if certificate_name is not None:
            self.certificate_name = certificate_name
        if chain_name is not None:
            self.chain_name = chain_name
        if csr_name is not None:
            self.csr_name = csr_name
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if labels is not None:
            self.labels = labels
        if t_update is not None:
            self.t_update = t_update
        if t_create is not None:
            self.t_create = t_create

    @property
    def uid(self):
        """Gets the uid of this GetCertificatesDataSuccessArray.  # noqa: E501


        :return: The uid of this GetCertificatesDataSuccessArray.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this GetCertificatesDataSuccessArray.


        :param uid: The uid of this GetCertificatesDataSuccessArray.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def name(self):
        """Gets the name of this GetCertificatesDataSuccessArray.  # noqa: E501


        :return: The name of this GetCertificatesDataSuccessArray.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetCertificatesDataSuccessArray.


        :param name: The name of this GetCertificatesDataSuccessArray.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def private_key_name(self):
        """Gets the private_key_name of this GetCertificatesDataSuccessArray.  # noqa: E501


        :return: The private_key_name of this GetCertificatesDataSuccessArray.  # noqa: E501
        :rtype: str
        """
        return self._private_key_name

    @private_key_name.setter
    def private_key_name(self, private_key_name):
        """Sets the private_key_name of this GetCertificatesDataSuccessArray.


        :param private_key_name: The private_key_name of this GetCertificatesDataSuccessArray.  # noqa: E501
        :type: str
        """

        self._private_key_name = private_key_name

    @property
    def certificate_name(self):
        """Gets the certificate_name of this GetCertificatesDataSuccessArray.  # noqa: E501


        :return: The certificate_name of this GetCertificatesDataSuccessArray.  # noqa: E501
        :rtype: str
        """
        return self._certificate_name

    @certificate_name.setter
    def certificate_name(self, certificate_name):
        """Sets the certificate_name of this GetCertificatesDataSuccessArray.


        :param certificate_name: The certificate_name of this GetCertificatesDataSuccessArray.  # noqa: E501
        :type: str
        """

        self._certificate_name = certificate_name

    @property
    def chain_name(self):
        """Gets the chain_name of this GetCertificatesDataSuccessArray.  # noqa: E501


        :return: The chain_name of this GetCertificatesDataSuccessArray.  # noqa: E501
        :rtype: str
        """
        return self._chain_name

    @chain_name.setter
    def chain_name(self, chain_name):
        """Sets the chain_name of this GetCertificatesDataSuccessArray.


        :param chain_name: The chain_name of this GetCertificatesDataSuccessArray.  # noqa: E501
        :type: str
        """

        self._chain_name = chain_name

    @property
    def csr_name(self):
        """Gets the csr_name of this GetCertificatesDataSuccessArray.  # noqa: E501


        :return: The csr_name of this GetCertificatesDataSuccessArray.  # noqa: E501
        :rtype: str
        """
        return self._csr_name

    @csr_name.setter
    def csr_name(self, csr_name):
        """Sets the csr_name of this GetCertificatesDataSuccessArray.


        :param csr_name: The csr_name of this GetCertificatesDataSuccessArray.  # noqa: E501
        :type: str
        """

        self._csr_name = csr_name

    @property
    def expiration_date(self):
        """Gets the expiration_date of this GetCertificatesDataSuccessArray.  # noqa: E501


        :return: The expiration_date of this GetCertificatesDataSuccessArray.  # noqa: E501
        :rtype: int
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this GetCertificatesDataSuccessArray.


        :param expiration_date: The expiration_date of this GetCertificatesDataSuccessArray.  # noqa: E501
        :type: int
        """

        self._expiration_date = expiration_date

    @property
    def labels(self):
        """Gets the labels of this GetCertificatesDataSuccessArray.  # noqa: E501


        :return: The labels of this GetCertificatesDataSuccessArray.  # noqa: E501
        :rtype: list[GetCertificatesLabelsSuccessArray]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GetCertificatesDataSuccessArray.


        :param labels: The labels of this GetCertificatesDataSuccessArray.  # noqa: E501
        :type: list[GetCertificatesLabelsSuccessArray]
        """

        self._labels = labels

    @property
    def t_update(self):
        """Gets the t_update of this GetCertificatesDataSuccessArray.  # noqa: E501


        :return: The t_update of this GetCertificatesDataSuccessArray.  # noqa: E501
        :rtype: float
        """
        return self._t_update

    @t_update.setter
    def t_update(self, t_update):
        """Sets the t_update of this GetCertificatesDataSuccessArray.


        :param t_update: The t_update of this GetCertificatesDataSuccessArray.  # noqa: E501
        :type: float
        """

        self._t_update = t_update

    @property
    def t_create(self):
        """Gets the t_create of this GetCertificatesDataSuccessArray.  # noqa: E501


        :return: The t_create of this GetCertificatesDataSuccessArray.  # noqa: E501
        :rtype: float
        """
        return self._t_create

    @t_create.setter
    def t_create(self, t_create):
        """Sets the t_create of this GetCertificatesDataSuccessArray.


        :param t_create: The t_create of this GetCertificatesDataSuccessArray.  # noqa: E501
        :type: float
        """

        self._t_create = t_create

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCertificatesDataSuccessArray):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetCertificatesDataSuccessArray):
            return True

        return self.to_dict() != other.to_dict()
