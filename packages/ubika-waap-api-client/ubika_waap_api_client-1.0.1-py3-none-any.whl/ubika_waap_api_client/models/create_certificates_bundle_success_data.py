# coding: utf-8

"""
    UBIKA WAAP Gateway and Cloud API

    The UBIKA's WAAP management API provides a REST/JSON programming interface. It allows automation and scripting of WAAP administration tasks, such as management of reverse proxies and tunnels. The API documentation is shipped with the product itself. Once the product installed, you can access the documentation on the following URL https://ManagementWAAP:3001/api/v1/doc/  # noqa: E501

    The version of the OpenAPI document: 1.0.9
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubika_waap_api_client.configuration import Configuration


class CreateCertificatesBundleSuccessData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uid': 'str',
        'name': 'str',
        'ca': 'list[CreateCertificatesBundleCaSuccessArray]',
        'ca_ocsp': 'list[CreateCertificatesBundleCaOCSPSuccessArray]',
        'crl': 'list[CreateCertificatesBundleCrlSuccessArray]',
        't_update': 'float'
    }

    attribute_map = {
        'uid': 'uid',
        'name': 'name',
        'ca': 'ca',
        'ca_ocsp': 'caOCSP',
        'crl': 'crl',
        't_update': 'tUpdate'
    }

    def __init__(self, uid=None, name=None, ca=None, ca_ocsp=None, crl=None, t_update=None, local_vars_configuration=None):  # noqa: E501
        """CreateCertificatesBundleSuccessData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uid = None
        self._name = None
        self._ca = None
        self._ca_ocsp = None
        self._crl = None
        self._t_update = None
        self.discriminator = None

        if uid is not None:
            self.uid = uid
        if name is not None:
            self.name = name
        if ca is not None:
            self.ca = ca
        if ca_ocsp is not None:
            self.ca_ocsp = ca_ocsp
        if crl is not None:
            self.crl = crl
        if t_update is not None:
            self.t_update = t_update

    @property
    def uid(self):
        """Gets the uid of this CreateCertificatesBundleSuccessData.  # noqa: E501


        :return: The uid of this CreateCertificatesBundleSuccessData.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this CreateCertificatesBundleSuccessData.


        :param uid: The uid of this CreateCertificatesBundleSuccessData.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def name(self):
        """Gets the name of this CreateCertificatesBundleSuccessData.  # noqa: E501


        :return: The name of this CreateCertificatesBundleSuccessData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateCertificatesBundleSuccessData.


        :param name: The name of this CreateCertificatesBundleSuccessData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def ca(self):
        """Gets the ca of this CreateCertificatesBundleSuccessData.  # noqa: E501


        :return: The ca of this CreateCertificatesBundleSuccessData.  # noqa: E501
        :rtype: list[CreateCertificatesBundleCaSuccessArray]
        """
        return self._ca

    @ca.setter
    def ca(self, ca):
        """Sets the ca of this CreateCertificatesBundleSuccessData.


        :param ca: The ca of this CreateCertificatesBundleSuccessData.  # noqa: E501
        :type: list[CreateCertificatesBundleCaSuccessArray]
        """

        self._ca = ca

    @property
    def ca_ocsp(self):
        """Gets the ca_ocsp of this CreateCertificatesBundleSuccessData.  # noqa: E501


        :return: The ca_ocsp of this CreateCertificatesBundleSuccessData.  # noqa: E501
        :rtype: list[CreateCertificatesBundleCaOCSPSuccessArray]
        """
        return self._ca_ocsp

    @ca_ocsp.setter
    def ca_ocsp(self, ca_ocsp):
        """Sets the ca_ocsp of this CreateCertificatesBundleSuccessData.


        :param ca_ocsp: The ca_ocsp of this CreateCertificatesBundleSuccessData.  # noqa: E501
        :type: list[CreateCertificatesBundleCaOCSPSuccessArray]
        """

        self._ca_ocsp = ca_ocsp

    @property
    def crl(self):
        """Gets the crl of this CreateCertificatesBundleSuccessData.  # noqa: E501


        :return: The crl of this CreateCertificatesBundleSuccessData.  # noqa: E501
        :rtype: list[CreateCertificatesBundleCrlSuccessArray]
        """
        return self._crl

    @crl.setter
    def crl(self, crl):
        """Sets the crl of this CreateCertificatesBundleSuccessData.


        :param crl: The crl of this CreateCertificatesBundleSuccessData.  # noqa: E501
        :type: list[CreateCertificatesBundleCrlSuccessArray]
        """

        self._crl = crl

    @property
    def t_update(self):
        """Gets the t_update of this CreateCertificatesBundleSuccessData.  # noqa: E501


        :return: The t_update of this CreateCertificatesBundleSuccessData.  # noqa: E501
        :rtype: float
        """
        return self._t_update

    @t_update.setter
    def t_update(self, t_update):
        """Sets the t_update of this CreateCertificatesBundleSuccessData.


        :param t_update: The t_update of this CreateCertificatesBundleSuccessData.  # noqa: E501
        :type: float
        """

        self._t_update = t_update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCertificatesBundleSuccessData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateCertificatesBundleSuccessData):
            return True

        return self.to_dict() != other.to_dict()
