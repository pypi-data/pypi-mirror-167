# coding: utf-8

"""
    UBIKA WAAP Gateway and Cloud API

    The UBIKA's WAAP management API provides a REST/JSON programming interface. It allows automation and scripting of WAAP administration tasks, such as management of reverse proxies and tunnels. The API documentation is shipped with the product itself. Once the product installed, you can access the documentation on the following URL https://ManagementWAAP:3001/api/v1/doc/  # noqa: E501

    The version of the OpenAPI document: 1.0.9
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubika_waap_api_client.configuration import Configuration


class CreateTunnelMonitorBackend(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enabled': 'bool',
        'method': 'str',
        'url': 'str',
        'http_host': 'str',
        'frequency': 'int',
        'timeout': 'int',
        'return_code': 'str',
        'match': 'str'
    }

    attribute_map = {
        'enabled': 'enabled',
        'method': 'method',
        'url': 'url',
        'http_host': 'httpHost',
        'frequency': 'frequency',
        'timeout': 'timeout',
        'return_code': 'returnCode',
        'match': 'match'
    }

    def __init__(self, enabled=None, method=None, url=None, http_host=None, frequency=None, timeout=None, return_code=None, match=None, local_vars_configuration=None):  # noqa: E501
        """CreateTunnelMonitorBackend - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._enabled = None
        self._method = None
        self._url = None
        self._http_host = None
        self._frequency = None
        self._timeout = None
        self._return_code = None
        self._match = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if method is not None:
            self.method = method
        if url is not None:
            self.url = url
        if http_host is not None:
            self.http_host = http_host
        if frequency is not None:
            self.frequency = frequency
        if timeout is not None:
            self.timeout = timeout
        if return_code is not None:
            self.return_code = return_code
        if match is not None:
            self.match = match

    @property
    def enabled(self):
        """Gets the enabled of this CreateTunnelMonitorBackend.  # noqa: E501


        :return: The enabled of this CreateTunnelMonitorBackend.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CreateTunnelMonitorBackend.


        :param enabled: The enabled of this CreateTunnelMonitorBackend.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def method(self):
        """Gets the method of this CreateTunnelMonitorBackend.  # noqa: E501


        :return: The method of this CreateTunnelMonitorBackend.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this CreateTunnelMonitorBackend.


        :param method: The method of this CreateTunnelMonitorBackend.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def url(self):
        """Gets the url of this CreateTunnelMonitorBackend.  # noqa: E501


        :return: The url of this CreateTunnelMonitorBackend.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CreateTunnelMonitorBackend.


        :param url: The url of this CreateTunnelMonitorBackend.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def http_host(self):
        """Gets the http_host of this CreateTunnelMonitorBackend.  # noqa: E501


        :return: The http_host of this CreateTunnelMonitorBackend.  # noqa: E501
        :rtype: str
        """
        return self._http_host

    @http_host.setter
    def http_host(self, http_host):
        """Sets the http_host of this CreateTunnelMonitorBackend.


        :param http_host: The http_host of this CreateTunnelMonitorBackend.  # noqa: E501
        :type: str
        """

        self._http_host = http_host

    @property
    def frequency(self):
        """Gets the frequency of this CreateTunnelMonitorBackend.  # noqa: E501


        :return: The frequency of this CreateTunnelMonitorBackend.  # noqa: E501
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this CreateTunnelMonitorBackend.


        :param frequency: The frequency of this CreateTunnelMonitorBackend.  # noqa: E501
        :type: int
        """

        self._frequency = frequency

    @property
    def timeout(self):
        """Gets the timeout of this CreateTunnelMonitorBackend.  # noqa: E501


        :return: The timeout of this CreateTunnelMonitorBackend.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this CreateTunnelMonitorBackend.


        :param timeout: The timeout of this CreateTunnelMonitorBackend.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def return_code(self):
        """Gets the return_code of this CreateTunnelMonitorBackend.  # noqa: E501


        :return: The return_code of this CreateTunnelMonitorBackend.  # noqa: E501
        :rtype: str
        """
        return self._return_code

    @return_code.setter
    def return_code(self, return_code):
        """Sets the return_code of this CreateTunnelMonitorBackend.


        :param return_code: The return_code of this CreateTunnelMonitorBackend.  # noqa: E501
        :type: str
        """

        self._return_code = return_code

    @property
    def match(self):
        """Gets the match of this CreateTunnelMonitorBackend.  # noqa: E501


        :return: The match of this CreateTunnelMonitorBackend.  # noqa: E501
        :rtype: str
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this CreateTunnelMonitorBackend.


        :param match: The match of this CreateTunnelMonitorBackend.  # noqa: E501
        :type: str
        """

        self._match = match

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTunnelMonitorBackend):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateTunnelMonitorBackend):
            return True

        return self.to_dict() != other.to_dict()
