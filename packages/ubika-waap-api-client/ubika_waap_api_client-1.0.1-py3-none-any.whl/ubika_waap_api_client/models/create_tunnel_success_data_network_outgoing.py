# coding: utf-8

"""
    UBIKA WAAP Gateway and Cloud API

    The UBIKA's WAAP management API provides a REST/JSON programming interface. It allows automation and scripting of WAAP administration tasks, such as management of reverse proxies and tunnels. The API documentation is shipped with the product itself. Once the product installed, you can access the documentation on the following URL https://ManagementWAAP:3001/api/v1/doc/  # noqa: E501

    The version of the OpenAPI document: 1.0.9
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubika_waap_api_client.configuration import Configuration


class CreateTunnelSuccessDataNetworkOutgoing(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address': 'str',
        'port': 'int',
        'load_balancer': 'CreateApplianceSysctlProfile',
        'pooling_interface': 'CreateApplianceSysctlProfile',
        'pooling_port': 'int'
    }

    attribute_map = {
        'address': 'address',
        'port': 'port',
        'load_balancer': 'loadBalancer',
        'pooling_interface': 'poolingInterface',
        'pooling_port': 'poolingPort'
    }

    def __init__(self, address=None, port=None, load_balancer=None, pooling_interface=None, pooling_port=None, local_vars_configuration=None):  # noqa: E501
        """CreateTunnelSuccessDataNetworkOutgoing - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._address = None
        self._port = None
        self._load_balancer = None
        self._pooling_interface = None
        self._pooling_port = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if port is not None:
            self.port = port
        if load_balancer is not None:
            self.load_balancer = load_balancer
        if pooling_interface is not None:
            self.pooling_interface = pooling_interface
        if pooling_port is not None:
            self.pooling_port = pooling_port

    @property
    def address(self):
        """Gets the address of this CreateTunnelSuccessDataNetworkOutgoing.  # noqa: E501


        :return: The address of this CreateTunnelSuccessDataNetworkOutgoing.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CreateTunnelSuccessDataNetworkOutgoing.


        :param address: The address of this CreateTunnelSuccessDataNetworkOutgoing.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def port(self):
        """Gets the port of this CreateTunnelSuccessDataNetworkOutgoing.  # noqa: E501


        :return: The port of this CreateTunnelSuccessDataNetworkOutgoing.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this CreateTunnelSuccessDataNetworkOutgoing.


        :param port: The port of this CreateTunnelSuccessDataNetworkOutgoing.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def load_balancer(self):
        """Gets the load_balancer of this CreateTunnelSuccessDataNetworkOutgoing.  # noqa: E501


        :return: The load_balancer of this CreateTunnelSuccessDataNetworkOutgoing.  # noqa: E501
        :rtype: CreateApplianceSysctlProfile
        """
        return self._load_balancer

    @load_balancer.setter
    def load_balancer(self, load_balancer):
        """Sets the load_balancer of this CreateTunnelSuccessDataNetworkOutgoing.


        :param load_balancer: The load_balancer of this CreateTunnelSuccessDataNetworkOutgoing.  # noqa: E501
        :type: CreateApplianceSysctlProfile
        """

        self._load_balancer = load_balancer

    @property
    def pooling_interface(self):
        """Gets the pooling_interface of this CreateTunnelSuccessDataNetworkOutgoing.  # noqa: E501


        :return: The pooling_interface of this CreateTunnelSuccessDataNetworkOutgoing.  # noqa: E501
        :rtype: CreateApplianceSysctlProfile
        """
        return self._pooling_interface

    @pooling_interface.setter
    def pooling_interface(self, pooling_interface):
        """Sets the pooling_interface of this CreateTunnelSuccessDataNetworkOutgoing.


        :param pooling_interface: The pooling_interface of this CreateTunnelSuccessDataNetworkOutgoing.  # noqa: E501
        :type: CreateApplianceSysctlProfile
        """

        self._pooling_interface = pooling_interface

    @property
    def pooling_port(self):
        """Gets the pooling_port of this CreateTunnelSuccessDataNetworkOutgoing.  # noqa: E501


        :return: The pooling_port of this CreateTunnelSuccessDataNetworkOutgoing.  # noqa: E501
        :rtype: int
        """
        return self._pooling_port

    @pooling_port.setter
    def pooling_port(self, pooling_port):
        """Sets the pooling_port of this CreateTunnelSuccessDataNetworkOutgoing.


        :param pooling_port: The pooling_port of this CreateTunnelSuccessDataNetworkOutgoing.  # noqa: E501
        :type: int
        """

        self._pooling_port = pooling_port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTunnelSuccessDataNetworkOutgoing):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateTunnelSuccessDataNetworkOutgoing):
            return True

        return self.to_dict() != other.to_dict()
