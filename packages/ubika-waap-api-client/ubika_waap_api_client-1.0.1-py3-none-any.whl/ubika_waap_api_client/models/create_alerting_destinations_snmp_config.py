# coding: utf-8

"""
    UBIKA WAAP Gateway and Cloud API

    The UBIKA's WAAP management API provides a REST/JSON programming interface. It allows automation and scripting of WAAP administration tasks, such as management of reverse proxies and tunnels. The API documentation is shipped with the product itself. Once the product installed, you can access the documentation on the following URL https://ManagementWAAP:3001/api/v1/doc/  # noqa: E501

    The version of the OpenAPI document: 1.0.9
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubika_waap_api_client.configuration import Configuration


class CreateAlertingDestinationsSNMPConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ip': 'str',
        'port': 'int',
        'community': 'str',
        'oid': 'str'
    }

    attribute_map = {
        'ip': 'ip',
        'port': 'port',
        'community': 'community',
        'oid': 'oid'
    }

    def __init__(self, ip=None, port=None, community=None, oid=None, local_vars_configuration=None):  # noqa: E501
        """CreateAlertingDestinationsSNMPConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ip = None
        self._port = None
        self._community = None
        self._oid = None
        self.discriminator = None

        self.ip = ip
        self.port = port
        self.community = community
        if oid is not None:
            self.oid = oid

    @property
    def ip(self):
        """Gets the ip of this CreateAlertingDestinationsSNMPConfig.  # noqa: E501


        :return: The ip of this CreateAlertingDestinationsSNMPConfig.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this CreateAlertingDestinationsSNMPConfig.


        :param ip: The ip of this CreateAlertingDestinationsSNMPConfig.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and ip is None:  # noqa: E501
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def port(self):
        """Gets the port of this CreateAlertingDestinationsSNMPConfig.  # noqa: E501


        :return: The port of this CreateAlertingDestinationsSNMPConfig.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this CreateAlertingDestinationsSNMPConfig.


        :param port: The port of this CreateAlertingDestinationsSNMPConfig.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and port is None:  # noqa: E501
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def community(self):
        """Gets the community of this CreateAlertingDestinationsSNMPConfig.  # noqa: E501


        :return: The community of this CreateAlertingDestinationsSNMPConfig.  # noqa: E501
        :rtype: str
        """
        return self._community

    @community.setter
    def community(self, community):
        """Sets the community of this CreateAlertingDestinationsSNMPConfig.


        :param community: The community of this CreateAlertingDestinationsSNMPConfig.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and community is None:  # noqa: E501
            raise ValueError("Invalid value for `community`, must not be `None`")  # noqa: E501

        self._community = community

    @property
    def oid(self):
        """Gets the oid of this CreateAlertingDestinationsSNMPConfig.  # noqa: E501


        :return: The oid of this CreateAlertingDestinationsSNMPConfig.  # noqa: E501
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this CreateAlertingDestinationsSNMPConfig.


        :param oid: The oid of this CreateAlertingDestinationsSNMPConfig.  # noqa: E501
        :type: str
        """

        self._oid = oid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAlertingDestinationsSNMPConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateAlertingDestinationsSNMPConfig):
            return True

        return self.to_dict() != other.to_dict()
