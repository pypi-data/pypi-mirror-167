# coding: utf-8

"""
    UBIKA WAAP Gateway and Cloud API

    The UBIKA's WAAP management API provides a REST/JSON programming interface. It allows automation and scripting of WAAP administration tasks, such as management of reverse proxies and tunnels. The API documentation is shipped with the product itself. Once the product installed, you can access the documentation on the following URL https://ManagementWAAP:3001/api/v1/doc/  # noqa: E501

    The version of the OpenAPI document: 1.0.9
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubika_waap_api_client.configuration import Configuration


class PatchApplianceSuccessDataSnmp(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enable': 'bool',
        'interfaces': 'list[PatchApplianceInterfacesSuccessArray]',
        'port': 'str',
        'sys_location': 'str',
        'sys_contact': 'str',
        'community': 'str',
        'network_filter': 'str'
    }

    attribute_map = {
        'enable': 'enable',
        'interfaces': 'interfaces',
        'port': 'port',
        'sys_location': 'sysLocation',
        'sys_contact': 'sysContact',
        'community': 'community',
        'network_filter': 'networkFilter'
    }

    def __init__(self, enable=None, interfaces=None, port=None, sys_location=None, sys_contact=None, community=None, network_filter=None, local_vars_configuration=None):  # noqa: E501
        """PatchApplianceSuccessDataSnmp - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._enable = None
        self._interfaces = None
        self._port = None
        self._sys_location = None
        self._sys_contact = None
        self._community = None
        self._network_filter = None
        self.discriminator = None

        if enable is not None:
            self.enable = enable
        if interfaces is not None:
            self.interfaces = interfaces
        if port is not None:
            self.port = port
        if sys_location is not None:
            self.sys_location = sys_location
        if sys_contact is not None:
            self.sys_contact = sys_contact
        if community is not None:
            self.community = community
        if network_filter is not None:
            self.network_filter = network_filter

    @property
    def enable(self):
        """Gets the enable of this PatchApplianceSuccessDataSnmp.  # noqa: E501


        :return: The enable of this PatchApplianceSuccessDataSnmp.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this PatchApplianceSuccessDataSnmp.


        :param enable: The enable of this PatchApplianceSuccessDataSnmp.  # noqa: E501
        :type: bool
        """

        self._enable = enable

    @property
    def interfaces(self):
        """Gets the interfaces of this PatchApplianceSuccessDataSnmp.  # noqa: E501


        :return: The interfaces of this PatchApplianceSuccessDataSnmp.  # noqa: E501
        :rtype: list[PatchApplianceInterfacesSuccessArray]
        """
        return self._interfaces

    @interfaces.setter
    def interfaces(self, interfaces):
        """Sets the interfaces of this PatchApplianceSuccessDataSnmp.


        :param interfaces: The interfaces of this PatchApplianceSuccessDataSnmp.  # noqa: E501
        :type: list[PatchApplianceInterfacesSuccessArray]
        """

        self._interfaces = interfaces

    @property
    def port(self):
        """Gets the port of this PatchApplianceSuccessDataSnmp.  # noqa: E501


        :return: The port of this PatchApplianceSuccessDataSnmp.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this PatchApplianceSuccessDataSnmp.


        :param port: The port of this PatchApplianceSuccessDataSnmp.  # noqa: E501
        :type: str
        """

        self._port = port

    @property
    def sys_location(self):
        """Gets the sys_location of this PatchApplianceSuccessDataSnmp.  # noqa: E501


        :return: The sys_location of this PatchApplianceSuccessDataSnmp.  # noqa: E501
        :rtype: str
        """
        return self._sys_location

    @sys_location.setter
    def sys_location(self, sys_location):
        """Sets the sys_location of this PatchApplianceSuccessDataSnmp.


        :param sys_location: The sys_location of this PatchApplianceSuccessDataSnmp.  # noqa: E501
        :type: str
        """

        self._sys_location = sys_location

    @property
    def sys_contact(self):
        """Gets the sys_contact of this PatchApplianceSuccessDataSnmp.  # noqa: E501


        :return: The sys_contact of this PatchApplianceSuccessDataSnmp.  # noqa: E501
        :rtype: str
        """
        return self._sys_contact

    @sys_contact.setter
    def sys_contact(self, sys_contact):
        """Sets the sys_contact of this PatchApplianceSuccessDataSnmp.


        :param sys_contact: The sys_contact of this PatchApplianceSuccessDataSnmp.  # noqa: E501
        :type: str
        """

        self._sys_contact = sys_contact

    @property
    def community(self):
        """Gets the community of this PatchApplianceSuccessDataSnmp.  # noqa: E501


        :return: The community of this PatchApplianceSuccessDataSnmp.  # noqa: E501
        :rtype: str
        """
        return self._community

    @community.setter
    def community(self, community):
        """Sets the community of this PatchApplianceSuccessDataSnmp.


        :param community: The community of this PatchApplianceSuccessDataSnmp.  # noqa: E501
        :type: str
        """

        self._community = community

    @property
    def network_filter(self):
        """Gets the network_filter of this PatchApplianceSuccessDataSnmp.  # noqa: E501


        :return: The network_filter of this PatchApplianceSuccessDataSnmp.  # noqa: E501
        :rtype: str
        """
        return self._network_filter

    @network_filter.setter
    def network_filter(self, network_filter):
        """Sets the network_filter of this PatchApplianceSuccessDataSnmp.


        :param network_filter: The network_filter of this PatchApplianceSuccessDataSnmp.  # noqa: E501
        :type: str
        """

        self._network_filter = network_filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PatchApplianceSuccessDataSnmp):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PatchApplianceSuccessDataSnmp):
            return True

        return self.to_dict() != other.to_dict()
