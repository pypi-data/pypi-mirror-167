# coding: utf-8

"""
    UBIKA WAAP Gateway and Cloud API

    The UBIKA's WAAP management API provides a REST/JSON programming interface. It allows automation and scripting of WAAP administration tasks, such as management of reverse proxies and tunnels. The API documentation is shipped with the product itself. Once the product installed, you can access the documentation on the following URL https://ManagementWAAP:3001/api/v1/doc/  # noqa: E501

    The version of the OpenAPI document: 1.0.9
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubika_waap_api_client.configuration import Configuration


class CreateAppliance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'admin_ip': 'str',
        'admin_port': 'int',
        'location': 'str',
        'contact': 'str',
        'sysctl_profile': 'CreateApplianceSysctlProfile'
    }

    attribute_map = {
        'name': 'name',
        'admin_ip': 'adminIp',
        'admin_port': 'adminPort',
        'location': 'location',
        'contact': 'contact',
        'sysctl_profile': 'sysctlProfile'
    }

    def __init__(self, name=None, admin_ip=None, admin_port=None, location=None, contact=None, sysctl_profile=None, local_vars_configuration=None):  # noqa: E501
        """CreateAppliance - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._admin_ip = None
        self._admin_port = None
        self._location = None
        self._contact = None
        self._sysctl_profile = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if admin_ip is not None:
            self.admin_ip = admin_ip
        if admin_port is not None:
            self.admin_port = admin_port
        if location is not None:
            self.location = location
        if contact is not None:
            self.contact = contact
        if sysctl_profile is not None:
            self.sysctl_profile = sysctl_profile

    @property
    def name(self):
        """Gets the name of this CreateAppliance.  # noqa: E501


        :return: The name of this CreateAppliance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateAppliance.


        :param name: The name of this CreateAppliance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def admin_ip(self):
        """Gets the admin_ip of this CreateAppliance.  # noqa: E501


        :return: The admin_ip of this CreateAppliance.  # noqa: E501
        :rtype: str
        """
        return self._admin_ip

    @admin_ip.setter
    def admin_ip(self, admin_ip):
        """Sets the admin_ip of this CreateAppliance.


        :param admin_ip: The admin_ip of this CreateAppliance.  # noqa: E501
        :type: str
        """

        self._admin_ip = admin_ip

    @property
    def admin_port(self):
        """Gets the admin_port of this CreateAppliance.  # noqa: E501


        :return: The admin_port of this CreateAppliance.  # noqa: E501
        :rtype: int
        """
        return self._admin_port

    @admin_port.setter
    def admin_port(self, admin_port):
        """Sets the admin_port of this CreateAppliance.


        :param admin_port: The admin_port of this CreateAppliance.  # noqa: E501
        :type: int
        """

        self._admin_port = admin_port

    @property
    def location(self):
        """Gets the location of this CreateAppliance.  # noqa: E501


        :return: The location of this CreateAppliance.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CreateAppliance.


        :param location: The location of this CreateAppliance.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def contact(self):
        """Gets the contact of this CreateAppliance.  # noqa: E501


        :return: The contact of this CreateAppliance.  # noqa: E501
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this CreateAppliance.


        :param contact: The contact of this CreateAppliance.  # noqa: E501
        :type: str
        """

        self._contact = contact

    @property
    def sysctl_profile(self):
        """Gets the sysctl_profile of this CreateAppliance.  # noqa: E501


        :return: The sysctl_profile of this CreateAppliance.  # noqa: E501
        :rtype: CreateApplianceSysctlProfile
        """
        return self._sysctl_profile

    @sysctl_profile.setter
    def sysctl_profile(self, sysctl_profile):
        """Sets the sysctl_profile of this CreateAppliance.


        :param sysctl_profile: The sysctl_profile of this CreateAppliance.  # noqa: E501
        :type: CreateApplianceSysctlProfile
        """

        self._sysctl_profile = sysctl_profile

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAppliance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateAppliance):
            return True

        return self.to_dict() != other.to_dict()
