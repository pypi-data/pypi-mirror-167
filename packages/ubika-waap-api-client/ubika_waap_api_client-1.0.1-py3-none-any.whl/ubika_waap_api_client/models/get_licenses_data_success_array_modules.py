# coding: utf-8

"""
    UBIKA WAAP Gateway and Cloud API

    The UBIKA's WAAP management API provides a REST/JSON programming interface. It allows automation and scripting of WAAP administration tasks, such as management of reverse proxies and tunnels. The API documentation is shipped with the product itself. Once the product installed, you can access the documentation on the following URL https://ManagementWAAP:3001/api/v1/doc/  # noqa: E501

    The version of the OpenAPI document: 1.0.9
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubika_waap_api_client.configuration import Configuration


class GetLicensesDataSuccessArrayModules(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'security': 'bool',
        'security_extended': 'bool',
        'api': 'bool',
        'api_extended': 'bool',
        'geolocation': 'bool',
        'analytics': 'bool',
        'wam': 'bool',
        'distributed': 'bool',
        'ip_reputation': 'str'
    }

    attribute_map = {
        'security': 'security',
        'security_extended': 'securityExtended',
        'api': 'api',
        'api_extended': 'apiExtended',
        'geolocation': 'geolocation',
        'analytics': 'analytics',
        'wam': 'wam',
        'distributed': 'distributed',
        'ip_reputation': 'ipReputation'
    }

    def __init__(self, security=None, security_extended=None, api=None, api_extended=None, geolocation=None, analytics=None, wam=None, distributed=None, ip_reputation=None, local_vars_configuration=None):  # noqa: E501
        """GetLicensesDataSuccessArrayModules - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._security = None
        self._security_extended = None
        self._api = None
        self._api_extended = None
        self._geolocation = None
        self._analytics = None
        self._wam = None
        self._distributed = None
        self._ip_reputation = None
        self.discriminator = None

        if security is not None:
            self.security = security
        if security_extended is not None:
            self.security_extended = security_extended
        if api is not None:
            self.api = api
        if api_extended is not None:
            self.api_extended = api_extended
        if geolocation is not None:
            self.geolocation = geolocation
        if analytics is not None:
            self.analytics = analytics
        if wam is not None:
            self.wam = wam
        if distributed is not None:
            self.distributed = distributed
        if ip_reputation is not None:
            self.ip_reputation = ip_reputation

    @property
    def security(self):
        """Gets the security of this GetLicensesDataSuccessArrayModules.  # noqa: E501


        :return: The security of this GetLicensesDataSuccessArrayModules.  # noqa: E501
        :rtype: bool
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this GetLicensesDataSuccessArrayModules.


        :param security: The security of this GetLicensesDataSuccessArrayModules.  # noqa: E501
        :type: bool
        """

        self._security = security

    @property
    def security_extended(self):
        """Gets the security_extended of this GetLicensesDataSuccessArrayModules.  # noqa: E501


        :return: The security_extended of this GetLicensesDataSuccessArrayModules.  # noqa: E501
        :rtype: bool
        """
        return self._security_extended

    @security_extended.setter
    def security_extended(self, security_extended):
        """Sets the security_extended of this GetLicensesDataSuccessArrayModules.


        :param security_extended: The security_extended of this GetLicensesDataSuccessArrayModules.  # noqa: E501
        :type: bool
        """

        self._security_extended = security_extended

    @property
    def api(self):
        """Gets the api of this GetLicensesDataSuccessArrayModules.  # noqa: E501


        :return: The api of this GetLicensesDataSuccessArrayModules.  # noqa: E501
        :rtype: bool
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this GetLicensesDataSuccessArrayModules.


        :param api: The api of this GetLicensesDataSuccessArrayModules.  # noqa: E501
        :type: bool
        """

        self._api = api

    @property
    def api_extended(self):
        """Gets the api_extended of this GetLicensesDataSuccessArrayModules.  # noqa: E501


        :return: The api_extended of this GetLicensesDataSuccessArrayModules.  # noqa: E501
        :rtype: bool
        """
        return self._api_extended

    @api_extended.setter
    def api_extended(self, api_extended):
        """Sets the api_extended of this GetLicensesDataSuccessArrayModules.


        :param api_extended: The api_extended of this GetLicensesDataSuccessArrayModules.  # noqa: E501
        :type: bool
        """

        self._api_extended = api_extended

    @property
    def geolocation(self):
        """Gets the geolocation of this GetLicensesDataSuccessArrayModules.  # noqa: E501


        :return: The geolocation of this GetLicensesDataSuccessArrayModules.  # noqa: E501
        :rtype: bool
        """
        return self._geolocation

    @geolocation.setter
    def geolocation(self, geolocation):
        """Sets the geolocation of this GetLicensesDataSuccessArrayModules.


        :param geolocation: The geolocation of this GetLicensesDataSuccessArrayModules.  # noqa: E501
        :type: bool
        """

        self._geolocation = geolocation

    @property
    def analytics(self):
        """Gets the analytics of this GetLicensesDataSuccessArrayModules.  # noqa: E501


        :return: The analytics of this GetLicensesDataSuccessArrayModules.  # noqa: E501
        :rtype: bool
        """
        return self._analytics

    @analytics.setter
    def analytics(self, analytics):
        """Sets the analytics of this GetLicensesDataSuccessArrayModules.


        :param analytics: The analytics of this GetLicensesDataSuccessArrayModules.  # noqa: E501
        :type: bool
        """

        self._analytics = analytics

    @property
    def wam(self):
        """Gets the wam of this GetLicensesDataSuccessArrayModules.  # noqa: E501


        :return: The wam of this GetLicensesDataSuccessArrayModules.  # noqa: E501
        :rtype: bool
        """
        return self._wam

    @wam.setter
    def wam(self, wam):
        """Sets the wam of this GetLicensesDataSuccessArrayModules.


        :param wam: The wam of this GetLicensesDataSuccessArrayModules.  # noqa: E501
        :type: bool
        """

        self._wam = wam

    @property
    def distributed(self):
        """Gets the distributed of this GetLicensesDataSuccessArrayModules.  # noqa: E501


        :return: The distributed of this GetLicensesDataSuccessArrayModules.  # noqa: E501
        :rtype: bool
        """
        return self._distributed

    @distributed.setter
    def distributed(self, distributed):
        """Sets the distributed of this GetLicensesDataSuccessArrayModules.


        :param distributed: The distributed of this GetLicensesDataSuccessArrayModules.  # noqa: E501
        :type: bool
        """

        self._distributed = distributed

    @property
    def ip_reputation(self):
        """Gets the ip_reputation of this GetLicensesDataSuccessArrayModules.  # noqa: E501


        :return: The ip_reputation of this GetLicensesDataSuccessArrayModules.  # noqa: E501
        :rtype: str
        """
        return self._ip_reputation

    @ip_reputation.setter
    def ip_reputation(self, ip_reputation):
        """Sets the ip_reputation of this GetLicensesDataSuccessArrayModules.


        :param ip_reputation: The ip_reputation of this GetLicensesDataSuccessArrayModules.  # noqa: E501
        :type: str
        """

        self._ip_reputation = ip_reputation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetLicensesDataSuccessArrayModules):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetLicensesDataSuccessArrayModules):
            return True

        return self.to_dict() != other.to_dict()
