# coding: utf-8

"""
    UBIKA WAAP Gateway and Cloud API

    The UBIKA's WAAP management API provides a REST/JSON programming interface. It allows automation and scripting of WAAP administration tasks, such as management of reverse proxies and tunnels. The API documentation is shipped with the product itself. Once the product installed, you can access the documentation on the following URL https://ManagementWAAP:3001/api/v1/doc/  # noqa: E501

    The version of the OpenAPI document: 1.0.9
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubika_waap_api_client.configuration import Configuration


class CreateCertificate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'password': 'str',
        'pkcs12': 'file',
        'key': 'file',
        'crt': 'file',
        'chain': 'file',
        'type': 'str'
    }

    attribute_map = {
        'name': 'name',
        'password': 'password',
        'pkcs12': 'pkcs12',
        'key': 'key',
        'crt': 'crt',
        'chain': 'chain',
        'type': 'type'
    }

    def __init__(self, name=None, password=None, pkcs12=None, key=None, crt=None, chain=None, type=None, local_vars_configuration=None):  # noqa: E501
        """CreateCertificate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._password = None
        self._pkcs12 = None
        self._key = None
        self._crt = None
        self._chain = None
        self._type = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if password is not None:
            self.password = password
        if pkcs12 is not None:
            self.pkcs12 = pkcs12
        if key is not None:
            self.key = key
        if crt is not None:
            self.crt = crt
        if chain is not None:
            self.chain = chain
        if type is not None:
            self.type = type

    @property
    def name(self):
        """Gets the name of this CreateCertificate.  # noqa: E501


        :return: The name of this CreateCertificate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateCertificate.


        :param name: The name of this CreateCertificate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def password(self):
        """Gets the password of this CreateCertificate.  # noqa: E501


        :return: The password of this CreateCertificate.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CreateCertificate.


        :param password: The password of this CreateCertificate.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def pkcs12(self):
        """Gets the pkcs12 of this CreateCertificate.  # noqa: E501


        :return: The pkcs12 of this CreateCertificate.  # noqa: E501
        :rtype: file
        """
        return self._pkcs12

    @pkcs12.setter
    def pkcs12(self, pkcs12):
        """Sets the pkcs12 of this CreateCertificate.


        :param pkcs12: The pkcs12 of this CreateCertificate.  # noqa: E501
        :type: file
        """

        self._pkcs12 = pkcs12

    @property
    def key(self):
        """Gets the key of this CreateCertificate.  # noqa: E501


        :return: The key of this CreateCertificate.  # noqa: E501
        :rtype: file
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CreateCertificate.


        :param key: The key of this CreateCertificate.  # noqa: E501
        :type: file
        """

        self._key = key

    @property
    def crt(self):
        """Gets the crt of this CreateCertificate.  # noqa: E501


        :return: The crt of this CreateCertificate.  # noqa: E501
        :rtype: file
        """
        return self._crt

    @crt.setter
    def crt(self, crt):
        """Sets the crt of this CreateCertificate.


        :param crt: The crt of this CreateCertificate.  # noqa: E501
        :type: file
        """

        self._crt = crt

    @property
    def chain(self):
        """Gets the chain of this CreateCertificate.  # noqa: E501


        :return: The chain of this CreateCertificate.  # noqa: E501
        :rtype: file
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this CreateCertificate.


        :param chain: The chain of this CreateCertificate.  # noqa: E501
        :type: file
        """

        self._chain = chain

    @property
    def type(self):
        """Gets the type of this CreateCertificate.  # noqa: E501


        :return: The type of this CreateCertificate.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateCertificate.


        :param type: The type of this CreateCertificate.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCertificate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateCertificate):
            return True

        return self.to_dict() != other.to_dict()
