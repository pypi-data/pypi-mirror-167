# coding: utf-8

"""
    UBIKA WAAP Gateway and Cloud API

    The UBIKA's WAAP management API provides a REST/JSON programming interface. It allows automation and scripting of WAAP administration tasks, such as management of reverse proxies and tunnels. The API documentation is shipped with the product itself. Once the product installed, you can access the documentation on the following URL https://ManagementWAAP:3001/api/v1/doc/  # noqa: E501

    The version of the OpenAPI document: 1.0.9
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ubika_waap_api_client.configuration import Configuration


class CreateTunnelSuccessDataNetworkIncoming(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'incoming_type': 'str',
        'ip': 'str',
        'port': 'int',
        'server_name': 'str',
        'interface': 'CreateTunnelSuccessDataNetworkIncomingInterface',
        'pooler_tunnel': 'CreateApplianceSysctlProfile',
        'http2_enabled': 'bool'
    }

    attribute_map = {
        'incoming_type': 'incomingType',
        'ip': 'ip',
        'port': 'port',
        'server_name': 'serverName',
        'interface': 'interface',
        'pooler_tunnel': 'poolerTunnel',
        'http2_enabled': 'http2Enabled'
    }

    def __init__(self, incoming_type=None, ip=None, port=None, server_name=None, interface=None, pooler_tunnel=None, http2_enabled=None, local_vars_configuration=None):  # noqa: E501
        """CreateTunnelSuccessDataNetworkIncoming - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._incoming_type = None
        self._ip = None
        self._port = None
        self._server_name = None
        self._interface = None
        self._pooler_tunnel = None
        self._http2_enabled = None
        self.discriminator = None

        if incoming_type is not None:
            self.incoming_type = incoming_type
        if ip is not None:
            self.ip = ip
        if port is not None:
            self.port = port
        if server_name is not None:
            self.server_name = server_name
        if interface is not None:
            self.interface = interface
        if pooler_tunnel is not None:
            self.pooler_tunnel = pooler_tunnel
        if http2_enabled is not None:
            self.http2_enabled = http2_enabled

    @property
    def incoming_type(self):
        """Gets the incoming_type of this CreateTunnelSuccessDataNetworkIncoming.  # noqa: E501


        :return: The incoming_type of this CreateTunnelSuccessDataNetworkIncoming.  # noqa: E501
        :rtype: str
        """
        return self._incoming_type

    @incoming_type.setter
    def incoming_type(self, incoming_type):
        """Sets the incoming_type of this CreateTunnelSuccessDataNetworkIncoming.


        :param incoming_type: The incoming_type of this CreateTunnelSuccessDataNetworkIncoming.  # noqa: E501
        :type: str
        """

        self._incoming_type = incoming_type

    @property
    def ip(self):
        """Gets the ip of this CreateTunnelSuccessDataNetworkIncoming.  # noqa: E501


        :return: The ip of this CreateTunnelSuccessDataNetworkIncoming.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this CreateTunnelSuccessDataNetworkIncoming.


        :param ip: The ip of this CreateTunnelSuccessDataNetworkIncoming.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def port(self):
        """Gets the port of this CreateTunnelSuccessDataNetworkIncoming.  # noqa: E501


        :return: The port of this CreateTunnelSuccessDataNetworkIncoming.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this CreateTunnelSuccessDataNetworkIncoming.


        :param port: The port of this CreateTunnelSuccessDataNetworkIncoming.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def server_name(self):
        """Gets the server_name of this CreateTunnelSuccessDataNetworkIncoming.  # noqa: E501


        :return: The server_name of this CreateTunnelSuccessDataNetworkIncoming.  # noqa: E501
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this CreateTunnelSuccessDataNetworkIncoming.


        :param server_name: The server_name of this CreateTunnelSuccessDataNetworkIncoming.  # noqa: E501
        :type: str
        """

        self._server_name = server_name

    @property
    def interface(self):
        """Gets the interface of this CreateTunnelSuccessDataNetworkIncoming.  # noqa: E501


        :return: The interface of this CreateTunnelSuccessDataNetworkIncoming.  # noqa: E501
        :rtype: CreateTunnelSuccessDataNetworkIncomingInterface
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this CreateTunnelSuccessDataNetworkIncoming.


        :param interface: The interface of this CreateTunnelSuccessDataNetworkIncoming.  # noqa: E501
        :type: CreateTunnelSuccessDataNetworkIncomingInterface
        """

        self._interface = interface

    @property
    def pooler_tunnel(self):
        """Gets the pooler_tunnel of this CreateTunnelSuccessDataNetworkIncoming.  # noqa: E501


        :return: The pooler_tunnel of this CreateTunnelSuccessDataNetworkIncoming.  # noqa: E501
        :rtype: CreateApplianceSysctlProfile
        """
        return self._pooler_tunnel

    @pooler_tunnel.setter
    def pooler_tunnel(self, pooler_tunnel):
        """Sets the pooler_tunnel of this CreateTunnelSuccessDataNetworkIncoming.


        :param pooler_tunnel: The pooler_tunnel of this CreateTunnelSuccessDataNetworkIncoming.  # noqa: E501
        :type: CreateApplianceSysctlProfile
        """

        self._pooler_tunnel = pooler_tunnel

    @property
    def http2_enabled(self):
        """Gets the http2_enabled of this CreateTunnelSuccessDataNetworkIncoming.  # noqa: E501


        :return: The http2_enabled of this CreateTunnelSuccessDataNetworkIncoming.  # noqa: E501
        :rtype: bool
        """
        return self._http2_enabled

    @http2_enabled.setter
    def http2_enabled(self, http2_enabled):
        """Sets the http2_enabled of this CreateTunnelSuccessDataNetworkIncoming.


        :param http2_enabled: The http2_enabled of this CreateTunnelSuccessDataNetworkIncoming.  # noqa: E501
        :type: bool
        """

        self._http2_enabled = http2_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTunnelSuccessDataNetworkIncoming):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateTunnelSuccessDataNetworkIncoming):
            return True

        return self.to_dict() != other.to_dict()
