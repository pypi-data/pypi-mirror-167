Metadata-Version: 2.1
Name: async-newtel
Version: 0.0.1
Summary: New-Tel simple async client based on httpx.
Home-page: https://github.com/sensodevices/async-newtel
License: MIT
Keywords: newtel,new-tel,utilities,async
Author: Saltymakov Timofey
Author-email: saltytimofey@gmail.com
Requires-Python: >=3.6,<4.0
Classifier: Development Status :: 3 - Alpha
Classifier: Environment :: Web Environment
Classifier: Framework :: AsyncIO
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Information Technology
Classifier: Intended Audience :: System Administrators
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Topic :: Internet
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Internet :: WWW/HTTP :: HTTP Servers
Classifier: Topic :: Software Development
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Utilities
Classifier: Typing :: Typed
Requires-Dist: httpx (>=0.21,<0.22)
Project-URL: Repository, https://github.com/sensodevices/async-newtel
Description-Content-Type: text/markdown

# Async-NewTel

New-Tel simple async client based on httpx.

# Installation

```bash
pip install async-newtel
```

# Usage

```python
import async_newtel
import os

API_KEY = os.environ.get('API_KEY')
SIGNING_KEY = os.environ.get('SIGNING_KEY')

number = '+1234567890'
code = '1234'
# Send email with context manager

async with async_newtel.AsyncClient(
    api_key=API_KEY,
    signing_key=SIGNING_KEY
) as client:
    response = await client.call(number, code)

# Send email without context manager

client = simple_sendgrid.AsyncClient(api_key=API_KEY, signing_key=SIGNING_KEY)
await client.open()
response = await client.call(number, code)
await client.close()

```

