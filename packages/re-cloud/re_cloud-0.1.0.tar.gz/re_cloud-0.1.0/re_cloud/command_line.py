from doctest import REPORT_ONLY_FIRST_FAILURE
import click
import os
import logging
from re_cloud.upload import upload_files, UploadType
from re_cloud.tracking import anonymous_tracking
from re_cloud.utils import get_project_root, safe_load
import subprocess
import os

logger = logging.getLogger(__name__)

def get_project_dict(project_root):
    project_root = os.path.normpath(project_root)
    project_yaml_filepath = os.path.join(project_root, "dbt_project.yml")

    # get the project.yml contents
    if not os.path.lexists(project_yaml_filepath):
        raise Exception(
            "no dbt_project.yml found at expected path {}".format(project_yaml_filepath)
        )

    with open(project_yaml_filepath, "rb") as handle:
        contents = handle.read().decode("utf-8")

    project_dict = safe_load(contents)

    if not isinstance(project_dict, dict):
        raise Exception("dbt_project.yml does not parse to a dictionary")
    
    return project_dict


def get_target_paths(kwargs, re_data_target_dir=None):
    project_root = get_project_root(kwargs)
    project_dict = get_project_dict(project_root)
    dbt_target_path = os.path.abspath(project_dict['target-path'])

    if re_data_target_dir:
        re_data_target_path = os.path.abspath(re_data_target_dir)
    else:
        re_data_target_path = os.path.join(dbt_target_path, 're_data')

    return dbt_target_path, re_data_target_path


def add_options(options):
    def _add_options(func):
        for option in reversed(options):
            func = option(func)
        return func
    return _add_options

dbt_project_dir_option = click.option(
    '--project-dir',
    type=click.STRING,
    help="""
        Which directory to look in for the dbt_project.yml
        file. Default is the current working directory and its
        parents
    """
)


@click.group(help=f"re_cloud CLI")
def main():
    pass


@click.group(help=f"Upload artefacts to re_cloud for static hosting")
def upload():
    pass

@click.option(
    '--name',
    type=click.STRING,
    help="""
        Name of the upload used for identification
    """
)
@click.option(
    '--re-data-target-dir',
    type=click.STRING,
    help="""
        Which directory to store artefacts generated by re_data
        Defaults to the 'target-path' used in dbt_project.yml
    """
)
@upload.command()
@anonymous_tracking
@add_options([dbt_project_dir_option])
def re_data(name, re_data_target_dir, **kwargs):
    _, serve_dir = get_target_paths(kwargs=kwargs, re_data_target_dir=re_data_target_dir)
    upload_files(UploadType.RE_DATA, serve_dir, name)

@click.option(
    '--name',
    type=click.STRING,
    help="""
        Name of the upload used for identification
    """
)
@upload.command()
@anonymous_tracking
@add_options([dbt_project_dir_option])
def dbt_docs(name, **kwargs):
    dbt_target_path, _ = get_target_paths(kwargs=kwargs)
    upload_files(UploadType.DBT, dbt_target_path, name)


@click.option(
    '--name',
    type=click.STRING,
    help="""
        Name of the upload used for identification
    """
)
@click.option(
    '--report-file',
    type=click.STRING,
    help="""
        Pandas profiling file with html report
    """,
    required=True
)
@upload.command()
@anonymous_tracking
def pandas_profiling(name, report_file, **kwargs):

    upload_files(UploadType.PANDAS_PROFILING, report_file, name)

@click.option(
    '--name',
    type=click.STRING,
    help="""
        Name of the upload used for identification
    """
)
@upload.command()
@anonymous_tracking
def great_expectations(name, **kwargs):
    cwd = os.getcwd()
    upload_path = f'{cwd}/uncommitted/data_docs/local_site/'
    files_to_exclude = {'.DS_Store'}
    file_paths = []
    for (dirpath, dirnames, filenames) in os.walk(upload_path):
        relative_path = dirpath.replace(f'{upload_path}', '')
        relative_file_names = [os.path.join(relative_path, file_name) for file_name in filenames if file_name not in files_to_exclude]
        file_paths.extend(relative_file_names)

    upload_path_without_slash = upload_path[:-1]
    upload_files(UploadType.GREAT_EXPECTATIONS, target=upload_path_without_slash, name=name, file_paths=file_paths)


@click.option(
    '--name',
    type=click.STRING,
    help="""
        Name of the upload used for identification
    """
)
@click.option(
    '--file',
    type=click.STRING,
    help="""
        ipynb notebooks file to upload
    """,
    required=True
)
@upload.command()
@anonymous_tracking
def jupyter_notebook(name, file, **kwargs):
    command_list = ['jupyter', 'nbconvert', '--to', 'html', file]
    notebook_html_file = file.replace('.ipynb', '.html')

    completed_process = subprocess.run(command_list)
    completed_process.check_returncode()
    upload_files(UploadType.JUPYTER_NOTEBOOK, notebook_html_file, name)


@click.option(
    '--name',
    type=click.STRING,
    help="""
        Name of the upload used for identification
    """
)
@click.option(
    '--file',
    type=click.STRING,
    help="""
        custom html file to upload
    """,
    required=True
)
@upload.command()
@anonymous_tracking
def custom(name, file, **kwargs):

    upload_files(UploadType.CUSTOM, file, name)



main.add_command(upload)
