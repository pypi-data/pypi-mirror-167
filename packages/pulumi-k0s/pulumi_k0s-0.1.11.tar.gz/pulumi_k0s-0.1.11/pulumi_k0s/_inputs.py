# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'APIArgs',
    'CalicoArgs',
    'ConfigArgs',
    'ContainerImageArgs',
    'ControllerManagerArgs',
    'DualStackArgs',
    'EtcdArgs',
    'HooksArgs',
    'HookArgs',
    'HostArgs',
    'ImagesCalicoArgs',
    'ImagesKubeRouterArgs',
    'ImagesArgs',
    'InstallConfigUsersArgs',
    'InstallConfigArgs',
    'K0sSpecArgs',
    'K0sArgs',
    'KineArgs',
    'KonnectivityArgs',
    'KubeProxyArgs',
    'KubeRouterArgs',
    'LocalhostArgs',
    'MetadataArgs',
    'NetworkArgs',
    'PodSecurityPolicyArgs',
    'SSHArgs',
    'SchedulerArgs',
    'SpecArgs',
    'StorageArgs',
    'TelemetryArgs',
    'UploadFileArgs',
    'WinRMArgs',
]

@pulumi.input_type
class APIArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 external_address: Optional[pulumi.Input[str]] = None,
                 extra_args: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 k0s_api_port: Optional[pulumi.Input[float]] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 sans: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if external_address is not None:
            pulumi.set(__self__, "external_address", external_address)
        if extra_args is not None:
            pulumi.set(__self__, "extra_args", extra_args)
        if k0s_api_port is not None:
            pulumi.set(__self__, "k0s_api_port", k0s_api_port)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if sans is not None:
            pulumi.set(__self__, "sans", sans)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="externalAddress")
    def external_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_address")

    @external_address.setter
    def external_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_address", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="k0sApiPort")
    def k0s_api_port(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "k0s_api_port")

    @k0s_api_port.setter
    def k0s_api_port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "k0s_api_port", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def sans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "sans")

    @sans.setter
    def sans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sans", value)


@pulumi.input_type
class CalicoArgs:
    def __init__(__self__, *,
                 flex_volume_driver_path: Optional[pulumi.Input[str]] = None,
                 ip_autodetection_method: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[float]] = None,
                 overlay: Optional[pulumi.Input[str]] = None,
                 vxlan_port: Optional[pulumi.Input[float]] = None,
                 vxlan_vni: Optional[pulumi.Input[float]] = None,
                 wireguard: Optional[pulumi.Input[bool]] = None):
        if flex_volume_driver_path is not None:
            pulumi.set(__self__, "flex_volume_driver_path", flex_volume_driver_path)
        if ip_autodetection_method is not None:
            pulumi.set(__self__, "ip_autodetection_method", ip_autodetection_method)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if overlay is not None:
            pulumi.set(__self__, "overlay", overlay)
        if vxlan_port is not None:
            pulumi.set(__self__, "vxlan_port", vxlan_port)
        if vxlan_vni is not None:
            pulumi.set(__self__, "vxlan_vni", vxlan_vni)
        if wireguard is not None:
            pulumi.set(__self__, "wireguard", wireguard)

    @property
    @pulumi.getter(name="flexVolumeDriverPath")
    def flex_volume_driver_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flex_volume_driver_path")

    @flex_volume_driver_path.setter
    def flex_volume_driver_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flex_volume_driver_path", value)

    @property
    @pulumi.getter(name="ipAutodetectionMethod")
    def ip_autodetection_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_autodetection_method")

    @ip_autodetection_method.setter
    def ip_autodetection_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_autodetection_method", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def overlay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "overlay")

    @overlay.setter
    def overlay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overlay", value)

    @property
    @pulumi.getter(name="vxlanPort")
    def vxlan_port(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "vxlan_port")

    @vxlan_port.setter
    def vxlan_port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "vxlan_port", value)

    @property
    @pulumi.getter(name="vxlanVNI")
    def vxlan_vni(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "vxlan_vni")

    @vxlan_vni.setter
    def vxlan_vni(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "vxlan_vni", value)

    @property
    @pulumi.getter
    def wireguard(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "wireguard")

    @wireguard.setter
    def wireguard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wireguard", value)


@pulumi.input_type
class ConfigArgs:
    def __init__(__self__, *,
                 metadata: Optional[pulumi.Input['MetadataArgs']] = None,
                 spec: Optional[pulumi.Input['K0sSpecArgs']] = None):
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['MetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['MetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['K0sSpecArgs']]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['K0sSpecArgs']]):
        pulumi.set(self, "spec", value)


@pulumi.input_type
class ContainerImageArgs:
    def __init__(__self__, *,
                 image: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if image is not None:
            pulumi.set(__self__, "image", image)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ControllerManagerArgs:
    def __init__(__self__, *,
                 extra_args: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if extra_args is not None:
            pulumi.set(__self__, "extra_args", extra_args)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "extra_args", value)


@pulumi.input_type
class DualStackArgs:
    def __init__(__self__, *,
                 i_pv6pod_cidr: Optional[pulumi.Input[str]] = None,
                 i_pv6service_cidr: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if i_pv6pod_cidr is not None:
            pulumi.set(__self__, "i_pv6pod_cidr", i_pv6pod_cidr)
        if i_pv6service_cidr is not None:
            pulumi.set(__self__, "i_pv6service_cidr", i_pv6service_cidr)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="IPv6podCIDR")
    def i_pv6pod_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "i_pv6pod_cidr")

    @i_pv6pod_cidr.setter
    def i_pv6pod_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "i_pv6pod_cidr", value)

    @property
    @pulumi.getter(name="IPv6serviceCIDR")
    def i_pv6service_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "i_pv6service_cidr")

    @i_pv6service_cidr.setter
    def i_pv6service_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "i_pv6service_cidr", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class EtcdArgs:
    def __init__(__self__, *,
                 peer_address: Optional[pulumi.Input[str]] = None):
        if peer_address is not None:
            pulumi.set(__self__, "peer_address", peer_address)

    @property
    @pulumi.getter(name="peerAddress")
    def peer_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peer_address")

    @peer_address.setter
    def peer_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_address", value)


@pulumi.input_type
class HooksArgs:
    def __init__(__self__, *,
                 apply: Optional[pulumi.Input['HookArgs']] = None,
                 backup: Optional[pulumi.Input['HookArgs']] = None,
                 reset: Optional[pulumi.Input['HookArgs']] = None):
        if apply is not None:
            pulumi.set(__self__, "apply", apply)
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if reset is not None:
            pulumi.set(__self__, "reset", reset)

    @property
    @pulumi.getter
    def apply(self) -> Optional[pulumi.Input['HookArgs']]:
        return pulumi.get(self, "apply")

    @apply.setter
    def apply(self, value: Optional[pulumi.Input['HookArgs']]):
        pulumi.set(self, "apply", value)

    @property
    @pulumi.getter
    def backup(self) -> Optional[pulumi.Input['HookArgs']]:
        return pulumi.get(self, "backup")

    @backup.setter
    def backup(self, value: Optional[pulumi.Input['HookArgs']]):
        pulumi.set(self, "backup", value)

    @property
    @pulumi.getter
    def reset(self) -> Optional[pulumi.Input['HookArgs']]:
        return pulumi.get(self, "reset")

    @reset.setter
    def reset(self, value: Optional[pulumi.Input['HookArgs']]):
        pulumi.set(self, "reset", value)


@pulumi.input_type
class HookArgs:
    def __init__(__self__, *,
                 after: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 before: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if after is not None:
            pulumi.set(__self__, "after", after)
        if before is not None:
            pulumi.set(__self__, "before", before)

    @property
    @pulumi.getter
    def after(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "after")

    @after.setter
    def after(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "after", value)

    @property
    @pulumi.getter
    def before(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "before")

    @before.setter
    def before(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "before", value)


@pulumi.input_type
class HostArgs:
    def __init__(__self__, *,
                 role: pulumi.Input[str],
                 environment: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 files: Optional[pulumi.Input[Sequence[pulumi.Input['UploadFileArgs']]]] = None,
                 hooks: Optional[pulumi.Input['HooksArgs']] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 install_flags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 k0s_binary_path: Optional[pulumi.Input[str]] = None,
                 localhost: Optional[pulumi.Input['LocalhostArgs']] = None,
                 no_taints: Optional[pulumi.Input[bool]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 private_address: Optional[pulumi.Input[str]] = None,
                 private_interface: Optional[pulumi.Input[str]] = None,
                 ssh: Optional[pulumi.Input['SSHArgs']] = None,
                 upload_binary: Optional[pulumi.Input[bool]] = None,
                 win_rm: Optional[pulumi.Input['WinRMArgs']] = None):
        pulumi.set(__self__, "role", role)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if files is not None:
            pulumi.set(__self__, "files", files)
        if hooks is not None:
            pulumi.set(__self__, "hooks", hooks)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if install_flags is not None:
            pulumi.set(__self__, "install_flags", install_flags)
        if k0s_binary_path is not None:
            pulumi.set(__self__, "k0s_binary_path", k0s_binary_path)
        if localhost is not None:
            pulumi.set(__self__, "localhost", localhost)
        if no_taints is not None:
            pulumi.set(__self__, "no_taints", no_taints)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if private_address is not None:
            pulumi.set(__self__, "private_address", private_address)
        if private_interface is not None:
            pulumi.set(__self__, "private_interface", private_interface)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)
        if upload_binary is not None:
            pulumi.set(__self__, "upload_binary", upload_binary)
        if win_rm is not None:
            pulumi.set(__self__, "win_rm", win_rm)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UploadFileArgs']]]]:
        return pulumi.get(self, "files")

    @files.setter
    def files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UploadFileArgs']]]]):
        pulumi.set(self, "files", value)

    @property
    @pulumi.getter
    def hooks(self) -> Optional[pulumi.Input['HooksArgs']]:
        return pulumi.get(self, "hooks")

    @hooks.setter
    def hooks(self, value: Optional[pulumi.Input['HooksArgs']]):
        pulumi.set(self, "hooks", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="installFlags")
    def install_flags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "install_flags")

    @install_flags.setter
    def install_flags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "install_flags", value)

    @property
    @pulumi.getter(name="k0sBinaryPath")
    def k0s_binary_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "k0s_binary_path")

    @k0s_binary_path.setter
    def k0s_binary_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "k0s_binary_path", value)

    @property
    @pulumi.getter
    def localhost(self) -> Optional[pulumi.Input['LocalhostArgs']]:
        return pulumi.get(self, "localhost")

    @localhost.setter
    def localhost(self, value: Optional[pulumi.Input['LocalhostArgs']]):
        pulumi.set(self, "localhost", value)

    @property
    @pulumi.getter(name="noTaints")
    def no_taints(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "no_taints")

    @no_taints.setter
    def no_taints(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_taints", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter(name="privateAddress")
    def private_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_address")

    @private_address.setter
    def private_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_address", value)

    @property
    @pulumi.getter(name="privateInterface")
    def private_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_interface")

    @private_interface.setter
    def private_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_interface", value)

    @property
    @pulumi.getter
    def ssh(self) -> Optional[pulumi.Input['SSHArgs']]:
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: Optional[pulumi.Input['SSHArgs']]):
        pulumi.set(self, "ssh", value)

    @property
    @pulumi.getter(name="uploadBinary")
    def upload_binary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upload_binary")

    @upload_binary.setter
    def upload_binary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upload_binary", value)

    @property
    @pulumi.getter(name="winRM")
    def win_rm(self) -> Optional[pulumi.Input['WinRMArgs']]:
        return pulumi.get(self, "win_rm")

    @win_rm.setter
    def win_rm(self, value: Optional[pulumi.Input['WinRMArgs']]):
        pulumi.set(self, "win_rm", value)


@pulumi.input_type
class ImagesCalicoArgs:
    def __init__(__self__, *,
                 cni: Optional[pulumi.Input['ContainerImageArgs']] = None,
                 kubecontrollers: Optional[pulumi.Input['ContainerImageArgs']] = None,
                 node: Optional[pulumi.Input['ContainerImageArgs']] = None):
        if cni is not None:
            pulumi.set(__self__, "cni", cni)
        if kubecontrollers is not None:
            pulumi.set(__self__, "kubecontrollers", kubecontrollers)
        if node is not None:
            pulumi.set(__self__, "node", node)

    @property
    @pulumi.getter
    def cni(self) -> Optional[pulumi.Input['ContainerImageArgs']]:
        return pulumi.get(self, "cni")

    @cni.setter
    def cni(self, value: Optional[pulumi.Input['ContainerImageArgs']]):
        pulumi.set(self, "cni", value)

    @property
    @pulumi.getter
    def kubecontrollers(self) -> Optional[pulumi.Input['ContainerImageArgs']]:
        return pulumi.get(self, "kubecontrollers")

    @kubecontrollers.setter
    def kubecontrollers(self, value: Optional[pulumi.Input['ContainerImageArgs']]):
        pulumi.set(self, "kubecontrollers", value)

    @property
    @pulumi.getter
    def node(self) -> Optional[pulumi.Input['ContainerImageArgs']]:
        return pulumi.get(self, "node")

    @node.setter
    def node(self, value: Optional[pulumi.Input['ContainerImageArgs']]):
        pulumi.set(self, "node", value)


@pulumi.input_type
class ImagesKubeRouterArgs:
    def __init__(__self__, *,
                 cni: Optional[pulumi.Input['ContainerImageArgs']] = None,
                 cni_installer: Optional[pulumi.Input['ContainerImageArgs']] = None):
        if cni is not None:
            pulumi.set(__self__, "cni", cni)
        if cni_installer is not None:
            pulumi.set(__self__, "cni_installer", cni_installer)

    @property
    @pulumi.getter
    def cni(self) -> Optional[pulumi.Input['ContainerImageArgs']]:
        return pulumi.get(self, "cni")

    @cni.setter
    def cni(self, value: Optional[pulumi.Input['ContainerImageArgs']]):
        pulumi.set(self, "cni", value)

    @property
    @pulumi.getter(name="cniInstaller")
    def cni_installer(self) -> Optional[pulumi.Input['ContainerImageArgs']]:
        return pulumi.get(self, "cni_installer")

    @cni_installer.setter
    def cni_installer(self, value: Optional[pulumi.Input['ContainerImageArgs']]):
        pulumi.set(self, "cni_installer", value)


@pulumi.input_type
class ImagesArgs:
    def __init__(__self__, *,
                 calico: Optional[pulumi.Input['ImagesCalicoArgs']] = None,
                 coredns: Optional[pulumi.Input['ContainerImageArgs']] = None,
                 default_pull_policy: Optional[pulumi.Input[str]] = None,
                 konnectivity: Optional[pulumi.Input['ContainerImageArgs']] = None,
                 kubeproxy: Optional[pulumi.Input['ContainerImageArgs']] = None,
                 kuberouter: Optional[pulumi.Input['ImagesKubeRouterArgs']] = None,
                 metricsserver: Optional[pulumi.Input['ContainerImageArgs']] = None):
        if calico is not None:
            pulumi.set(__self__, "calico", calico)
        if coredns is not None:
            pulumi.set(__self__, "coredns", coredns)
        if default_pull_policy is not None:
            pulumi.set(__self__, "default_pull_policy", default_pull_policy)
        if konnectivity is not None:
            pulumi.set(__self__, "konnectivity", konnectivity)
        if kubeproxy is not None:
            pulumi.set(__self__, "kubeproxy", kubeproxy)
        if kuberouter is not None:
            pulumi.set(__self__, "kuberouter", kuberouter)
        if metricsserver is not None:
            pulumi.set(__self__, "metricsserver", metricsserver)

    @property
    @pulumi.getter
    def calico(self) -> Optional[pulumi.Input['ImagesCalicoArgs']]:
        return pulumi.get(self, "calico")

    @calico.setter
    def calico(self, value: Optional[pulumi.Input['ImagesCalicoArgs']]):
        pulumi.set(self, "calico", value)

    @property
    @pulumi.getter
    def coredns(self) -> Optional[pulumi.Input['ContainerImageArgs']]:
        return pulumi.get(self, "coredns")

    @coredns.setter
    def coredns(self, value: Optional[pulumi.Input['ContainerImageArgs']]):
        pulumi.set(self, "coredns", value)

    @property
    @pulumi.getter
    def default_pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_pull_policy")

    @default_pull_policy.setter
    def default_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_pull_policy", value)

    @property
    @pulumi.getter
    def konnectivity(self) -> Optional[pulumi.Input['ContainerImageArgs']]:
        return pulumi.get(self, "konnectivity")

    @konnectivity.setter
    def konnectivity(self, value: Optional[pulumi.Input['ContainerImageArgs']]):
        pulumi.set(self, "konnectivity", value)

    @property
    @pulumi.getter
    def kubeproxy(self) -> Optional[pulumi.Input['ContainerImageArgs']]:
        return pulumi.get(self, "kubeproxy")

    @kubeproxy.setter
    def kubeproxy(self, value: Optional[pulumi.Input['ContainerImageArgs']]):
        pulumi.set(self, "kubeproxy", value)

    @property
    @pulumi.getter
    def kuberouter(self) -> Optional[pulumi.Input['ImagesKubeRouterArgs']]:
        return pulumi.get(self, "kuberouter")

    @kuberouter.setter
    def kuberouter(self, value: Optional[pulumi.Input['ImagesKubeRouterArgs']]):
        pulumi.set(self, "kuberouter", value)

    @property
    @pulumi.getter
    def metricsserver(self) -> Optional[pulumi.Input['ContainerImageArgs']]:
        return pulumi.get(self, "metricsserver")

    @metricsserver.setter
    def metricsserver(self, value: Optional[pulumi.Input['ContainerImageArgs']]):
        pulumi.set(self, "metricsserver", value)


@pulumi.input_type
class InstallConfigUsersArgs:
    def __init__(__self__, *,
                 etcd_user: Optional[pulumi.Input[str]] = None,
                 kine_user: Optional[pulumi.Input[str]] = None,
                 konnectivity_user: Optional[pulumi.Input[str]] = None,
                 kube_apiserver_user: Optional[pulumi.Input[str]] = None,
                 kube_scheduler_user: Optional[pulumi.Input[str]] = None):
        if etcd_user is not None:
            pulumi.set(__self__, "etcd_user", etcd_user)
        if kine_user is not None:
            pulumi.set(__self__, "kine_user", kine_user)
        if konnectivity_user is not None:
            pulumi.set(__self__, "konnectivity_user", konnectivity_user)
        if kube_apiserver_user is not None:
            pulumi.set(__self__, "kube_apiserver_user", kube_apiserver_user)
        if kube_scheduler_user is not None:
            pulumi.set(__self__, "kube_scheduler_user", kube_scheduler_user)

    @property
    @pulumi.getter(name="etcdUser")
    def etcd_user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "etcd_user")

    @etcd_user.setter
    def etcd_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etcd_user", value)

    @property
    @pulumi.getter(name="kineUser")
    def kine_user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kine_user")

    @kine_user.setter
    def kine_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kine_user", value)

    @property
    @pulumi.getter(name="konnectivityUser")
    def konnectivity_user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "konnectivity_user")

    @konnectivity_user.setter
    def konnectivity_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "konnectivity_user", value)

    @property
    @pulumi.getter(name="kubeAPIserverUser")
    def kube_apiserver_user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kube_apiserver_user")

    @kube_apiserver_user.setter
    def kube_apiserver_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kube_apiserver_user", value)

    @property
    @pulumi.getter(name="kubeSchedulerUser")
    def kube_scheduler_user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kube_scheduler_user")

    @kube_scheduler_user.setter
    def kube_scheduler_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kube_scheduler_user", value)


@pulumi.input_type
class InstallConfigArgs:
    def __init__(__self__, *,
                 users: Optional[pulumi.Input['InstallConfigUsersArgs']] = None):
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input['InstallConfigUsersArgs']]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input['InstallConfigUsersArgs']]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class K0sSpecArgs:
    def __init__(__self__, *,
                 api: Optional[pulumi.Input['APIArgs']] = None,
                 controller_manager: Optional[pulumi.Input['ControllerManagerArgs']] = None,
                 images: Optional[pulumi.Input['ImagesArgs']] = None,
                 install_config: Optional[pulumi.Input['InstallConfigArgs']] = None,
                 konnectivity: Optional[pulumi.Input['KonnectivityArgs']] = None,
                 network: Optional[pulumi.Input['NetworkArgs']] = None,
                 pod_security_policy: Optional[pulumi.Input['PodSecurityPolicyArgs']] = None,
                 scheduler: Optional[pulumi.Input['SchedulerArgs']] = None,
                 storage: Optional[pulumi.Input['StorageArgs']] = None,
                 telemetry: Optional[pulumi.Input['TelemetryArgs']] = None):
        if api is not None:
            pulumi.set(__self__, "api", api)
        if controller_manager is not None:
            pulumi.set(__self__, "controller_manager", controller_manager)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if install_config is not None:
            pulumi.set(__self__, "install_config", install_config)
        if konnectivity is not None:
            pulumi.set(__self__, "konnectivity", konnectivity)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if pod_security_policy is not None:
            pulumi.set(__self__, "pod_security_policy", pod_security_policy)
        if scheduler is not None:
            pulumi.set(__self__, "scheduler", scheduler)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if telemetry is not None:
            pulumi.set(__self__, "telemetry", telemetry)

    @property
    @pulumi.getter
    def api(self) -> Optional[pulumi.Input['APIArgs']]:
        return pulumi.get(self, "api")

    @api.setter
    def api(self, value: Optional[pulumi.Input['APIArgs']]):
        pulumi.set(self, "api", value)

    @property
    @pulumi.getter(name="controllerManager")
    def controller_manager(self) -> Optional[pulumi.Input['ControllerManagerArgs']]:
        return pulumi.get(self, "controller_manager")

    @controller_manager.setter
    def controller_manager(self, value: Optional[pulumi.Input['ControllerManagerArgs']]):
        pulumi.set(self, "controller_manager", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input['ImagesArgs']]:
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input['ImagesArgs']]):
        pulumi.set(self, "images", value)

    @property
    @pulumi.getter(name="installConfig")
    def install_config(self) -> Optional[pulumi.Input['InstallConfigArgs']]:
        return pulumi.get(self, "install_config")

    @install_config.setter
    def install_config(self, value: Optional[pulumi.Input['InstallConfigArgs']]):
        pulumi.set(self, "install_config", value)

    @property
    @pulumi.getter
    def konnectivity(self) -> Optional[pulumi.Input['KonnectivityArgs']]:
        return pulumi.get(self, "konnectivity")

    @konnectivity.setter
    def konnectivity(self, value: Optional[pulumi.Input['KonnectivityArgs']]):
        pulumi.set(self, "konnectivity", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input['NetworkArgs']]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input['NetworkArgs']]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="podSecurityPolicy")
    def pod_security_policy(self) -> Optional[pulumi.Input['PodSecurityPolicyArgs']]:
        return pulumi.get(self, "pod_security_policy")

    @pod_security_policy.setter
    def pod_security_policy(self, value: Optional[pulumi.Input['PodSecurityPolicyArgs']]):
        pulumi.set(self, "pod_security_policy", value)

    @property
    @pulumi.getter
    def scheduler(self) -> Optional[pulumi.Input['SchedulerArgs']]:
        return pulumi.get(self, "scheduler")

    @scheduler.setter
    def scheduler(self, value: Optional[pulumi.Input['SchedulerArgs']]):
        pulumi.set(self, "scheduler", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input['StorageArgs']]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input['StorageArgs']]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def telemetry(self) -> Optional[pulumi.Input['TelemetryArgs']]:
        return pulumi.get(self, "telemetry")

    @telemetry.setter
    def telemetry(self, value: Optional[pulumi.Input['TelemetryArgs']]):
        pulumi.set(self, "telemetry", value)


@pulumi.input_type
class K0sArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['ConfigArgs']] = None,
                 dynamic_config: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if config is not None:
            pulumi.set(__self__, "config", config)
        if dynamic_config is not None:
            pulumi.set(__self__, "dynamic_config", dynamic_config)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['ConfigArgs']]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['ConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="dynamicConfig")
    def dynamic_config(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "dynamic_config")

    @dynamic_config.setter
    def dynamic_config(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_config", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class KineArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str]):
        pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)


@pulumi.input_type
class KonnectivityArgs:
    def __init__(__self__, *,
                 admin_port: Optional[pulumi.Input[float]] = None,
                 agent_port: Optional[pulumi.Input[float]] = None):
        if admin_port is not None:
            pulumi.set(__self__, "admin_port", admin_port)
        if agent_port is not None:
            pulumi.set(__self__, "agent_port", agent_port)

    @property
    @pulumi.getter(name="adminPort")
    def admin_port(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "admin_port")

    @admin_port.setter
    def admin_port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "admin_port", value)

    @property
    @pulumi.getter(name="agentPort")
    def agent_port(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "agent_port")

    @agent_port.setter
    def agent_port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "agent_port", value)


@pulumi.input_type
class KubeProxyArgs:
    def __init__(__self__, *,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class KubeRouterArgs:
    def __init__(__self__, *,
                 auto_mtu: Optional[pulumi.Input[bool]] = None,
                 mtu: Optional[pulumi.Input[float]] = None,
                 peer_router_asns: Optional[pulumi.Input[str]] = None,
                 peer_router_ips: Optional[pulumi.Input[str]] = None):
        if auto_mtu is not None:
            pulumi.set(__self__, "auto_mtu", auto_mtu)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if peer_router_asns is not None:
            pulumi.set(__self__, "peer_router_asns", peer_router_asns)
        if peer_router_ips is not None:
            pulumi.set(__self__, "peer_router_ips", peer_router_ips)

    @property
    @pulumi.getter(name="autoMTU")
    def auto_mtu(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_mtu")

    @auto_mtu.setter
    def auto_mtu(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_mtu", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="peerRouterASNs")
    def peer_router_asns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peer_router_asns")

    @peer_router_asns.setter
    def peer_router_asns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_router_asns", value)

    @property
    @pulumi.getter(name="peerRouterIPs")
    def peer_router_ips(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peer_router_ips")

    @peer_router_ips.setter
    def peer_router_ips(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_router_ips", value)


@pulumi.input_type
class LocalhostArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class MetadataArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class NetworkArgs:
    def __init__(__self__, *,
                 calico: Optional[pulumi.Input['CalicoArgs']] = None,
                 dual_stack: Optional[pulumi.Input['DualStackArgs']] = None,
                 kube_proxy: Optional[pulumi.Input['KubeProxyArgs']] = None,
                 kuberouter: Optional[pulumi.Input['KubeRouterArgs']] = None,
                 pod_cidr: Optional[pulumi.Input[str]] = None,
                 provider: Optional[pulumi.Input[str]] = None,
                 service_cidr: Optional[pulumi.Input[str]] = None):
        if calico is not None:
            pulumi.set(__self__, "calico", calico)
        if dual_stack is not None:
            pulumi.set(__self__, "dual_stack", dual_stack)
        if kube_proxy is not None:
            pulumi.set(__self__, "kube_proxy", kube_proxy)
        if kuberouter is not None:
            pulumi.set(__self__, "kuberouter", kuberouter)
        if pod_cidr is not None:
            pulumi.set(__self__, "pod_cidr", pod_cidr)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if service_cidr is not None:
            pulumi.set(__self__, "service_cidr", service_cidr)

    @property
    @pulumi.getter
    def calico(self) -> Optional[pulumi.Input['CalicoArgs']]:
        return pulumi.get(self, "calico")

    @calico.setter
    def calico(self, value: Optional[pulumi.Input['CalicoArgs']]):
        pulumi.set(self, "calico", value)

    @property
    @pulumi.getter(name="dualStack")
    def dual_stack(self) -> Optional[pulumi.Input['DualStackArgs']]:
        return pulumi.get(self, "dual_stack")

    @dual_stack.setter
    def dual_stack(self, value: Optional[pulumi.Input['DualStackArgs']]):
        pulumi.set(self, "dual_stack", value)

    @property
    @pulumi.getter(name="kubeProxy")
    def kube_proxy(self) -> Optional[pulumi.Input['KubeProxyArgs']]:
        return pulumi.get(self, "kube_proxy")

    @kube_proxy.setter
    def kube_proxy(self, value: Optional[pulumi.Input['KubeProxyArgs']]):
        pulumi.set(self, "kube_proxy", value)

    @property
    @pulumi.getter
    def kuberouter(self) -> Optional[pulumi.Input['KubeRouterArgs']]:
        return pulumi.get(self, "kuberouter")

    @kuberouter.setter
    def kuberouter(self, value: Optional[pulumi.Input['KubeRouterArgs']]):
        pulumi.set(self, "kuberouter", value)

    @property
    @pulumi.getter(name="podCIDR")
    def pod_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pod_cidr")

    @pod_cidr.setter
    def pod_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_cidr", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter(name="serviceCIDR")
    def service_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_cidr")

    @service_cidr.setter
    def service_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_cidr", value)


@pulumi.input_type
class PodSecurityPolicyArgs:
    def __init__(__self__, *,
                 default_policy: Optional[pulumi.Input[str]] = None):
        if default_policy is not None:
            pulumi.set(__self__, "default_policy", default_policy)

    @property
    @pulumi.getter(name="defaultPolicy")
    def default_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_policy")

    @default_policy.setter
    def default_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_policy", value)


@pulumi.input_type
class SSHArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 bastion: Optional[pulumi.Input['SSHArgs']] = None,
                 host_key: Optional[pulumi.Input[str]] = None,
                 key_path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "address", address)
        if bastion is not None:
            pulumi.set(__self__, "bastion", bastion)
        if host_key is not None:
            pulumi.set(__self__, "host_key", host_key)
        if key_path is not None:
            pulumi.set(__self__, "key_path", key_path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def bastion(self) -> Optional[pulumi.Input['SSHArgs']]:
        return pulumi.get(self, "bastion")

    @bastion.setter
    def bastion(self, value: Optional[pulumi.Input['SSHArgs']]):
        pulumi.set(self, "bastion", value)

    @property
    @pulumi.getter(name="hostKey")
    def host_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host_key")

    @host_key.setter
    def host_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_key", value)

    @property
    @pulumi.getter(name="keyPath")
    def key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_path")

    @key_path.setter
    def key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class SchedulerArgs:
    def __init__(__self__, *,
                 extra_args: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if extra_args is not None:
            pulumi.set(__self__, "extra_args", extra_args)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "extra_args", value)


@pulumi.input_type
class SpecArgs:
    def __init__(__self__, *,
                 hosts: pulumi.Input[Sequence[pulumi.Input['HostArgs']]],
                 k0s: Optional[pulumi.Input['K0sArgs']] = None):
        pulumi.set(__self__, "hosts", hosts)
        if k0s is not None:
            pulumi.set(__self__, "k0s", k0s)

    @property
    @pulumi.getter
    def hosts(self) -> pulumi.Input[Sequence[pulumi.Input['HostArgs']]]:
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: pulumi.Input[Sequence[pulumi.Input['HostArgs']]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def k0s(self) -> Optional[pulumi.Input['K0sArgs']]:
        return pulumi.get(self, "k0s")

    @k0s.setter
    def k0s(self, value: Optional[pulumi.Input['K0sArgs']]):
        pulumi.set(self, "k0s", value)


@pulumi.input_type
class StorageArgs:
    def __init__(__self__, *,
                 etcd: Optional[pulumi.Input['EtcdArgs']] = None,
                 kine: Optional[pulumi.Input['KineArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if etcd is not None:
            pulumi.set(__self__, "etcd", etcd)
        if kine is not None:
            pulumi.set(__self__, "kine", kine)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def etcd(self) -> Optional[pulumi.Input['EtcdArgs']]:
        return pulumi.get(self, "etcd")

    @etcd.setter
    def etcd(self, value: Optional[pulumi.Input['EtcdArgs']]):
        pulumi.set(self, "etcd", value)

    @property
    @pulumi.getter
    def kine(self) -> Optional[pulumi.Input['KineArgs']]:
        return pulumi.get(self, "kine")

    @kine.setter
    def kine(self, value: Optional[pulumi.Input['KineArgs']]):
        pulumi.set(self, "kine", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TelemetryArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class UploadFileArgs:
    def __init__(__self__, *,
                 dir_perm: Optional[pulumi.Input[float]] = None,
                 dst: Optional[pulumi.Input[str]] = None,
                 dst_dir: Optional[pulumi.Input[str]] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 perm: Optional[pulumi.Input[float]] = None,
                 src: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        if dir_perm is not None:
            pulumi.set(__self__, "dir_perm", dir_perm)
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if dst_dir is not None:
            pulumi.set(__self__, "dst_dir", dst_dir)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if perm is not None:
            pulumi.set(__self__, "perm", perm)
        if src is not None:
            pulumi.set(__self__, "src", src)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="dirPerm")
    def dir_perm(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "dir_perm")

    @dir_perm.setter
    def dir_perm(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dir_perm", value)

    @property
    @pulumi.getter
    def dst(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst")

    @dst.setter
    def dst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst", value)

    @property
    @pulumi.getter(name="dstDir")
    def dst_dir(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_dir")

    @dst_dir.setter
    def dst_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_dir", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def perm(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "perm")

    @perm.setter
    def perm(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "perm", value)

    @property
    @pulumi.getter
    def src(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src")

    @src.setter
    def src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class WinRMArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 bastion: Optional[pulumi.Input['SSHArgs']] = None,
                 ca_cert_path: Optional[pulumi.Input[str]] = None,
                 cert_path: Optional[pulumi.Input[str]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 key_path: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 tls_server_name: Optional[pulumi.Input[str]] = None,
                 use_https: Optional[pulumi.Input[bool]] = None,
                 use_ntlm: Optional[pulumi.Input[bool]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "address", address)
        if bastion is not None:
            pulumi.set(__self__, "bastion", bastion)
        if ca_cert_path is not None:
            pulumi.set(__self__, "ca_cert_path", ca_cert_path)
        if cert_path is not None:
            pulumi.set(__self__, "cert_path", cert_path)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if key_path is not None:
            pulumi.set(__self__, "key_path", key_path)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if tls_server_name is not None:
            pulumi.set(__self__, "tls_server_name", tls_server_name)
        if use_https is not None:
            pulumi.set(__self__, "use_https", use_https)
        if use_ntlm is not None:
            pulumi.set(__self__, "use_ntlm", use_ntlm)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def bastion(self) -> Optional[pulumi.Input['SSHArgs']]:
        return pulumi.get(self, "bastion")

    @bastion.setter
    def bastion(self, value: Optional[pulumi.Input['SSHArgs']]):
        pulumi.set(self, "bastion", value)

    @property
    @pulumi.getter(name="caCertPath")
    def ca_cert_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_cert_path")

    @ca_cert_path.setter
    def ca_cert_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_cert_path", value)

    @property
    @pulumi.getter(name="certPath")
    def cert_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert_path")

    @cert_path.setter
    def cert_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_path", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter(name="keyPath")
    def key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_path")

    @key_path.setter
    def key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_path", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="tlsServerName")
    def tls_server_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_server_name")

    @tls_server_name.setter
    def tls_server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_server_name", value)

    @property
    @pulumi.getter(name="useHTTPS")
    def use_https(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_https")

    @use_https.setter
    def use_https(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_https", value)

    @property
    @pulumi.getter(name="useNTLM")
    def use_ntlm(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_ntlm")

    @use_ntlm.setter
    def use_ntlm(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_ntlm", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


