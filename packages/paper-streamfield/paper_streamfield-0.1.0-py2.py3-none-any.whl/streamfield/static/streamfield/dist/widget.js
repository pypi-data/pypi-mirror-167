/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 356:
/*!******************************************************!*\
  !*** ./streamfield/static/streamfield/src/widget.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var mustache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mustache */ 124);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ 283);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uuid */ 45);\n/* harmony import */ var _widget_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./widget.scss */ 598);\n/* global gettext */\n\n\n\nconst Sortable = window.paperAdmin.Sortable;\nconst Widget = window.paperAdmin.Widget;\nconst popupUtils = window.paperAdmin.popupUtils;\nconst modals = window.paperAdmin.modals;\n\nclass StreamField {\n  constructor(element) {\n    this.field = element;\n    this.control = this.field.querySelector(`.${this.CSS.control}`);\n    this.blocks = this.field.querySelector(`.${this.CSS.blocks}`);\n    this.toolbar = this.field.querySelector(`.${this.CSS.toolbar}`);\n    this._sortable = this._initSortable();\n\n    this._addListeners();\n\n    this._updateBlockMap();\n\n    this.wrapPreloader(Promise.all([this.update(), this.updateToolbar()]));\n  }\n\n  get STATUS() {\n    return this.constructor.STATUS;\n  }\n\n  get CSS() {\n    return this.constructor.CSS;\n  }\n  /**\n   * @returns {Array}\n   */\n\n\n  get value() {\n    let data;\n\n    try {\n      data = JSON.parse(this.control.value);\n    } catch {\n      data = [];\n    }\n\n    return data;\n  }\n  /**\n   * @param {string|Array} data\n   */\n\n\n  set value(data) {\n    if (typeof data !== \"string\") {\n      data = JSON.stringify(data);\n    }\n\n    this.control.value = data;\n  }\n  /**\n   * @returns {string}\n   */\n\n\n  get status() {\n    return Object.values(this.STATUS).find(value => {\n      return this.field.classList.contains(`${this.CSS.field}--${value}`);\n    });\n  }\n  /**\n   * @param {string} status\n   */\n\n\n  set status(status) {\n    Object.values(this.STATUS).forEach(value => {\n      this.field.classList.toggle(`${this.CSS.field}--${value}`, status === value);\n    });\n  }\n  /**\n   * @returns {String[]}\n   */\n\n\n  get allowedModels() {\n    return JSON.parse(this.control.dataset.allowedModels);\n  }\n  /**\n   * @returns {HTMLElement[]}\n   */\n\n\n  getBlocks() {\n    return Array.from(this.blocks.querySelectorAll(`.${this.CSS.block}`));\n  }\n  /**\n   * @param {string} uuid\n   * @returns {Object}\n   */\n\n\n  getBlockByUUID(uuid) {\n    return this._blockMap[uuid];\n  }\n\n  destroy() {\n    if (this._sortable) {\n      this._sortable.destroy();\n    } // TODO: remove event listeners\n\n  }\n  /**\n   * Создаёт объект для быстрого поиска блоков по UUID.\n   *\n   * @returns {Object}\n   */\n\n\n  _updateBlockMap() {\n    let hasBadBlocks = false;\n    const result = {};\n    const processedValue = this.value.map(record => {\n      let uuid = record[\"uuid\"];\n\n      if (typeof uuid === \"string\" && (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(uuid)) {\n        return result[uuid] = record;\n      } else {\n        hasBadBlocks = true;\n        uuid = (0,uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n        return result[uuid] = {\n          uuid: uuid\n        };\n      }\n    });\n    this._blockMap = result;\n\n    if (processedValue) {\n      this.value = processedValue;\n    }\n  }\n  /**\n   * @returns {*}\n   * @private\n   */\n\n\n  _initSortable() {\n    return Sortable.create(this.blocks, {\n      animation: 0,\n      draggable: `.${this.CSS.block}`,\n      filter: (event, target) => {\n        if (this.status === this.STATUS.LOADING) {\n          return true;\n        }\n\n        if (!target) {\n          return true;\n        }\n      },\n      handle: `.${this.CSS.sortableHandler}`,\n      ghostClass: \"sortable-ghost\",\n      onEnd: () => {\n        this.save();\n      }\n    });\n  }\n\n  _addListeners() {\n    this.field.addEventListener(\"click\", event => {\n      const deleteButton = event.target.closest(`.${this.CSS.deleteBlockButton}`);\n\n      if (deleteButton) {\n        event.preventDefault();\n        deleteButton.disabled = true;\n        modals.createModal({\n          modalClass: \"paper-modal--warning fade\",\n          title: gettext(\"Confirm deletion\"),\n          body: gettext(\"Are you sure you want to <b>DELETE</b> selected block from this field?\"),\n          buttons: [{\n            label: gettext(\"Cancel\"),\n            buttonClass: \"btn-light\",\n            onClick: (event, popup) => {\n              popup.destroy();\n            }\n          }, {\n            autofocus: true,\n            label: gettext(\"Delete\"),\n            buttonClass: \"btn-danger\",\n            onClick: (event, popup) => {\n              popup.destroy();\n              const block = deleteButton.closest(`.${this.CSS.block}`);\n              block.remove();\n              this.save();\n              this.wrapPreloader(this.update());\n            }\n          }],\n          onInit: function () {\n            this.show();\n          },\n          onDestroy: function () {\n            deleteButton.disabled = false;\n          }\n        });\n      }\n\n      const changeButton = event.target.closest(`.${this.CSS.changeBlockButton}`);\n\n      if (changeButton) {\n        event.preventDefault();\n        const jQueryEvent = $.Event(\"django:show-related\", {\n          href: changeButton.href\n        });\n        $(changeButton).trigger(jQueryEvent);\n\n        if (!jQueryEvent.isDefaultPrevented()) {\n          showStreamBlockPopup(changeButton);\n        }\n      }\n\n      const lookupBlockButton = event.target.closest(`.${this.CSS.lookupBlockButton}`);\n\n      if (lookupBlockButton) {\n        event.preventDefault();\n        const jQueryEvent = $.Event(\"django:show-related\", {\n          href: lookupBlockButton.href\n        });\n        $(lookupBlockButton).trigger(jQueryEvent);\n\n        if (!jQueryEvent.isDefaultPrevented()) {\n          showStreamBlockPopup(lookupBlockButton);\n        }\n      }\n\n      const createBlockButton = event.target.closest(`.${this.CSS.createBlockButton}`);\n\n      if (createBlockButton) {\n        event.preventDefault();\n        const jQueryEvent = $.Event(\"django:show-related\", {\n          href: createBlockButton.href\n        });\n        $(createBlockButton).trigger(jQueryEvent);\n\n        if (!jQueryEvent.isDefaultPrevented()) {\n          showStreamBlockPopup(createBlockButton);\n        }\n      }\n    });\n  }\n  /**\n   * @param {Object} block\n   * @private\n   */\n\n\n  _appendBlock(block) {\n    const uuid = block.uuid;\n\n    if (!(0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(uuid)) {\n      throw new Error(\"Invalid UUID\");\n    }\n\n    const newValue = this.value;\n    newValue.push(block);\n    this.value = newValue;\n    this._blockMap[uuid] = block;\n  }\n\n  save() {\n    this.value = this.getBlocks().map(block => {\n      const uuid = block.dataset.uuid;\n      return this.getBlockByUUID(uuid);\n    });\n  }\n\n  update() {\n    return this.renderStream(this.value);\n  }\n  /**\n   * @param {Promise} promise\n   * @returns {Promise}\n   */\n\n\n  wrapPreloader(promise) {\n    this.status = this.STATUS.LOADING;\n    return promise.finally(() => {\n      this.status = this.STATUS.READY;\n    });\n  }\n\n  renderStream(data) {\n    const renderUrl = this.field.dataset.renderStreamUrl;\n    return fetch(renderUrl, {\n      method: \"POST\",\n      mode: \"same-origin\",\n      cache: \"no-store\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\"\n      },\n      body: JSON.stringify(data)\n    }).then(response => {\n      if (!response.ok) {\n        throw `${response.status} ${response.statusText}`;\n      }\n\n      return response.json();\n    }).then(response => {\n      const rendered = [];\n      response.blocks.forEach(block => {\n        const status = block.status;\n        const template = this.field.querySelector(`.stream-field__block-template--${status}`);\n\n        if (!template) {\n          return;\n        }\n\n        rendered.push(mustache__WEBPACK_IMPORTED_MODULE_0__[\"default\"].render(template.innerHTML, block));\n      });\n      this.blocks.innerHTML = rendered.join(\"\");\n    }).catch(reason => {\n      if (reason instanceof Error) {\n        // JS-ошибки дублируем в консоль\n        console.error(reason);\n      }\n\n      modals.showErrors(reason);\n    });\n  }\n\n  renderToolbar(data) {\n    const renderUrl = this.field.dataset.renderToolbarUrl;\n    return fetch(renderUrl, {\n      method: \"POST\",\n      mode: \"same-origin\",\n      cache: \"no-store\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\"\n      },\n      body: JSON.stringify(data)\n    }).then(response => {\n      if (!response.ok) {\n        throw `${response.status} ${response.statusText}`;\n      }\n\n      return response.json();\n    }).then(response => {\n      const template = this.field.querySelector(\".stream-field__toolbar-button-template\");\n\n      if (!template) {\n        return;\n      }\n\n      const rendered = [];\n      response.buttons.forEach(button => {\n        rendered.push(mustache__WEBPACK_IMPORTED_MODULE_0__[\"default\"].render(template.innerHTML, button));\n      });\n      this.toolbar.innerHTML = rendered.join(\"\");\n    });\n  }\n\n  updateToolbar() {\n    return this.renderToolbar({\n      \"field_id\": this.control.id,\n      \"models\": this.allowedModels\n    });\n  }\n\n}\n\nStreamField.STATUS = {\n  LOADING: \"loading\",\n  READY: \"ready\"\n};\nStreamField.CSS = {\n  field: \"stream-field\",\n  control: \"stream-field__control\",\n  blocks: \"stream-field__blocks\",\n  block: \"stream-field__block\",\n  toolbar: \"stream-field__toolbar\",\n  sortableHandler: \"stream-field__sortable-handler\",\n  createBlockButton: \"stream-field__create-block-btn\",\n  lookupBlockButton: \"stream-field__lookup-block-btn\",\n  changeBlockButton: \"stream-field__change-btn\",\n  deleteBlockButton: \"stream-field__delete-btn\"\n};\n\nclass StreamFieldWidget extends Widget {\n  _init(element) {\n    element._streamField = new StreamField(element, this);\n  }\n\n  _destroy(element) {\n    if (element._streamField) {\n      element._streamField.destroy();\n\n      delete element._streamField;\n    }\n  }\n\n  getStreamFieldInstance(element) {\n    return element._streamField;\n  }\n\n}\n\nconst widget = new StreamFieldWidget();\nwidget.observe(\".stream-field\");\nwidget.initAll(\".stream-field\");\n/**\n * @param {HTMLElement} triggeringLink\n */\n\nfunction showStreamBlockPopup(triggeringLink) {\n  return popupUtils.showAdminPopup(triggeringLink, /^(change|add|lookup)_/, true);\n}\n/**\n * @param {Window} win\n * @param {String} newId\n */\n\n\nfunction dismissAddStreamBlockPopup(win, newId) {\n  const name = popupUtils.removePopupIndex(win.name);\n  const match = /^(.+)--(.+)\\.(.+)$/.exec(name);\n\n  if (match) {\n    const control = document.getElementById(match[1]);\n    const field = control.closest(\".stream-field\");\n    const streamField = field && widget.getStreamFieldInstance(field);\n\n    streamField._appendBlock({\n      \"model\": `${match[2]}.${match[3]}`,\n      \"pk\": newId,\n      \"uuid\": (0,uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"])()\n    });\n\n    streamField.wrapPreloader(streamField.update());\n    popupUtils.removeRelatedWindow(win);\n    win.close();\n  }\n}\n/**\n * @param {Window} win\n */\n\n\nfunction dismissChangeStreamBlockPopup(win) {\n  const name = \"change_\" + popupUtils.removePopupIndex(win.name);\n  const element = document.getElementById(name);\n  const fieldWrapper = element && element.closest(\".paper-widget\");\n  const field = fieldWrapper && fieldWrapper.firstElementChild;\n  const instance = field && widget.getStreamFieldInstance(field);\n  instance.update();\n  popupUtils.removeRelatedWindow(win);\n  win.close();\n}\n/**\n * @param {Window} win\n * @param {String} objId\n */\n\n\nfunction dismissDeleteStreamBlockPopup(win, objId) {\n  const name = popupUtils.removePopupIndex(win.name);\n  const match = /^(.+)--(.+)\\.(.+)$/.exec(name);\n\n  if (match) {\n    const control = document.getElementById(match[1]);\n    const field = control.closest(\".stream-field\");\n    const streamField = field && widget.getStreamFieldInstance(field);\n    streamField.wrapPreloader(streamField.update());\n    popupUtils.removeRelatedWindow(win);\n    win.close();\n  }\n}\n/**\n * Обёртка над Django-обработчиком `window.dismissRelatedLookupPopup`.\n * @param {Function} originalFunc\n */\n\n\nfunction dismissLookupStreamBlockPopup(originalFunc) {\n  return (win, chosenId) => {\n    const name = popupUtils.removePopupIndex(win.name);\n    const match = /^(.+)--(.+)\\.(.+)$/.exec(name);\n\n    if (match) {\n      const control = document.getElementById(match[1]);\n      const field = control.closest(\".stream-field\");\n      const streamField = field && widget.getStreamFieldInstance(field);\n\n      streamField._appendBlock({\n        \"model\": `${match[2]}.${match[3]}`,\n        \"pk\": chosenId,\n        \"uuid\": (0,uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"])()\n      });\n\n      streamField.wrapPreloader(streamField.update());\n      popupUtils.removeRelatedWindow(win);\n      win.close();\n    } else {\n      originalFunc(win, chosenId);\n    }\n  };\n}\n\nwindow.dismissAddStreamBlockPopup = dismissAddStreamBlockPopup;\nwindow.dismissChangeStreamBlockPopup = dismissChangeStreamBlockPopup;\nwindow.dismissDeleteStreamBlockPopup = dismissDeleteStreamBlockPopup; // Wrap default `dismissRelatedLookupPopup`.\n\nwindow.dismissRelatedLookupPopup = dismissLookupStreamBlockPopup(window.dismissRelatedLookupPopup);\n\n//# sourceURL=webpack://paper-streamfield/./streamfield/static/streamfield/src/widget.js?");

/***/ }),

/***/ 598:
/*!********************************************************!*\
  !*** ./streamfield/static/streamfield/src/widget.scss ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://paper-streamfield/./streamfield/static/streamfield/src/widget.scss?");

/***/ }),

/***/ 744:
/*!******************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/native.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nconst randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  randomUUID\n});\n\n//# sourceURL=webpack://paper-streamfield/./node_modules/uuid/dist/esm-browser/native.js?");

/***/ }),

/***/ 893:
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/regex.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);\n\n//# sourceURL=webpack://paper-streamfield/./node_modules/uuid/dist/esm-browser/regex.js?");

/***/ }),

/***/ 653:
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/rng.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ rng; }\n/* harmony export */ });\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nfunction rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}\n\n//# sourceURL=webpack://paper-streamfield/./node_modules/uuid/dist/esm-browser/rng.js?");

/***/ }),

/***/ 958:
/*!*********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/stringify.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"unsafeStringify\": function() { return /* binding */ unsafeStringify; }\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ 283);\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nfunction unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (stringify);\n\n//# sourceURL=webpack://paper-streamfield/./node_modules/uuid/dist/esm-browser/stringify.js?");

/***/ }),

/***/ 45:
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v4.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./native.js */ 744);\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rng.js */ 653);\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify.js */ 958);\n\n\n\n\nfunction v4(options, buf, offset) {\n  if (_native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID && !buf && !options) {\n    return _native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_2__.unsafeStringify)(rnds);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (v4);\n\n//# sourceURL=webpack://paper-streamfield/./node_modules/uuid/dist/esm-browser/v4.js?");

/***/ }),

/***/ 283:
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/validate.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ 893);\n\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].test(uuid);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (validate);\n\n//# sourceURL=webpack://paper-streamfield/./node_modules/uuid/dist/esm-browser/validate.js?");

/***/ }),

/***/ 124:
/*!********************************************!*\
  !*** ./node_modules/mustache/mustache.mjs ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\nvar objectToString = Object.prototype.toString;\nvar isArray = Array.isArray || function isArrayPolyfill (object) {\n  return objectToString.call(object) === '[object Array]';\n};\n\nfunction isFunction (object) {\n  return typeof object === 'function';\n}\n\n/**\n * More correct typeof string handling array\n * which normally returns typeof 'object'\n */\nfunction typeStr (obj) {\n  return isArray(obj) ? 'array' : typeof obj;\n}\n\nfunction escapeRegExp (string) {\n  return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n}\n\n/**\n * Null safe way of checking whether or not an object,\n * including its prototype, has a given property\n */\nfunction hasProperty (obj, propName) {\n  return obj != null && typeof obj === 'object' && (propName in obj);\n}\n\n/**\n * Safe way of detecting whether or not the given thing is a primitive and\n * whether it has the given property\n */\nfunction primitiveHasOwnProperty (primitive, propName) {\n  return (\n    primitive != null\n    && typeof primitive !== 'object'\n    && primitive.hasOwnProperty\n    && primitive.hasOwnProperty(propName)\n  );\n}\n\n// Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n// See https://github.com/janl/mustache.js/issues/189\nvar regExpTest = RegExp.prototype.test;\nfunction testRegExp (re, string) {\n  return regExpTest.call(re, string);\n}\n\nvar nonSpaceRe = /\\S/;\nfunction isWhitespace (string) {\n  return !testRegExp(nonSpaceRe, string);\n}\n\nvar entityMap = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;'\n};\n\nfunction escapeHtml (string) {\n  return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n    return entityMap[s];\n  });\n}\n\nvar whiteRe = /\\s*/;\nvar spaceRe = /\\s+/;\nvar equalsRe = /\\s*=/;\nvar curlyRe = /\\s*\\}/;\nvar tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n/**\n * Breaks up the given `template` string into a tree of tokens. If the `tags`\n * argument is given here it must be an array with two string values: the\n * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n * course, the default is to use mustaches (i.e. mustache.tags).\n *\n * A token is an array with at least 4 elements. The first element is the\n * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n * all text that appears outside a symbol this element is \"text\".\n *\n * The second element of a token is its \"value\". For mustache tags this is\n * whatever else was inside the tag besides the opening symbol. For text tokens\n * this is the text itself.\n *\n * The third and fourth elements of the token are the start and end indices,\n * respectively, of the token in the original template.\n *\n * Tokens that are the root node of a subtree contain two more elements: 1) an\n * array of tokens in the subtree and 2) the index in the original template at\n * which the closing tag for that section begins.\n *\n * Tokens for partials also contain two more elements: 1) a string value of\n * indendation prior to that tag and 2) the index of that tag on that line -\n * eg a value of 2 indicates the partial is the third tag on this line.\n */\nfunction parseTemplate (template, tags) {\n  if (!template)\n    return [];\n  var lineHasNonSpace = false;\n  var sections = [];     // Stack to hold section tokens\n  var tokens = [];       // Buffer to hold the tokens\n  var spaces = [];       // Indices of whitespace tokens on the current line\n  var hasTag = false;    // Is there a {{tag}} on the current line?\n  var nonSpace = false;  // Is there a non-space char on the current line?\n  var indentation = '';  // Tracks indentation for tags that use it\n  var tagIndex = 0;      // Stores a count of number of tags encountered on a line\n\n  // Strips all whitespace tokens array for the current line\n  // if there was a {{#tag}} on it and otherwise only space.\n  function stripSpace () {\n    if (hasTag && !nonSpace) {\n      while (spaces.length)\n        delete tokens[spaces.pop()];\n    } else {\n      spaces = [];\n    }\n\n    hasTag = false;\n    nonSpace = false;\n  }\n\n  var openingTagRe, closingTagRe, closingCurlyRe;\n  function compileTags (tagsToCompile) {\n    if (typeof tagsToCompile === 'string')\n      tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n    if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n      throw new Error('Invalid tags: ' + tagsToCompile);\n\n    openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n    closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n    closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n  }\n\n  compileTags(tags || mustache.tags);\n\n  var scanner = new Scanner(template);\n\n  var start, type, value, chr, token, openSection;\n  while (!scanner.eos()) {\n    start = scanner.pos;\n\n    // Match any text between tags.\n    value = scanner.scanUntil(openingTagRe);\n\n    if (value) {\n      for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n        chr = value.charAt(i);\n\n        if (isWhitespace(chr)) {\n          spaces.push(tokens.length);\n          indentation += chr;\n        } else {\n          nonSpace = true;\n          lineHasNonSpace = true;\n          indentation += ' ';\n        }\n\n        tokens.push([ 'text', chr, start, start + 1 ]);\n        start += 1;\n\n        // Check for whitespace on the current line.\n        if (chr === '\\n') {\n          stripSpace();\n          indentation = '';\n          tagIndex = 0;\n          lineHasNonSpace = false;\n        }\n      }\n    }\n\n    // Match the opening tag.\n    if (!scanner.scan(openingTagRe))\n      break;\n\n    hasTag = true;\n\n    // Get the tag type.\n    type = scanner.scan(tagRe) || 'name';\n    scanner.scan(whiteRe);\n\n    // Get the tag value.\n    if (type === '=') {\n      value = scanner.scanUntil(equalsRe);\n      scanner.scan(equalsRe);\n      scanner.scanUntil(closingTagRe);\n    } else if (type === '{') {\n      value = scanner.scanUntil(closingCurlyRe);\n      scanner.scan(curlyRe);\n      scanner.scanUntil(closingTagRe);\n      type = '&';\n    } else {\n      value = scanner.scanUntil(closingTagRe);\n    }\n\n    // Match the closing tag.\n    if (!scanner.scan(closingTagRe))\n      throw new Error('Unclosed tag at ' + scanner.pos);\n\n    if (type == '>') {\n      token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];\n    } else {\n      token = [ type, value, start, scanner.pos ];\n    }\n    tagIndex++;\n    tokens.push(token);\n\n    if (type === '#' || type === '^') {\n      sections.push(token);\n    } else if (type === '/') {\n      // Check section nesting.\n      openSection = sections.pop();\n\n      if (!openSection)\n        throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n      if (openSection[1] !== value)\n        throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n    } else if (type === 'name' || type === '{' || type === '&') {\n      nonSpace = true;\n    } else if (type === '=') {\n      // Set the tags for the next time around.\n      compileTags(value);\n    }\n  }\n\n  stripSpace();\n\n  // Make sure there are no open sections when we're done.\n  openSection = sections.pop();\n\n  if (openSection)\n    throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n  return nestTokens(squashTokens(tokens));\n}\n\n/**\n * Combines the values of consecutive text tokens in the given `tokens` array\n * to a single token.\n */\nfunction squashTokens (tokens) {\n  var squashedTokens = [];\n\n  var token, lastToken;\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n    token = tokens[i];\n\n    if (token) {\n      if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n        lastToken[1] += token[1];\n        lastToken[3] = token[3];\n      } else {\n        squashedTokens.push(token);\n        lastToken = token;\n      }\n    }\n  }\n\n  return squashedTokens;\n}\n\n/**\n * Forms the given array of `tokens` into a nested tree structure where\n * tokens that represent a section have two additional items: 1) an array of\n * all tokens that appear in that section and 2) the index in the original\n * template that represents the end of that section.\n */\nfunction nestTokens (tokens) {\n  var nestedTokens = [];\n  var collector = nestedTokens;\n  var sections = [];\n\n  var token, section;\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n    token = tokens[i];\n\n    switch (token[0]) {\n      case '#':\n      case '^':\n        collector.push(token);\n        sections.push(token);\n        collector = token[4] = [];\n        break;\n      case '/':\n        section = sections.pop();\n        section[5] = token[2];\n        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n        break;\n      default:\n        collector.push(token);\n    }\n  }\n\n  return nestedTokens;\n}\n\n/**\n * A simple string scanner that is used by the template parser to find\n * tokens in template strings.\n */\nfunction Scanner (string) {\n  this.string = string;\n  this.tail = string;\n  this.pos = 0;\n}\n\n/**\n * Returns `true` if the tail is empty (end of string).\n */\nScanner.prototype.eos = function eos () {\n  return this.tail === '';\n};\n\n/**\n * Tries to match the given regular expression at the current position.\n * Returns the matched text if it can match, the empty string otherwise.\n */\nScanner.prototype.scan = function scan (re) {\n  var match = this.tail.match(re);\n\n  if (!match || match.index !== 0)\n    return '';\n\n  var string = match[0];\n\n  this.tail = this.tail.substring(string.length);\n  this.pos += string.length;\n\n  return string;\n};\n\n/**\n * Skips all text until the given regular expression can be matched. Returns\n * the skipped string, which is the entire tail if no match can be made.\n */\nScanner.prototype.scanUntil = function scanUntil (re) {\n  var index = this.tail.search(re), match;\n\n  switch (index) {\n    case -1:\n      match = this.tail;\n      this.tail = '';\n      break;\n    case 0:\n      match = '';\n      break;\n    default:\n      match = this.tail.substring(0, index);\n      this.tail = this.tail.substring(index);\n  }\n\n  this.pos += match.length;\n\n  return match;\n};\n\n/**\n * Represents a rendering context by wrapping a view object and\n * maintaining a reference to the parent context.\n */\nfunction Context (view, parentContext) {\n  this.view = view;\n  this.cache = { '.': this.view };\n  this.parent = parentContext;\n}\n\n/**\n * Creates a new context using the given view with this context\n * as the parent.\n */\nContext.prototype.push = function push (view) {\n  return new Context(view, this);\n};\n\n/**\n * Returns the value of the given name in this context, traversing\n * up the context hierarchy if the value is absent in this context's view.\n */\nContext.prototype.lookup = function lookup (name) {\n  var cache = this.cache;\n\n  var value;\n  if (cache.hasOwnProperty(name)) {\n    value = cache[name];\n  } else {\n    var context = this, intermediateValue, names, index, lookupHit = false;\n\n    while (context) {\n      if (name.indexOf('.') > 0) {\n        intermediateValue = context.view;\n        names = name.split('.');\n        index = 0;\n\n        /**\n         * Using the dot notion path in `name`, we descend through the\n         * nested objects.\n         *\n         * To be certain that the lookup has been successful, we have to\n         * check if the last object in the path actually has the property\n         * we are looking for. We store the result in `lookupHit`.\n         *\n         * This is specially necessary for when the value has been set to\n         * `undefined` and we want to avoid looking up parent contexts.\n         *\n         * In the case where dot notation is used, we consider the lookup\n         * to be successful even if the last \"object\" in the path is\n         * not actually an object but a primitive (e.g., a string, or an\n         * integer), because it is sometimes useful to access a property\n         * of an autoboxed primitive, such as the length of a string.\n         **/\n        while (intermediateValue != null && index < names.length) {\n          if (index === names.length - 1)\n            lookupHit = (\n              hasProperty(intermediateValue, names[index])\n              || primitiveHasOwnProperty(intermediateValue, names[index])\n            );\n\n          intermediateValue = intermediateValue[names[index++]];\n        }\n      } else {\n        intermediateValue = context.view[name];\n\n        /**\n         * Only checking against `hasProperty`, which always returns `false` if\n         * `context.view` is not an object. Deliberately omitting the check\n         * against `primitiveHasOwnProperty` if dot notation is not used.\n         *\n         * Consider this example:\n         * ```\n         * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n         * ```\n         *\n         * If we were to check also against `primitiveHasOwnProperty`, as we do\n         * in the dot notation case, then render call would return:\n         *\n         * \"The length of a football field is 9.\"\n         *\n         * rather than the expected:\n         *\n         * \"The length of a football field is 100 yards.\"\n         **/\n        lookupHit = hasProperty(context.view, name);\n      }\n\n      if (lookupHit) {\n        value = intermediateValue;\n        break;\n      }\n\n      context = context.parent;\n    }\n\n    cache[name] = value;\n  }\n\n  if (isFunction(value))\n    value = value.call(this.view);\n\n  return value;\n};\n\n/**\n * A Writer knows how to take a stream of tokens and render them to a\n * string, given a context. It also maintains a cache of templates to\n * avoid the need to parse the same template twice.\n */\nfunction Writer () {\n  this.templateCache = {\n    _cache: {},\n    set: function set (key, value) {\n      this._cache[key] = value;\n    },\n    get: function get (key) {\n      return this._cache[key];\n    },\n    clear: function clear () {\n      this._cache = {};\n    }\n  };\n}\n\n/**\n * Clears all cached templates in this writer.\n */\nWriter.prototype.clearCache = function clearCache () {\n  if (typeof this.templateCache !== 'undefined') {\n    this.templateCache.clear();\n  }\n};\n\n/**\n * Parses and caches the given `template` according to the given `tags` or\n * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n * that is generated from the parse.\n */\nWriter.prototype.parse = function parse (template, tags) {\n  var cache = this.templateCache;\n  var cacheKey = template + ':' + (tags || mustache.tags).join(':');\n  var isCacheEnabled = typeof cache !== 'undefined';\n  var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;\n\n  if (tokens == undefined) {\n    tokens = parseTemplate(template, tags);\n    isCacheEnabled && cache.set(cacheKey, tokens);\n  }\n  return tokens;\n};\n\n/**\n * High-level method that is used to render the given `template` with\n * the given `view`.\n *\n * The optional `partials` argument may be an object that contains the\n * names and templates of partials that are used in the template. It may\n * also be a function that is used to load partial templates on the fly\n * that takes a single argument: the name of the partial.\n *\n * If the optional `config` argument is given here, then it should be an\n * object with a `tags` attribute or an `escape` attribute or both.\n * If an array is passed, then it will be interpreted the same way as\n * a `tags` attribute on a `config` object.\n *\n * The `tags` attribute of a `config` object must be an array with two\n * string values: the opening and closing tags used in the template (e.g.\n * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n *\n * The `escape` attribute of a `config` object must be a function which\n * accepts a string as input and outputs a safely escaped string.\n * If an `escape` function is not provided, then an HTML-safe string\n * escaping function is used as the default.\n */\nWriter.prototype.render = function render (template, view, partials, config) {\n  var tags = this.getConfigTags(config);\n  var tokens = this.parse(template, tags);\n  var context = (view instanceof Context) ? view : new Context(view, undefined);\n  return this.renderTokens(tokens, context, partials, template, config);\n};\n\n/**\n * Low-level method that renders the given array of `tokens` using\n * the given `context` and `partials`.\n *\n * Note: The `originalTemplate` is only ever used to extract the portion\n * of the original template that was contained in a higher-order section.\n * If the template doesn't use higher-order sections, this argument may\n * be omitted.\n */\nWriter.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, config) {\n  var buffer = '';\n\n  var token, symbol, value;\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n    value = undefined;\n    token = tokens[i];\n    symbol = token[0];\n\n    if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate, config);\n    else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate, config);\n    else if (symbol === '>') value = this.renderPartial(token, context, partials, config);\n    else if (symbol === '&') value = this.unescapedValue(token, context);\n    else if (symbol === 'name') value = this.escapedValue(token, context, config);\n    else if (symbol === 'text') value = this.rawValue(token);\n\n    if (value !== undefined)\n      buffer += value;\n  }\n\n  return buffer;\n};\n\nWriter.prototype.renderSection = function renderSection (token, context, partials, originalTemplate, config) {\n  var self = this;\n  var buffer = '';\n  var value = context.lookup(token[1]);\n\n  // This function is used to render an arbitrary template\n  // in the current context by higher-order sections.\n  function subRender (template) {\n    return self.render(template, context, partials, config);\n  }\n\n  if (!value) return;\n\n  if (isArray(value)) {\n    for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n      buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);\n    }\n  } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n    buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);\n  } else if (isFunction(value)) {\n    if (typeof originalTemplate !== 'string')\n      throw new Error('Cannot use higher-order sections without the original template');\n\n    // Extract the portion of the original template that the section contains.\n    value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n    if (value != null)\n      buffer += value;\n  } else {\n    buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);\n  }\n  return buffer;\n};\n\nWriter.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate, config) {\n  var value = context.lookup(token[1]);\n\n  // Use JavaScript's definition of falsy. Include empty arrays.\n  // See https://github.com/janl/mustache.js/issues/186\n  if (!value || (isArray(value) && value.length === 0))\n    return this.renderTokens(token[4], context, partials, originalTemplate, config);\n};\n\nWriter.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {\n  var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\n  var partialByNl = partial.split('\\n');\n  for (var i = 0; i < partialByNl.length; i++) {\n    if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\n      partialByNl[i] = filteredIndentation + partialByNl[i];\n    }\n  }\n  return partialByNl.join('\\n');\n};\n\nWriter.prototype.renderPartial = function renderPartial (token, context, partials, config) {\n  if (!partials) return;\n  var tags = this.getConfigTags(config);\n\n  var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n  if (value != null) {\n    var lineHasNonSpace = token[6];\n    var tagIndex = token[5];\n    var indentation = token[4];\n    var indentedValue = value;\n    if (tagIndex == 0 && indentation) {\n      indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\n    }\n    var tokens = this.parse(indentedValue, tags);\n    return this.renderTokens(tokens, context, partials, indentedValue, config);\n  }\n};\n\nWriter.prototype.unescapedValue = function unescapedValue (token, context) {\n  var value = context.lookup(token[1]);\n  if (value != null)\n    return value;\n};\n\nWriter.prototype.escapedValue = function escapedValue (token, context, config) {\n  var escape = this.getConfigEscape(config) || mustache.escape;\n  var value = context.lookup(token[1]);\n  if (value != null)\n    return (typeof value === 'number' && escape === mustache.escape) ? String(value) : escape(value);\n};\n\nWriter.prototype.rawValue = function rawValue (token) {\n  return token[1];\n};\n\nWriter.prototype.getConfigTags = function getConfigTags (config) {\n  if (isArray(config)) {\n    return config;\n  }\n  else if (config && typeof config === 'object') {\n    return config.tags;\n  }\n  else {\n    return undefined;\n  }\n};\n\nWriter.prototype.getConfigEscape = function getConfigEscape (config) {\n  if (config && typeof config === 'object' && !isArray(config)) {\n    return config.escape;\n  }\n  else {\n    return undefined;\n  }\n};\n\nvar mustache = {\n  name: 'mustache.js',\n  version: '4.2.0',\n  tags: [ '{{', '}}' ],\n  clearCache: undefined,\n  escape: undefined,\n  parse: undefined,\n  render: undefined,\n  Scanner: undefined,\n  Context: undefined,\n  Writer: undefined,\n  /**\n   * Allows a user to override the default caching strategy, by providing an\n   * object with set, get and clear methods. This can also be used to disable\n   * the cache by setting it to the literal `undefined`.\n   */\n  set templateCache (cache) {\n    defaultWriter.templateCache = cache;\n  },\n  /**\n   * Gets the default or overridden caching object from the default writer.\n   */\n  get templateCache () {\n    return defaultWriter.templateCache;\n  }\n};\n\n// All high-level mustache.* functions use this writer.\nvar defaultWriter = new Writer();\n\n/**\n * Clears all cached templates in the default writer.\n */\nmustache.clearCache = function clearCache () {\n  return defaultWriter.clearCache();\n};\n\n/**\n * Parses and caches the given template in the default writer and returns the\n * array of tokens it contains. Doing this ahead of time avoids the need to\n * parse templates on the fly as they are rendered.\n */\nmustache.parse = function parse (template, tags) {\n  return defaultWriter.parse(template, tags);\n};\n\n/**\n * Renders the `template` with the given `view`, `partials`, and `config`\n * using the default writer.\n */\nmustache.render = function render (template, view, partials, config) {\n  if (typeof template !== 'string') {\n    throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                        'but \"' + typeStr(template) + '\" was given as the first ' +\n                        'argument for mustache#render(template, view, partials)');\n  }\n\n  return defaultWriter.render(template, view, partials, config);\n};\n\n// Export the escaping function so that the user may override it.\n// See https://github.com/janl/mustache.js/issues/244\nmustache.escape = escapeHtml;\n\n// Export these mainly for testing, but also for advanced usage.\nmustache.Scanner = Scanner;\nmustache.Context = Context;\nmustache.Writer = Writer;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (mustache);\n\n\n//# sourceURL=webpack://paper-streamfield/./node_modules/mustache/mustache.mjs?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__(356);
/******/ 	
/******/ })()
;