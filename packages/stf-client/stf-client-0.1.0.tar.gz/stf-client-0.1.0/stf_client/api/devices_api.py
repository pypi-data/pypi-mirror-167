"""
    Smartphone Test Farm

    Control and manages real Smartphone devices from browser and restful apis  # noqa: E501

    The version of the OpenAPI document: 2.4.0
    Contact: contact@openstf.io
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from stf_client.api_client import ApiClient, Endpoint as _Endpoint
from stf_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from stf_client.model.device_list_response import DeviceListResponse
from stf_client.model.device_response import DeviceResponse
from stf_client.model.error_response import ErrorResponse
from stf_client.model.group_list_response import GroupListResponse
from stf_client.model.unexpected_error_response import UnexpectedErrorResponse


class DevicesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_device_bookings_endpoint = _Endpoint(
            settings={
                'response_type': (GroupListResponse,),
                'auth': [
                    'accessTokenAuth'
                ],
                'endpoint_path': '/devices/{serial}/bookings',
                'operation_id': 'get_device_bookings',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'serial',
                    'fields',
                ],
                'required': [
                    'serial',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'serial':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'serial': 'serial',
                    'fields': 'fields',
                },
                'location_map': {
                    'serial': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_device_by_serial_endpoint = _Endpoint(
            settings={
                'response_type': (DeviceResponse,),
                'auth': [
                    'accessTokenAuth'
                ],
                'endpoint_path': '/devices/{serial}',
                'operation_id': 'get_device_by_serial',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'serial',
                    'fields',
                ],
                'required': [
                    'serial',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'serial':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'serial': 'serial',
                    'fields': 'fields',
                },
                'location_map': {
                    'serial': 'path',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_devices_endpoint = _Endpoint(
            settings={
                'response_type': (DeviceListResponse,),
                'auth': [
                    'accessTokenAuth'
                ],
                'endpoint_path': '/devices',
                'operation_id': 'get_devices',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'target',
                    'fields',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'target',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('target',): {

                        "BOOKABLE": "bookable",
                        "STANDARD": "standard",
                        "ORIGIN": "origin",
                        "STANDARDIZABLE": "standardizable",
                        "USER": "user"
                    },
                },
                'openapi_types': {
                    'target':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'target': 'target',
                    'fields': 'fields',
                },
                'location_map': {
                    'target': 'query',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def get_device_bookings(
        self,
        serial,
        **kwargs
    ):
        """Gets the bookings to which the device belongs  # noqa: E501

        Gets the bookings (i.e. transient groups) to which the device belongs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_device_bookings(serial, async_req=True)
        >>> result = thread.get()

        Args:
            serial (str): Device identifier (serial)

        Keyword Args:
            fields (str): Fields query parameter takes a comma seperated list of fields. Only listed field will be return in response. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GroupListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['serial'] = \
            serial
        return self.get_device_bookings_endpoint.call_with_http_info(**kwargs)

    def get_device_by_serial(
        self,
        serial,
        **kwargs
    ):
        """Device Information  # noqa: E501

        The devices serial enpoint return information about a single device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_device_by_serial(serial, async_req=True)
        >>> result = thread.get()

        Args:
            serial (str): Device Serial

        Keyword Args:
            fields (str): Fields query parameter takes a comma seperated list of fields. Only listed field will be return in response. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeviceResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['serial'] = \
            serial
        return self.get_device_by_serial_endpoint.call_with_http_info(**kwargs)

    def get_devices(
        self,
        **kwargs
    ):
        """Device List  # noqa: E501

        The devices endpoint return list of all the STF devices including Disconnected and Offline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_devices(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            target (str): Targets devices of your universe:  * bookable - devices belonging to a bookable group  * standard - devices belonging to a standard group  * origin - all devices  * standardizable - devices which are not yet booked including those belonging to a standard group  * user (default value) - devices which are accessible by you at a given time . [optional] if omitted the server will use the default value of "user"
            fields (str): Fields query parameter takes a comma seperated list of fields. Only listed field will be return in response. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeviceListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_devices_endpoint.call_with_http_info(**kwargs)

